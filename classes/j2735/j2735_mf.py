
# J2735_MessageSet is the python code generated by pycrate from ASN.1 files
from j2735 import MessageFrame
import ast
import json

#
# constants
#
MESSAGE_FIRST = 18
MESSAGE_MAP   = 18
MESSAGE_SPAT  = 19
MESSAGE_BSM   = 20
MESSAGE_CSR   = 21
MESSAGE_EVA   = 22
MESSAGE_ICA   = 23
MESSAGE_NMEA  = 24
MESSAGE_PDM   = 25
MESSAGE_PVD   = 26
MESSAGE_RSA   = 27
MESSAGE_RTCM  = 28
MESSAGE_SRM   = 29
MESSAGE_SSM   = 30
MESSAGE_TIM   = 31
MESSAGE_PSM   = 32
MESSAGE_RSM   = 33
MESSAGE_RWM   = 34
MESSAGE_PDC   = 35
MESSAGE_PDR   = 36
MESSAGE_TAM   = 37
MESSAGE_TUM   = 38
MESSAGE_TUMack = 39
MESSAGE_CCM   = 40
MESSAGE_SDSM  = 41
MESSAGE_MSCM  = 42
MESSAGE_RGA   = 43
MESSAGE_PSM2  = 44
MESSAGE_TSPAT = 45
MESSAGE_SCPR  = 46
MESSAGE_SCPS  = 47
MESSAGE_LAST  = 48

msg_names = {}
msg_names[MESSAGE_BSM] = "BSM"
msg_names[MESSAGE_MAP] = "MAP"
msg_names[MESSAGE_SPAT] = "SPAT"
msg_names[MESSAGE_CSR] = "CSR"
msg_names[MESSAGE_EVA] = "EVA"
msg_names[MESSAGE_ICA] = "ICA"
msg_names[MESSAGE_NMEA] = "NMEA"
msg_names[MESSAGE_PDM] = "PDM"
msg_names[MESSAGE_PVD] = "PPVD"
msg_names[MESSAGE_RSA] = "RSA"
msg_names[MESSAGE_RTCM] = "RTCM"
msg_names[MESSAGE_SRM] = "SRM"
msg_names[MESSAGE_SSM] = "SSM"
msg_names[MESSAGE_TIM] = "TIM"
msg_names[MESSAGE_PSM] = "PSM"
msg_names[MESSAGE_RSM] = "RSM"
msg_names[MESSAGE_RWM] = "RWM"
msg_names[MESSAGE_PDC] = "PDC"
msg_names[MESSAGE_PDR] = "PDR"
msg_names[MESSAGE_TAM] = "TAM"
msg_names[MESSAGE_TUM] = "TUM"
msg_names[MESSAGE_TUMack] = "TUMack"
msg_names[MESSAGE_CCM] = "CCM"
msg_names[MESSAGE_SDSM] = "SDSM"
msg_names[MESSAGE_MSCM] = "MSCM"
msg_names[MESSAGE_RGA] = "RGA"
msg_names[MESSAGE_PSM2] = "PSM"
msg_names[MESSAGE_TSPAT] = "TSPAT"
msg_names[MESSAGE_SCPR] = "SCPR"
msg_names[MESSAGE_SCPS] = "SCPS"

message_names = {}
message_names[MESSAGE_BSM] = "BasicSafetyMessage"
message_names[MESSAGE_MAP] = "MapData"
message_names[MESSAGE_SPAT] = "SPAT"
message_names[MESSAGE_CSR] = "CommonSafetyRequest"
message_names[MESSAGE_EVA] = "EmergencyVehicleAlert"
message_names[MESSAGE_ICA] = "IntersectionCollision"
message_names[MESSAGE_NMEA] = "NMEAcorrections"
message_names[MESSAGE_PDM] = "ProbeDataManagement"
message_names[MESSAGE_PVD] = "ProbeVehicleData"
message_names[MESSAGE_RSA] = "RoadSideAlert"
message_names[MESSAGE_RTCM] = "RTCMcorrections"
message_names[MESSAGE_SRM] = "SignalRequestMessage"
message_names[MESSAGE_SSM] = "SignalStatusMessage"
message_names[MESSAGE_TIM] = "TravelerInformationMessage"
message_names[MESSAGE_PSM] = "PersonalSafetyMessage"
message_names[MESSAGE_RSM] = "RoadSafetyMessage"
message_names[MESSAGE_RWM] = "RoadWeatherMessage"
message_names[MESSAGE_PDC] = "ProbeDataConfigMessage"
message_names[MESSAGE_PDR] = "ProbeDataReportMessage"
message_names[MESSAGE_TAM] = "TollAdvertisementMessage"
message_names[MESSAGE_TUM] = "TollUsageMessage"
message_names[MESSAGE_TUMack] = "TollUsageAckMessage"
message_names[MESSAGE_CCM] = "CooperativeControlMessage"
message_names[MESSAGE_SDSM] = "SensorDataSharingMessage"
message_names[MESSAGE_MSCM] = "ManeuverSharingAndCoordinatingMessage"
message_names[MESSAGE_RGA] = "RoadGeometryAndAttributes"
message_names[MESSAGE_PSM2] = "PersonalSafetyMessage2"
message_names[MESSAGE_TSPAT] = "TrafficSignalPhaseAndTiming"
message_names[MESSAGE_SCPR] = "SignalControlAndPrioritizationRequest"
message_names[MESSAGE_SCPS] = "SignalControlAndPrioritizationStatus"
                            
#
# MessageFrame (MF)
#
class j2735_mf(MessageFrame):
  def __init__(self):
    self.json = ""
    self.msg = {'messageId':0,'value':()}
    super().__init__()

  def decode_raw(self, frame):
    # decode MessageFrame (byte array) into Python data structure by way of JSON
    try:
      self.MessageFrame.from_uper(frame)
#      self.msg = self.MessageFrame.get_val() # pycrate core object
      # uper converted to json and reloaded as python
      self.json = self.MessageFrame.to_json()
      self.msg = json.loads(self.json)
      return self.msg
    except Exception as e:
      print(e)
      raise Exception("J7235 Decoding Error")

  def encode_raw(self, id, raw):
    # encode MessageFrame (byte array) from Python data structure by way of JSON
    try:
      # python converted to json to uper
      self.msg['messageId'] = id
      self.msg['value'] = raw['value'] #(_msg_names_[id], raw['value'])
      self.json = json.dumps(self.msg, indent=None, separators=(',', ':'))
      self.MessageFrame.from_json(self.json)
      return self.MessageFrame.to_uper()
    except Exception as e:
      print(e)
      raise Exception("J7235 Encoding Error")

  def encode_json(self):
    jmf = json.dumps(self.msg, indent=None, separators=('.', '='))
    return ''.join(jmf.split())

  def get_msg(self):
    return self.msg
  