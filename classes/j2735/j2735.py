# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class EfcDataDictionary:

    _name_  = 'EfcDataDictionary'
    _oid_   = [1, 0, 17573, 3, 1]
    
    _obj_ = [
        'Int1Unsigned',
        'Int1Signed',
        'Int2Unsigned',
        'Int2Signed',
        'Int3Unsigned',
        'Int4Unsigned',
        'Int4Signed',
        'Int8Unsigned',
        'Int8Signed',
        'AccountStatus',
        'ActualNumberOfPassengers',
        'Altitude',
        'CO2EmissionValue',
        'ContractAuthenticator',
        'ContractSerialNumber',
        'CopValue',
        'CountryCode',
        'DescriptiveCharacteristics',
        'DetectionMode',
        'EmissionUnit',
        'EngineCharacteristics',
        'EquipmentIccId',
        'EquipmentObuId',
        'EquipmentStatus',
        'EuroValue',
        'FutureCharacteristics',
        'IssuerIdentifier',
        'Latitude',
        'DistanceUnit',
        'LocalVehicleClassId',
        'LocationClassId',
        'Longitude',
        'PaymentSecurityData',
        'PayUnit',
        'PersonalAccountNumber',
        'ReceiptAuthenticator',
        'ReceiptDistance',
        'ResultFin',
        'ReceiptIccId',
        'ReceiptObuId',
        'ResultOp',
        'ReceiptServiceSerialNumber',
        'ReceiptText',
        'StationType',
        'TariffClassId',
        'Time',
        'TimeClassId',
        'TimeUnit',
        'TrailerType',
        'TyreConfiguration',
        'UserClassId',
        'VehicleAuthenticator',
        'VehicleClass',
        'VehicleCurrentMaxTrainWeight',
        'VehicleTotalDistance',
        'VehicleWeightLaden',
        'Weekday',
        'AbsolutePosition2d',
        'AbsolutePosition3d',
        'AxleWeightLimit',
        'AxleWeightLimits',
        'DateCompact',
        'DieselEmissionValues',
        'DriverCharacteristics',
        'Distance',
        'Duration',
        'EngineDetails',
        'ExhaustEmissionValues',
        'NumberOfAxles',
        'ObeId',
        'Particulate',
        'PassengerCapacity',
        'PaymentFee',
        'Period',
        'Provider',
        'RelativePosition3d',
        'SessionClass',
        'SessionLocation',
        'SignedValue',
        'SoundLevel',
        'TimeCompact',
        'TrailerDetails',
        'AxlesWeightLimits',
        'ChargeObjectId',
        'ContractValidity',
        'DateAndTime',
        'EnvironmentalCharacteristics',
        'Lpn',
        'PaymentMeans',
        'PaymentMeansBalance',
        'Point',
        'PurseBalance',
        'TrailerCharacteristics',
        'ValidityOfContract',
        'VehicleAxlesNumber',
        'VehicleDimensions',
        'VehicleWeightLimits',
        'EfcContextMark',
        'ReceiptContract',
        'ReceiptData',
        'ReceiptFinancialPart',
        'ReceiptServicePart',
        'UserId',
        'VehicleAxles',
        'VehicleSpecificCharacteristics',
        'AggregatedSingleTariffClassSession',
        'DetectedChargeObject',
        'TariffClassDescription',
        'VehicleDescription',
        ]
    _type_ = [
        'Int1Unsigned',
        'Int1Signed',
        'Int2Unsigned',
        'Int2Signed',
        'Int3Unsigned',
        'Int4Unsigned',
        'Int4Signed',
        'Int8Unsigned',
        'Int8Signed',
        'AccountStatus',
        'ActualNumberOfPassengers',
        'Altitude',
        'CO2EmissionValue',
        'ContractAuthenticator',
        'ContractSerialNumber',
        'CopValue',
        'CountryCode',
        'DescriptiveCharacteristics',
        'DetectionMode',
        'EmissionUnit',
        'EngineCharacteristics',
        'EquipmentIccId',
        'EquipmentObuId',
        'EquipmentStatus',
        'EuroValue',
        'FutureCharacteristics',
        'IssuerIdentifier',
        'Latitude',
        'DistanceUnit',
        'LocalVehicleClassId',
        'LocationClassId',
        'Longitude',
        'PaymentSecurityData',
        'PayUnit',
        'PersonalAccountNumber',
        'ReceiptAuthenticator',
        'ReceiptDistance',
        'ResultFin',
        'ReceiptIccId',
        'ReceiptObuId',
        'ResultOp',
        'ReceiptServiceSerialNumber',
        'ReceiptText',
        'StationType',
        'TariffClassId',
        'Time',
        'TimeClassId',
        'TimeUnit',
        'TrailerType',
        'TyreConfiguration',
        'UserClassId',
        'VehicleAuthenticator',
        'VehicleClass',
        'VehicleCurrentMaxTrainWeight',
        'VehicleTotalDistance',
        'VehicleWeightLaden',
        'Weekday',
        'AbsolutePosition2d',
        'AbsolutePosition3d',
        'AxleWeightLimit',
        'AxleWeightLimits',
        'DateCompact',
        'DieselEmissionValues',
        'DriverCharacteristics',
        'Distance',
        'Duration',
        'EngineDetails',
        'ExhaustEmissionValues',
        'NumberOfAxles',
        'ObeId',
        'Particulate',
        'PassengerCapacity',
        'PaymentFee',
        'Period',
        'Provider',
        'RelativePosition3d',
        'SessionClass',
        'SessionLocation',
        'SignedValue',
        'SoundLevel',
        'TimeCompact',
        'TrailerDetails',
        'AxlesWeightLimits',
        'ChargeObjectId',
        'ContractValidity',
        'DateAndTime',
        'EnvironmentalCharacteristics',
        'Lpn',
        'PaymentMeans',
        'PaymentMeansBalance',
        'Point',
        'PurseBalance',
        'TrailerCharacteristics',
        'ValidityOfContract',
        'VehicleAxlesNumber',
        'VehicleDimensions',
        'VehicleWeightLimits',
        'EfcContextMark',
        'ReceiptContract',
        'ReceiptData',
        'ReceiptFinancialPart',
        'ReceiptServicePart',
        'UserId',
        'VehicleAxles',
        'VehicleSpecificCharacteristics',
        'AggregatedSingleTariffClassSession',
        'DetectedChargeObject',
        'TariffClassDescription',
        'VehicleDescription',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< Int1Unsigned >-----#
    Int1Unsigned = INT(name='Int1Unsigned', mode=MODE_TYPE)
    Int1Unsigned._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Int1Signed >-----#
    Int1Signed = INT(name='Int1Signed', mode=MODE_TYPE)
    Int1Signed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-128, ub=127)], ev=None, er=[])
    
    #-----< Int2Unsigned >-----#
    Int2Unsigned = INT(name='Int2Unsigned', mode=MODE_TYPE)
    Int2Unsigned._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Int2Signed >-----#
    Int2Signed = INT(name='Int2Signed', mode=MODE_TYPE)
    Int2Signed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    
    #-----< Int3Unsigned >-----#
    Int3Unsigned = INT(name='Int3Unsigned', mode=MODE_TYPE)
    Int3Unsigned._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16777215)], ev=None, er=[])
    
    #-----< Int4Unsigned >-----#
    Int4Unsigned = INT(name='Int4Unsigned', mode=MODE_TYPE)
    Int4Unsigned._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< Int4Signed >-----#
    Int4Signed = INT(name='Int4Signed', mode=MODE_TYPE)
    Int4Signed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2147483648, ub=2147483647)], ev=None, er=[])
    
    #-----< Int8Unsigned >-----#
    Int8Unsigned = INT(name='Int8Unsigned', mode=MODE_TYPE)
    Int8Unsigned._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=9223372036854775807)], ev=None, er=[])
    
    #-----< Int8Signed >-----#
    Int8Signed = INT(name='Int8Signed', mode=MODE_TYPE)
    Int8Signed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-9223372036854775808, ub=9223372036854775807)], ev=None, er=[])
    
    #-----< AccountStatus >-----#
    AccountStatus = INT(name='AccountStatus', mode=MODE_TYPE)
    AccountStatus._cont = ASN1Dict([('ok', 0), ('low', 1), ('empty', 2), ('negative', 3)])
    AccountStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ActualNumberOfPassengers >-----#
    ActualNumberOfPassengers = INT(name='ActualNumberOfPassengers', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    
    #-----< Altitude >-----#
    Altitude = INT(name='Altitude', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int2Signed')))
    
    #-----< CO2EmissionValue >-----#
    CO2EmissionValue = INT(name='CO2EmissionValue', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    
    #-----< ContractAuthenticator >-----#
    ContractAuthenticator = OCT_STR(name='ContractAuthenticator', mode=MODE_TYPE)
    
    #-----< ContractSerialNumber >-----#
    ContractSerialNumber = INT(name='ContractSerialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    
    #-----< CopValue >-----#
    CopValue = INT(name='CopValue', mode=MODE_TYPE)
    CopValue._cont = ASN1Dict([('noEntry', 0), ('co2class1', 1), ('co2class2', 2), ('co2class3', 3), ('co2class4', 4), ('co2class5', 5), ('co2class6', 6), ('co2class7', 7)])
    CopValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< CountryCode >-----#
    CountryCode = BIT_STR(name='CountryCode', mode=MODE_TYPE)
    CountryCode._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    
    #-----< DescriptiveCharacteristics >-----#
    DescriptiveCharacteristics = INT(name='DescriptiveCharacteristics', mode=MODE_TYPE)
    DescriptiveCharacteristics._cont = ASN1Dict([('noEntry', 0)])
    DescriptiveCharacteristics._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DetectionMode >-----#
    DetectionMode = INT(name='DetectionMode', mode=MODE_TYPE)
    DetectionMode._cont = ASN1Dict([('measured', 0), ('inferred', 1), ('lac', 2)])
    DetectionMode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< EmissionUnit >-----#
    EmissionUnit = INT(name='EmissionUnit', mode=MODE_TYPE)
    EmissionUnit._cont = ASN1Dict([('mgPerKm', 0), ('mgPerKwh', 1)])
    EmissionUnit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1)], ev=None, er=[])
    
    #-----< EngineCharacteristics >-----#
    EngineCharacteristics = INT(name='EngineCharacteristics', mode=MODE_TYPE)
    EngineCharacteristics._cont = ASN1Dict([('noEntry', 0), ('noEngine', 1), ('petrolUnleaded', 2), ('petrolLeaded', 3), ('diesel', 4), ('lpg', 5), ('battery', 6), ('solar', 7), ('hybrid', 8), ('hydrogen', 9), ('multiFuel', 10), ('bivalentPetrolLpg', 11), ('bivalentPetrolCng', 12), ('combinedPetrolElectric', 13), ('cng', 14), ('lng', 15), ('combinedDieselElectric', 16), ('combinedHydrogenElectric', 17), ('bivalentHydrogenPetrol', 18), ('bivalentHydrogenPetrolElectricEngine', 19), ('fuelCellHydrogen', 20), ('fuelCellPetrol', 21), ('fuelCellMethanol', 22), ('fuelCellEthanol', 23), ('fuelCellDiesel', 24), ('combinedMultiFuelElectricEngine', 25), ('combinedCngElectricEngine', 26), ('combinedLngElectricEngine', 27), ('petrolEthanol', 28), ('combinedLpgElectricEngine', 29), ('hybridPetrolExternalBattery', 30), ('hybridDieselExternalBattery', 31), ('hybridLpgExternalBattery', 32), ('hybridHydrogenExternalBattery', 33), ('hybridMultiFuelExternalBattery', 34), ('hybridCngExternalBattery', 35), ('hybridLngExternalBattery', 36), ('hybridBivalentHydrogenPetrolExternalBattery', 37), ('hydrogenCng', 38), ('hydrogenLng', 39), ('hybridHydrogenCngExternalBattery', 40), ('hybridHydrogenLngExternalBattery', 41), ('ethanol', 42), ('hybridFuelCellHydrogen', 43), ('hybridFuelCellHydrogenExternalBattery', 44), ('dualFuelLngDiesel', 45), ('electricExternal', 46), ('biogas', 47), ('bioDiesel', 48), ('bioPetrol', 49), ('bivalentPetrolBiogas', 50), ('combinedBiogasElectricEngine', 51), ('dualFuelCngDiesel', 52), ('other', 255)])
    EngineCharacteristics._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< EquipmentIccId >-----#
    EquipmentIccId = OCT_STR(name='EquipmentIccId', mode=MODE_TYPE)
    
    #-----< EquipmentObuId >-----#
    EquipmentObuId = OCT_STR(name='EquipmentObuId', mode=MODE_TYPE)
    
    #-----< EquipmentStatus >-----#
    EquipmentStatus = BIT_STR(name='EquipmentStatus', mode=MODE_TYPE)
    EquipmentStatus._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< EuroValue >-----#
    EuroValue = INT(name='EuroValue', mode=MODE_TYPE)
    EuroValue._cont = ASN1Dict([('noEntry', 0), ('euro1', 1), ('euro2', 2), ('euro3', 3), ('euro4', 4), ('euro5', 5), ('euro6', 6), ('euro7', 7), ('eev', 15)])
    EuroValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< FutureCharacteristics >-----#
    FutureCharacteristics = INT(name='FutureCharacteristics', mode=MODE_TYPE)
    FutureCharacteristics._cont = ASN1Dict([('noEntry', 0), ('airSuspension', 1)])
    FutureCharacteristics._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< IssuerIdentifier >-----#
    IssuerIdentifier = INT(name='IssuerIdentifier', mode=MODE_TYPE)
    IssuerIdentifier._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16383)], ev=None, er=[])
    
    #-----< Latitude >-----#
    Latitude = INT(name='Latitude', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int4Signed')))
    
    #-----< DistanceUnit >-----#
    DistanceUnit = INT(name='DistanceUnit', mode=MODE_TYPE)
    DistanceUnit._cont = ASN1Dict([('kilometres', 0), ('miles', 1), ('metres', 2), ('yards', 3), ('feet', 4), ('decimetres', 5), ('quartermetres', 6), ('centimeters', 7), ('millimeters', 8)])
    DistanceUnit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LocalVehicleClassId >-----#
    LocalVehicleClassId = INT(name='LocalVehicleClassId', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    
    #-----< LocationClassId >-----#
    LocationClassId = INT(name='LocationClassId', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    
    #-----< Longitude >-----#
    Longitude = INT(name='Longitude', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int4Signed')))
    
    #-----< PaymentSecurityData >-----#
    PaymentSecurityData = OCT_STR(name='PaymentSecurityData', mode=MODE_TYPE)
    
    #-----< PayUnit >-----#
    PayUnit = OCT_STR(name='PayUnit', mode=MODE_TYPE)
    PayUnit._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< PersonalAccountNumber >-----#
    PersonalAccountNumber = OCT_STR(name='PersonalAccountNumber', mode=MODE_TYPE)
    PersonalAccountNumber._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    
    #-----< ReceiptAuthenticator >-----#
    ReceiptAuthenticator = OCT_STR(name='ReceiptAuthenticator', mode=MODE_TYPE)
    
    #-----< ReceiptDistance >-----#
    ReceiptDistance = INT(name='ReceiptDistance', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int3Unsigned')))
    
    #-----< ResultFin >-----#
    ResultFin = OCT_STR(name='ResultFin', mode=MODE_TYPE)
    ResultFin._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    
    #-----< ReceiptIccId >-----#
    ReceiptIccId = OCT_STR(name='ReceiptIccId', mode=MODE_TYPE)
    
    #-----< ReceiptObuId >-----#
    ReceiptObuId = OCT_STR(name='ReceiptObuId', mode=MODE_TYPE)
    
    #-----< ResultOp >-----#
    ResultOp = INT(name='ResultOp', mode=MODE_TYPE)
    ResultOp._cont = ASN1Dict([('correctTransaction', 0), ('obeStatusNotAccepted', 1), ('equipmentStatusNotAccepted', 2), ('contractNotInWhiteList', 3), ('contractIdentifierInBlackList', 4), ('contractIdentifierNotCorrect', 5), ('expiredContract', 6), ('contractRestrictionsNotFulfilled', 7), ('claimedVehicleCharacteristicsNotValid', 8), ('vehicleClassAuthenticationFailed', 9), ('entryVehicleClassDifferentFromExitVehicleClass', 10), ('entryReceiptMissing', 11), ('entryReceiptNotValid', 12), ('entryTollStationNotValid', 13), ('equipmentNotCertified', 14), ('timeDifference', 15), ('accessCredentialsNotAccepted', 16), ('contractAuthenticatorNotAccepted', 17), ('receiptAuthenticatorNotAccepted', 18), ('claimedVehicleCharacteristicsMissing', 19), ('paymentMeansNotAccepted', 20), ('paymentAuthenticatorNotAccepted', 21), ('paymentMeansInBlackList', 22), ('paymentMeansNotCorrect', 23), ('expiredPaymentMeans', 24), ('paymentMeansRestrictionsNotFulfilled', 25)])
    ResultOp._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ReceiptServiceSerialNumber >-----#
    ReceiptServiceSerialNumber = INT(name='ReceiptServiceSerialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int3Unsigned')))
    
    #-----< ReceiptText >-----#
    ReceiptText = OCT_STR(name='ReceiptText', mode=MODE_TYPE)
    
    #-----< StationType >-----#
    StationType = INT(name='StationType', mode=MODE_TYPE)
    StationType._cont = ASN1Dict([('unspecified', 0), ('closedEntryWithPayment', 1), ('closedEntryWithoutPayment', 2), ('closedTransit', 3), ('closedExit', 4), ('closedCredit', 5), ('mixed', 6), ('passage', 7), ('checkpoint', 8), ('reload', 9), ('reservedForFutureCENUse1', 10), ('reservedForFutureCENUse2', 11), ('reservedForFutureCENUse3', 12), ('reservedForFutureCENUse4', 13), ('privateUse5', 14), ('privateUse6', 15)])
    StationType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< TariffClassId >-----#
    TariffClassId = INT(name='TariffClassId', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    
    #-----< Time >-----#
    Time = INT(name='Time', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    
    #-----< TimeClassId >-----#
    TimeClassId = INT(name='TimeClassId', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    
    #-----< TimeUnit >-----#
    TimeUnit = INT(name='TimeUnit', mode=MODE_TYPE)
    TimeUnit._cont = ASN1Dict([('seconds', 0), ('minutes', 1), ('hours', 2), ('days', 3), ('months', 4)])
    TimeUnit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< TrailerType >-----#
    TrailerType = INT(name='TrailerType', mode=MODE_TYPE)
    TrailerType._cont = ASN1Dict([('notPresent', 0), ('trailer', 1), ('semitrailer', 2)])
    TrailerType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< TyreConfiguration >-----#
    TyreConfiguration = INT(name='TyreConfiguration', mode=MODE_TYPE)
    TyreConfiguration._cont = ASN1Dict([('notSpecified', 0), ('singleTyre', 1), ('dualTyres', 2), ('reservedForUse', 3)])
    TyreConfiguration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3)], ev=None, er=[])
    
    #-----< UserClassId >-----#
    UserClassId = INT(name='UserClassId', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    
    #-----< VehicleAuthenticator >-----#
    VehicleAuthenticator = OCT_STR(name='VehicleAuthenticator', mode=MODE_TYPE)
    
    #-----< VehicleClass >-----#
    VehicleClass = INT(name='VehicleClass', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    
    #-----< VehicleCurrentMaxTrainWeight >-----#
    VehicleCurrentMaxTrainWeight = INT(name='VehicleCurrentMaxTrainWeight', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    
    #-----< VehicleTotalDistance >-----#
    VehicleTotalDistance = INT(name='VehicleTotalDistance', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    
    #-----< VehicleWeightLaden >-----#
    VehicleWeightLaden = INT(name='VehicleWeightLaden', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    
    #-----< Weekday >-----#
    Weekday = INT(name='Weekday', mode=MODE_TYPE)
    Weekday._cont = ASN1Dict([('reserved', 0), ('monday', 1), ('tuesday', 2), ('wednesday', 3), ('thursday', 4), ('friday', 5), ('saturday', 6), ('sunday', 7)])
    Weekday._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< AbsolutePosition2d >-----#
    AbsolutePosition2d = SEQ(name='AbsolutePosition2d', mode=MODE_TYPE)
    _AbsolutePosition2d_gnssLon = INT(name='gnssLon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Longitude')))
    _AbsolutePosition2d_gnssLat = INT(name='gnssLat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Latitude')))
    AbsolutePosition2d._cont = ASN1Dict([
        ('gnssLon', _AbsolutePosition2d_gnssLon),
        ('gnssLat', _AbsolutePosition2d_gnssLat),
        ])
    AbsolutePosition2d._ext = None
    
    #-----< AbsolutePosition3d >-----#
    AbsolutePosition3d = SEQ(name='AbsolutePosition3d', mode=MODE_TYPE)
    _AbsolutePosition3d_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Longitude')))
    _AbsolutePosition3d_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Latitude')))
    _AbsolutePosition3d_altitude = INT(name='altitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Altitude')), opt=True)
    AbsolutePosition3d._cont = ASN1Dict([
        ('longitude', _AbsolutePosition3d_longitude),
        ('latitude', _AbsolutePosition3d_latitude),
        ('altitude', _AbsolutePosition3d_altitude),
        ])
    AbsolutePosition3d._ext = None
    
    #-----< AxleWeightLimit >-----#
    AxleWeightLimit = SEQ(name='AxleWeightLimit', mode=MODE_TYPE)
    _AxleWeightLimit_axleNumber = INT(name='axleNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _AxleWeightLimit_maxLadenWeightOnAxle = INT(name='maxLadenWeightOnAxle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    AxleWeightLimit._cont = ASN1Dict([
        ('axleNumber', _AxleWeightLimit_axleNumber),
        ('maxLadenWeightOnAxle', _AxleWeightLimit_maxLadenWeightOnAxle),
        ])
    AxleWeightLimit._ext = None
    
    #-----< AxleWeightLimits >-----#
    AxleWeightLimits = SEQ(name='AxleWeightLimits', mode=MODE_TYPE)
    _AxleWeightLimits_maxLadenweightOnAxle1 = INT(name='maxLadenweightOnAxle1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _AxleWeightLimits_maxLadenweightOnAxle2 = INT(name='maxLadenweightOnAxle2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _AxleWeightLimits_maxLadenweightOnAxle3 = INT(name='maxLadenweightOnAxle3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _AxleWeightLimits_maxLadenweightOnAxle4 = INT(name='maxLadenweightOnAxle4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _AxleWeightLimits_maxLadenweightOnAxle5 = INT(name='maxLadenweightOnAxle5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    AxleWeightLimits._cont = ASN1Dict([
        ('maxLadenweightOnAxle1', _AxleWeightLimits_maxLadenweightOnAxle1),
        ('maxLadenweightOnAxle2', _AxleWeightLimits_maxLadenweightOnAxle2),
        ('maxLadenweightOnAxle3', _AxleWeightLimits_maxLadenweightOnAxle3),
        ('maxLadenweightOnAxle4', _AxleWeightLimits_maxLadenweightOnAxle4),
        ('maxLadenweightOnAxle5', _AxleWeightLimits_maxLadenweightOnAxle5),
        ])
    AxleWeightLimits._ext = None
    
    #-----< DateCompact >-----#
    DateCompact = SEQ(name='DateCompact', mode=MODE_TYPE)
    _DateCompact_year = INT(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DateCompact_year._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1990, ub=2117)], ev=None, er=[])
    _DateCompact_month = INT(name='month', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DateCompact_month._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=12)], ev=None, er=[])
    _DateCompact_day = INT(name='day', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DateCompact_day._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=31)], ev=None, er=[])
    DateCompact._cont = ASN1Dict([
        ('year', _DateCompact_year),
        ('month', _DateCompact_month),
        ('day', _DateCompact_day),
        ])
    DateCompact._ext = None
    
    #-----< DieselEmissionValues >-----#
    DieselEmissionValues = SEQ(name='DieselEmissionValues', mode=MODE_TYPE)
    _DieselEmissionValues_particulate = SEQ(name='particulate', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Particulate')))
    _DieselEmissionValues_absorptionCoeff = INT(name='absorptionCoeff', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    DieselEmissionValues._cont = ASN1Dict([
        ('particulate', _DieselEmissionValues_particulate),
        ('absorptionCoeff', _DieselEmissionValues_absorptionCoeff),
        ])
    DieselEmissionValues._ext = None
    
    #-----< DriverCharacteristics >-----#
    DriverCharacteristics = SEQ(name='DriverCharacteristics', mode=MODE_TYPE)
    _DriverCharacteristics_driverClass = INT(name='driverClass', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _DriverCharacteristics_tripPurpose = INT(name='tripPurpose', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    DriverCharacteristics._cont = ASN1Dict([
        ('driverClass', _DriverCharacteristics_driverClass),
        ('tripPurpose', _DriverCharacteristics_tripPurpose),
        ])
    DriverCharacteristics._ext = None
    
    #-----< Distance >-----#
    Distance = SEQ(name='Distance', mode=MODE_TYPE)
    _Distance_distanceValue = INT(name='distanceValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    _Distance_distanceUnit = INT(name='distanceUnit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DistanceUnit')), default=0)
    Distance._cont = ASN1Dict([
        ('distanceValue', _Distance_distanceValue),
        ('distanceUnit', _Distance_distanceUnit),
        ])
    Distance._ext = None
    
    #-----< Duration >-----#
    Duration = SEQ(name='Duration', mode=MODE_TYPE)
    _Duration_durationValue = INT(name='durationValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    _Duration_timeUnit = INT(name='timeUnit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TimeUnit')), default=0)
    Duration._cont = ASN1Dict([
        ('durationValue', _Duration_durationValue),
        ('timeUnit', _Duration_timeUnit),
        ])
    Duration._ext = None
    
    #-----< EngineDetails >-----#
    EngineDetails = SEQ(name='EngineDetails', mode=MODE_TYPE)
    _EngineDetails_engineCapacity = INT(name='engineCapacity', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _EngineDetails_enginePower = INT(name='enginePower', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    EngineDetails._cont = ASN1Dict([
        ('engineCapacity', _EngineDetails_engineCapacity),
        ('enginePower', _EngineDetails_enginePower),
        ])
    EngineDetails._ext = None
    
    #-----< ExhaustEmissionValues >-----#
    ExhaustEmissionValues = SEQ(name='ExhaustEmissionValues', mode=MODE_TYPE)
    _ExhaustEmissionValues_unitType = INT(name='unitType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EmissionUnit')))
    _ExhaustEmissionValues_emissionCo = INT(name='emissionCo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ExhaustEmissionValues_emissionCo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    _ExhaustEmissionValues_emissionHc = INT(name='emissionHc', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _ExhaustEmissionValues_emissionNox = INT(name='emissionNox', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _ExhaustEmissionValues_emissionHcNox = INT(name='emissionHcNox', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    ExhaustEmissionValues._cont = ASN1Dict([
        ('unitType', _ExhaustEmissionValues_unitType),
        ('emissionCo', _ExhaustEmissionValues_emissionCo),
        ('emissionHc', _ExhaustEmissionValues_emissionHc),
        ('emissionNox', _ExhaustEmissionValues_emissionNox),
        ('emissionHcNox', _ExhaustEmissionValues_emissionHcNox),
        ])
    ExhaustEmissionValues._ext = None
    
    #-----< NumberOfAxles >-----#
    NumberOfAxles = SEQ(name='NumberOfAxles', mode=MODE_TYPE)
    _NumberOfAxles_trailerAxles = INT(name='trailerAxles', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NumberOfAxles_trailerAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    _NumberOfAxles_tractorAxles = INT(name='tractorAxles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NumberOfAxles_tractorAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    NumberOfAxles._cont = ASN1Dict([
        ('trailerAxles', _NumberOfAxles_trailerAxles),
        ('tractorAxles', _NumberOfAxles_tractorAxles),
        ])
    NumberOfAxles._ext = None
    
    #-----< ObeId >-----#
    ObeId = SEQ(name='ObeId', mode=MODE_TYPE)
    _ObeId_manufacturerId = INT(name='manufacturerId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _ObeId_equipmentObuId = OCT_STR(name='equipmentObuId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EquipmentObuId')))
    ObeId._cont = ASN1Dict([
        ('manufacturerId', _ObeId_manufacturerId),
        ('equipmentObuId', _ObeId_equipmentObuId),
        ])
    ObeId._ext = None
    
    #-----< Particulate >-----#
    Particulate = SEQ(name='Particulate', mode=MODE_TYPE)
    _Particulate_unitType = INT(name='unitType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EmissionUnit')))
    _Particulate_value = INT(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Particulate_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    Particulate._cont = ASN1Dict([
        ('unitType', _Particulate_unitType),
        ('value', _Particulate_value),
        ])
    Particulate._ext = None
    
    #-----< PassengerCapacity >-----#
    PassengerCapacity = SEQ(name='PassengerCapacity', mode=MODE_TYPE)
    _PassengerCapacity_numberOfSeats = INT(name='numberOfSeats', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _PassengerCapacity_numberOfStandingPlaces = INT(name='numberOfStandingPlaces', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    PassengerCapacity._cont = ASN1Dict([
        ('numberOfSeats', _PassengerCapacity_numberOfSeats),
        ('numberOfStandingPlaces', _PassengerCapacity_numberOfStandingPlaces),
        ])
    PassengerCapacity._ext = None
    
    #-----< PaymentFee >-----#
    PaymentFee = SEQ(name='PaymentFee', mode=MODE_TYPE)
    _PaymentFee_paymentFeeAmount = INT(name='paymentFeeAmount', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _PaymentFee_paymentFeeUnit = OCT_STR(name='paymentFeeUnit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PayUnit')))
    PaymentFee._cont = ASN1Dict([
        ('paymentFeeAmount', _PaymentFee_paymentFeeAmount),
        ('paymentFeeUnit', _PaymentFee_paymentFeeUnit),
        ])
    PaymentFee._ext = None
    
    #-----< Period >-----#
    Period = SEQ(name='Period', mode=MODE_TYPE)
    _Period_beginOfPeriod = TIME_GEN(name='beginOfPeriod', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Period_endOfPeriod = TIME_GEN(name='endOfPeriod', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Period._cont = ASN1Dict([
        ('beginOfPeriod', _Period_beginOfPeriod),
        ('endOfPeriod', _Period_endOfPeriod),
        ])
    Period._ext = None
    
    #-----< Provider >-----#
    Provider = SEQ(name='Provider', mode=MODE_TYPE)
    _Provider_countryCode = BIT_STR(name='countryCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'CountryCode')))
    _Provider_providerIdentifier = INT(name='providerIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'IssuerIdentifier')))
    Provider._cont = ASN1Dict([
        ('countryCode', _Provider_countryCode),
        ('providerIdentifier', _Provider_providerIdentifier),
        ])
    Provider._ext = None
    
    #-----< RelativePosition3d >-----#
    RelativePosition3d = SEQ(name='RelativePosition3d', mode=MODE_TYPE)
    _RelativePosition3d_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Signed')))
    _RelativePosition3d_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Signed')))
    _RelativePosition3d_altitude = INT(name='altitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Signed')), opt=True)
    RelativePosition3d._cont = ASN1Dict([
        ('longitude', _RelativePosition3d_longitude),
        ('latitude', _RelativePosition3d_latitude),
        ('altitude', _RelativePosition3d_altitude),
        ])
    RelativePosition3d._ext = None
    
    #-----< SessionClass >-----#
    SessionClass = SEQ(name='SessionClass', mode=MODE_TYPE)
    _SessionClass_sessionTariffClass = INT(name='sessionTariffClass', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _SessionClass_sessionClaimedClass = INT(name='sessionClaimedClass', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    SessionClass._cont = ASN1Dict([
        ('sessionTariffClass', _SessionClass_sessionTariffClass),
        ('sessionClaimedClass', _SessionClass_sessionClaimedClass),
        ])
    SessionClass._ext = None
    
    #-----< SessionLocation >-----#
    SessionLocation = SEQ(name='SessionLocation', mode=MODE_TYPE)
    _SessionLocation_ascendingKilometrage = BOOL(name='ascendingKilometrage', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SessionLocation_laneCodeNumber = INT(name='laneCodeNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SessionLocation_laneCodeNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    SessionLocation._cont = ASN1Dict([
        ('ascendingKilometrage', _SessionLocation_ascendingKilometrage),
        ('laneCodeNumber', _SessionLocation_laneCodeNumber),
        ])
    SessionLocation._ext = None
    
    #-----< SignedValue >-----#
    SignedValue = CHOICE(name='SignedValue', mode=MODE_TYPE)
    _SignedValue_positive = INT(name='positive', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SignedValue_positive._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8388607)], ev=None, er=[])
    _SignedValue_negative = INT(name='negative', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SignedValue_negative._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8388608, ub=-1)], ev=None, er=[])
    SignedValue._cont = ASN1Dict([
        ('positive', _SignedValue_positive),
        ('negative', _SignedValue_negative),
        ])
    SignedValue._ext = None
    
    #-----< SoundLevel >-----#
    SoundLevel = SEQ(name='SoundLevel', mode=MODE_TYPE)
    _SoundLevel_soundStationary = INT(name='soundStationary', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _SoundLevel_soundDriveBy = INT(name='soundDriveBy', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    SoundLevel._cont = ASN1Dict([
        ('soundStationary', _SoundLevel_soundStationary),
        ('soundDriveBy', _SoundLevel_soundDriveBy),
        ])
    SoundLevel._ext = None
    
    #-----< TimeCompact >-----#
    TimeCompact = SEQ(name='TimeCompact', mode=MODE_TYPE)
    _TimeCompact_hours = INT(name='hours', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TimeCompact_hours._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=23)], ev=None, er=[])
    _TimeCompact_mins = INT(name='mins', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TimeCompact_mins._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=59)], ev=None, er=[])
    _TimeCompact_doubleSecs = INT(name='doubleSecs', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TimeCompact_doubleSecs._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=30)], ev=None, er=[])
    TimeCompact._cont = ASN1Dict([
        ('hours', _TimeCompact_hours),
        ('mins', _TimeCompact_mins),
        ('doubleSecs', _TimeCompact_doubleSecs),
        ])
    TimeCompact._ext = None
    
    #-----< TrailerDetails >-----#
    TrailerDetails = SEQ(name='TrailerDetails', mode=MODE_TYPE)
    _TrailerDetails_trailerType = INT(name='trailerType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TrailerType')))
    _TrailerDetails_trailerAxles = INT(name='trailerAxles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TrailerDetails_trailerAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    TrailerDetails._cont = ASN1Dict([
        ('trailerType', _TrailerDetails_trailerType),
        ('trailerAxles', _TrailerDetails_trailerAxles),
        ])
    TrailerDetails._ext = None
    
    #-----< AxlesWeightLimits >-----#
    AxlesWeightLimits = SEQ_OF(name='AxlesWeightLimits', mode=MODE_TYPE)
    _AxlesWeightLimits__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'AxleWeightLimit')))
    AxlesWeightLimits._cont = _AxlesWeightLimits__item_
    
    #-----< ChargeObjectId >-----#
    ChargeObjectId = SEQ(name='ChargeObjectId', mode=MODE_TYPE)
    _ChargeObjectId_chargeObjectOperator = SEQ(name='chargeObjectOperator', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Provider')), opt=True)
    _ChargeObjectId_chargeObjectDesignation = INT(name='chargeObjectDesignation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    ChargeObjectId._cont = ASN1Dict([
        ('chargeObjectOperator', _ChargeObjectId_chargeObjectOperator),
        ('chargeObjectDesignation', _ChargeObjectId_chargeObjectDesignation),
        ])
    ChargeObjectId._ext = None
    
    #-----< ContractValidity >-----#
    ContractValidity = SEQ(name='ContractValidity', mode=MODE_TYPE)
    _ContractValidity_contractRestrictions = OCT_STR(name='contractRestrictions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ContractValidity_contractRestrictions._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    _ContractValidity_contractExpiryDate = SEQ(name='contractExpiryDate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DateCompact')))
    ContractValidity._cont = ASN1Dict([
        ('contractRestrictions', _ContractValidity_contractRestrictions),
        ('contractExpiryDate', _ContractValidity_contractExpiryDate),
        ])
    ContractValidity._ext = None
    
    #-----< DateAndTime >-----#
    DateAndTime = SEQ(name='DateAndTime', mode=MODE_TYPE)
    _DateAndTime_timeDate = SEQ(name='timeDate', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DateCompact')))
    _DateAndTime_timeCompact = SEQ(name='timeCompact', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TimeCompact')))
    DateAndTime._cont = ASN1Dict([
        ('timeDate', _DateAndTime_timeDate),
        ('timeCompact', _DateAndTime_timeCompact),
        ])
    DateAndTime._ext = None
    
    #-----< EnvironmentalCharacteristics >-----#
    EnvironmentalCharacteristics = SEQ(name='EnvironmentalCharacteristics', mode=MODE_TYPE)
    _EnvironmentalCharacteristics_euroValue = INT(name='euroValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EuroValue')))
    _EnvironmentalCharacteristics_copValue = INT(name='copValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'CopValue')))
    EnvironmentalCharacteristics._cont = ASN1Dict([
        ('euroValue', _EnvironmentalCharacteristics_euroValue),
        ('copValue', _EnvironmentalCharacteristics_copValue),
        ])
    EnvironmentalCharacteristics._ext = None
    
    #-----< Lpn >-----#
    Lpn = SEQ(name='Lpn', mode=MODE_TYPE)
    _Lpn_countryCode = BIT_STR(name='countryCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'CountryCode')))
    _Lpn_alphabetIndicator = ENUM(name='alphabetIndicator', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Lpn_alphabetIndicator._cont = ASN1Dict([('latinAlphabetNo1', 1), ('latinAlphabetNo2', 2), ('latinAlphabetNo3', 3), ('latinAlphabetNo4', 4), ('latinCyrillicAlphabet', 5), ('latinArabicAlphabet', 6), ('latinGreekAlphabet', 7), ('latinHebrewAlphabet', 8), ('latinAlphabetNo5', 9), ('latinAlphabetNo6', 10), ('twoOctetBMP', 11), ('fourOctetCanonical', 12), ('reservedForUse1', 13), ('reservedForUse2', 14), ('reservedForUse3', 15), ('reservedForUse4', 16), ('reservedForUse5', 17), ('reservedForUse6', 18), ('reservedForUse7', 19), ('reservedForUse8', 20), ('reservedForUse9', 21), ('reservedForUse10', 22), ('reservedForUse11', 23), ('reservedForUse12', 24), ('reservedForUse13', 25), ('reservedForUse14', 26), ('reservedForUse15', 27), ('reservedForUse16', 28), ('reservedForUse17', 29), ('reservedForUse18', 30), ('reservedForUse19', 31), ('reservedForUse20', 32), ('reservedForUse21', 33)])
    _Lpn_alphabetIndicator._ext = None
    _Lpn_licencePlateNumber = OCT_STR(name='licencePlateNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Lpn._cont = ASN1Dict([
        ('countryCode', _Lpn_countryCode),
        ('alphabetIndicator', _Lpn_alphabetIndicator),
        ('licencePlateNumber', _Lpn_licencePlateNumber),
        ])
    Lpn._ext = None
    
    #-----< PaymentMeans >-----#
    PaymentMeans = SEQ(name='PaymentMeans', mode=MODE_TYPE)
    _PaymentMeans_personalAccountNumber = OCT_STR(name='personalAccountNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PersonalAccountNumber')))
    _PaymentMeans_paymentMeansExpiryDate = SEQ(name='paymentMeansExpiryDate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DateCompact')))
    _PaymentMeans_pamentMeansUsageControl = OCT_STR(name='pamentMeansUsageControl', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PaymentMeans_pamentMeansUsageControl._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    PaymentMeans._cont = ASN1Dict([
        ('personalAccountNumber', _PaymentMeans_personalAccountNumber),
        ('paymentMeansExpiryDate', _PaymentMeans_paymentMeansExpiryDate),
        ('pamentMeansUsageControl', _PaymentMeans_pamentMeansUsageControl),
        ])
    PaymentMeans._ext = None
    
    #-----< PaymentMeansBalance >-----#
    PaymentMeansBalance = CHOICE(name='PaymentMeansBalance', mode=MODE_TYPE, typeref=ASN1RefType(('EfcDataDictionary', 'SignedValue')))
    
    #-----< Point >-----#
    Point = CHOICE(name='Point', mode=MODE_TYPE)
    _Point_pointIdentifier = INT(name='pointIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    _Point_absolutePointCoordinates = SEQ(name='absolutePointCoordinates', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'AbsolutePosition3d')))
    _Point_relativePointCoordinates = SEQ(name='relativePointCoordinates', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'RelativePosition3d')))
    Point._cont = ASN1Dict([
        ('pointIdentifier', _Point_pointIdentifier),
        ('absolutePointCoordinates', _Point_absolutePointCoordinates),
        ('relativePointCoordinates', _Point_relativePointCoordinates),
        ])
    Point._ext = None
    
    #-----< PurseBalance >-----#
    PurseBalance = SEQ(name='PurseBalance', mode=MODE_TYPE)
    _PurseBalance_purseValue = CHOICE(name='purseValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'SignedValue')))
    _PurseBalance_purseUnit = OCT_STR(name='purseUnit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PayUnit')))
    PurseBalance._cont = ASN1Dict([
        ('purseValue', _PurseBalance_purseValue),
        ('purseUnit', _PurseBalance_purseUnit),
        ])
    PurseBalance._ext = None
    
    #-----< TrailerCharacteristics >-----#
    TrailerCharacteristics = SEQ(name='TrailerCharacteristics', mode=MODE_TYPE)
    _TrailerCharacteristics_trailerDetails = SEQ(name='trailerDetails', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TrailerDetails')))
    _TrailerCharacteristics_trailerMaxLadenWeight = INT(name='trailerMaxLadenWeight', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _TrailerCharacteristics_trailerWeightUnladen = INT(name='trailerWeightUnladen', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    TrailerCharacteristics._cont = ASN1Dict([
        ('trailerDetails', _TrailerCharacteristics_trailerDetails),
        ('trailerMaxLadenWeight', _TrailerCharacteristics_trailerMaxLadenWeight),
        ('trailerWeightUnladen', _TrailerCharacteristics_trailerWeightUnladen),
        ])
    TrailerCharacteristics._ext = None
    
    #-----< ValidityOfContract >-----#
    ValidityOfContract = SEQ(name='ValidityOfContract', mode=MODE_TYPE)
    _ValidityOfContract_issuerRestrictions = OCT_STR(name='issuerRestrictions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ValidityOfContract_issuerRestrictions._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _ValidityOfContract_contractExpiryDate = SEQ(name='contractExpiryDate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DateCompact')))
    ValidityOfContract._cont = ASN1Dict([
        ('issuerRestrictions', _ValidityOfContract_issuerRestrictions),
        ('contractExpiryDate', _ValidityOfContract_contractExpiryDate),
        ])
    ValidityOfContract._ext = None
    
    #-----< VehicleAxlesNumber >-----#
    VehicleAxlesNumber = SEQ(name='VehicleAxlesNumber', mode=MODE_TYPE)
    _VehicleAxlesNumber_tyreConfiguration = INT(name='tyreConfiguration', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TyreConfiguration')))
    _VehicleAxlesNumber_numberOfAxles = SEQ(name='numberOfAxles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'NumberOfAxles')))
    VehicleAxlesNumber._cont = ASN1Dict([
        ('tyreConfiguration', _VehicleAxlesNumber_tyreConfiguration),
        ('numberOfAxles', _VehicleAxlesNumber_numberOfAxles),
        ])
    VehicleAxlesNumber._ext = None
    
    #-----< VehicleDimensions >-----#
    VehicleDimensions = SEQ(name='VehicleDimensions', mode=MODE_TYPE)
    _VehicleDimensions_vehicleLengthOverall = INT(name='vehicleLengthOverall', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _VehicleDimensions_vehicleHeigthOverall = INT(name='vehicleHeigthOverall', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _VehicleDimensions_vehicleWidthOverall = INT(name='vehicleWidthOverall', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    VehicleDimensions._cont = ASN1Dict([
        ('vehicleLengthOverall', _VehicleDimensions_vehicleLengthOverall),
        ('vehicleHeigthOverall', _VehicleDimensions_vehicleHeigthOverall),
        ('vehicleWidthOverall', _VehicleDimensions_vehicleWidthOverall),
        ])
    VehicleDimensions._ext = None
    
    #-----< VehicleWeightLimits >-----#
    VehicleWeightLimits = SEQ(name='VehicleWeightLimits', mode=MODE_TYPE)
    _VehicleWeightLimits_vehicleMaxLadenWeight = INT(name='vehicleMaxLadenWeight', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _VehicleWeightLimits_vehicleTrainMaximumWeight = INT(name='vehicleTrainMaximumWeight', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _VehicleWeightLimits_vehicleWeightUnladen = INT(name='vehicleWeightUnladen', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    VehicleWeightLimits._cont = ASN1Dict([
        ('vehicleMaxLadenWeight', _VehicleWeightLimits_vehicleMaxLadenWeight),
        ('vehicleTrainMaximumWeight', _VehicleWeightLimits_vehicleTrainMaximumWeight),
        ('vehicleWeightUnladen', _VehicleWeightLimits_vehicleWeightUnladen),
        ])
    VehicleWeightLimits._ext = None
    
    #-----< EfcContextMark >-----#
    EfcContextMark = SEQ(name='EfcContextMark', mode=MODE_TYPE)
    _EfcContextMark_contractProvider = SEQ(name='contractProvider', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Provider')))
    _EfcContextMark_typeOfContract = OCT_STR(name='typeOfContract', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EfcContextMark_typeOfContract._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _EfcContextMark_contextVersion = INT(name='contextVersion', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EfcContextMark_contextVersion._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    EfcContextMark._cont = ASN1Dict([
        ('contractProvider', _EfcContextMark_contractProvider),
        ('typeOfContract', _EfcContextMark_typeOfContract),
        ('contextVersion', _EfcContextMark_contextVersion),
        ])
    EfcContextMark._ext = None
    
    #-----< ReceiptContract >-----#
    ReceiptContract = SEQ(name='ReceiptContract', mode=MODE_TYPE)
    _ReceiptContract_sessionContractProvider = SEQ(name='sessionContractProvider', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Provider')))
    _ReceiptContract_sessionTypeOfContract = OCT_STR(name='sessionTypeOfContract', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ReceiptContract_sessionTypeOfContract._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _ReceiptContract_sessionContractSerialNumber = INT(name='sessionContractSerialNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    ReceiptContract._cont = ASN1Dict([
        ('sessionContractProvider', _ReceiptContract_sessionContractProvider),
        ('sessionTypeOfContract', _ReceiptContract_sessionTypeOfContract),
        ('sessionContractSerialNumber', _ReceiptContract_sessionContractSerialNumber),
        ])
    ReceiptContract._ext = None
    
    #-----< ReceiptData >-----#
    ReceiptData = SEQ(name='ReceiptData', mode=MODE_TYPE)
    _ReceiptData_sessionTime = SEQ(name='sessionTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DateAndTime')))
    _ReceiptData_sessionServiceProvider = SEQ(name='sessionServiceProvider', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Provider')))
    _ReceiptData_locationOfStation = INT(name='locationOfStation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')))
    _ReceiptData_sessionLocation = SEQ(name='sessionLocation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'SessionLocation')))
    _ReceiptData_sessionType = INT(name='sessionType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _ReceiptData_sessionResult = INT(name='sessionResult', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ResultOp')))
    _ReceiptData_sessionTariffClass = INT(name='sessionTariffClass', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _ReceiptData_sessionClaimedClass = INT(name='sessionClaimedClass', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _ReceiptData_sessionFee = SEQ(name='sessionFee', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    _ReceiptData_sessionContractProvider = SEQ(name='sessionContractProvider', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Provider')))
    _ReceiptData_sessionTypeOfContract = OCT_STR(name='sessionTypeOfContract', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ReceiptData_sessionTypeOfContract._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _ReceiptData_sessionContextVersion = INT(name='sessionContextVersion', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ReceiptData_sessionContextVersion._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _ReceiptData_receiptDataAuthenticator = OCT_STR(name='receiptDataAuthenticator', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ReceiptData_receiptDataAuthenticator._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    ReceiptData._cont = ASN1Dict([
        ('sessionTime', _ReceiptData_sessionTime),
        ('sessionServiceProvider', _ReceiptData_sessionServiceProvider),
        ('locationOfStation', _ReceiptData_locationOfStation),
        ('sessionLocation', _ReceiptData_sessionLocation),
        ('sessionType', _ReceiptData_sessionType),
        ('sessionResult', _ReceiptData_sessionResult),
        ('sessionTariffClass', _ReceiptData_sessionTariffClass),
        ('sessionClaimedClass', _ReceiptData_sessionClaimedClass),
        ('sessionFee', _ReceiptData_sessionFee),
        ('sessionContractProvider', _ReceiptData_sessionContractProvider),
        ('sessionTypeOfContract', _ReceiptData_sessionTypeOfContract),
        ('sessionContextVersion', _ReceiptData_sessionContextVersion),
        ('receiptDataAuthenticator', _ReceiptData_receiptDataAuthenticator),
        ])
    ReceiptData._ext = None
    
    #-----< ReceiptFinancialPart >-----#
    ReceiptFinancialPart = SEQ(name='ReceiptFinancialPart', mode=MODE_TYPE)
    _ReceiptFinancialPart_personalAccountNumber = OCT_STR(name='personalAccountNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PersonalAccountNumber')))
    _ReceiptFinancialPart_sessionPaymentFee = SEQ(name='sessionPaymentFee', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    _ReceiptFinancialPart_sessionCurrentBalance = SEQ(name='sessionCurrentBalance', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PurseBalance')))
    _ReceiptFinancialPart_receiptFinancialSerialNumber = INT(name='receiptFinancialSerialNumber', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')))
    ReceiptFinancialPart._cont = ASN1Dict([
        ('personalAccountNumber', _ReceiptFinancialPart_personalAccountNumber),
        ('sessionPaymentFee', _ReceiptFinancialPart_sessionPaymentFee),
        ('sessionCurrentBalance', _ReceiptFinancialPart_sessionCurrentBalance),
        ('receiptFinancialSerialNumber', _ReceiptFinancialPart_receiptFinancialSerialNumber),
        ])
    ReceiptFinancialPart._ext = None
    
    #-----< ReceiptServicePart >-----#
    ReceiptServicePart = SEQ(name='ReceiptServicePart', mode=MODE_TYPE)
    _ReceiptServicePart_sessionTime = SEQ(name='sessionTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DateAndTime')))
    _ReceiptServicePart_sessionServiceProvider = SEQ(name='sessionServiceProvider', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Provider')))
    _ReceiptServicePart_stationLocation = INT(name='stationLocation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ReceiptServicePart_stationLocation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1048575)], ev=None, er=[])
    _ReceiptServicePart_sessionLocation = BIT_STR(name='sessionLocation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ReceiptServicePart_sessionLocation._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    _ReceiptServicePart_typeOfSession = INT(name='typeOfSession', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'StationType')))
    _ReceiptServicePart_sessionResultOperational = INT(name='sessionResultOperational', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ResultOp')))
    _ReceiptServicePart_sessionResultFinancial = OCT_STR(name='sessionResultFinancial', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ResultFin')))
    ReceiptServicePart._cont = ASN1Dict([
        ('sessionTime', _ReceiptServicePart_sessionTime),
        ('sessionServiceProvider', _ReceiptServicePart_sessionServiceProvider),
        ('stationLocation', _ReceiptServicePart_stationLocation),
        ('sessionLocation', _ReceiptServicePart_sessionLocation),
        ('typeOfSession', _ReceiptServicePart_typeOfSession),
        ('sessionResultOperational', _ReceiptServicePart_sessionResultOperational),
        ('sessionResultFinancial', _ReceiptServicePart_sessionResultFinancial),
        ])
    ReceiptServicePart._ext = None
    
    #-----< UserId >-----#
    UserId = SEQ(name='UserId', mode=MODE_TYPE)
    _UserId_pan = OCT_STR(name='pan', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PersonalAccountNumber')), opt=True)
    _UserId_contractSerialNumber = INT(name='contractSerialNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ContractSerialNumber')), opt=True)
    _UserId_licencePlateNumber = SEQ(name='licencePlateNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Lpn')), opt=True)
    _UserId_obeId = SEQ(name='obeId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ObeId')), opt=True)
    _UserId_iccId = OCT_STR(name='iccId', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EquipmentIccId')), opt=True)
    UserId._cont = ASN1Dict([
        ('pan', _UserId_pan),
        ('contractSerialNumber', _UserId_contractSerialNumber),
        ('licencePlateNumber', _UserId_licencePlateNumber),
        ('obeId', _UserId_obeId),
        ('iccId', _UserId_iccId),
        ])
    UserId._ext = None
    
    #-----< VehicleAxles >-----#
    VehicleAxles = SEQ(name='VehicleAxles', mode=MODE_TYPE)
    _VehicleAxles_vehicleFirstAxleHeight = INT(name='vehicleFirstAxleHeight', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')))
    _VehicleAxles_vehicleAxlesNumber = SEQ(name='vehicleAxlesNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleAxlesNumber')))
    VehicleAxles._cont = ASN1Dict([
        ('vehicleFirstAxleHeight', _VehicleAxles_vehicleFirstAxleHeight),
        ('vehicleAxlesNumber', _VehicleAxles_vehicleAxlesNumber),
        ])
    VehicleAxles._ext = None
    
    #-----< VehicleSpecificCharacteristics >-----#
    VehicleSpecificCharacteristics = SEQ(name='VehicleSpecificCharacteristics', mode=MODE_TYPE)
    _VehicleSpecificCharacteristics_environmentalCharacteristics = SEQ(name='environmentalCharacteristics', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EnvironmentalCharacteristics')))
    _VehicleSpecificCharacteristics_engineCharacteristics = INT(name='engineCharacteristics', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EngineCharacteristics')))
    _VehicleSpecificCharacteristics_descriptiveCharacteristics = INT(name='descriptiveCharacteristics', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DescriptiveCharacteristics')))
    _VehicleSpecificCharacteristics_futureCharacteristics = INT(name='futureCharacteristics', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'FutureCharacteristics')))
    VehicleSpecificCharacteristics._cont = ASN1Dict([
        ('environmentalCharacteristics', _VehicleSpecificCharacteristics_environmentalCharacteristics),
        ('engineCharacteristics', _VehicleSpecificCharacteristics_engineCharacteristics),
        ('descriptiveCharacteristics', _VehicleSpecificCharacteristics_descriptiveCharacteristics),
        ('futureCharacteristics', _VehicleSpecificCharacteristics_futureCharacteristics),
        ])
    VehicleSpecificCharacteristics._ext = None
    
    #-----< AggregatedSingleTariffClassSession >-----#
    AggregatedSingleTariffClassSession = SEQ(name='AggregatedSingleTariffClassSession', mode=MODE_TYPE)
    _AggregatedSingleTariffClassSession_timePeriodCovered = SEQ(name='timePeriodCovered', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Period')), opt=True)
    _AggregatedSingleTariffClassSession_currentTariffClass = SEQ(name='currentTariffClass', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TariffClassDescription')), opt=True)
    _AggregatedSingleTariffClassSession_vehicleDescription = SEQ(name='vehicleDescription', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleDescription')), opt=True)
    _AggregatedSingleTariffClassSession_totalDistanceCovered = SEQ(name='totalDistanceCovered', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Distance')), opt=True)
    _AggregatedSingleTariffClassSession_numberOfDetectedEvents = INT(name='numberOfDetectedEvents', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int2Unsigned')), opt=True)
    _AggregatedSingleTariffClassSession_obeStatus = INT(name='obeStatus', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')), opt=True)
    _AggregatedSingleTariffClassSession_feeExclVat = SEQ(name='feeExclVat', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _AggregatedSingleTariffClassSession_sumVat = SEQ(name='sumVat', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    AggregatedSingleTariffClassSession._cont = ASN1Dict([
        ('timePeriodCovered', _AggregatedSingleTariffClassSession_timePeriodCovered),
        ('currentTariffClass', _AggregatedSingleTariffClassSession_currentTariffClass),
        ('vehicleDescription', _AggregatedSingleTariffClassSession_vehicleDescription),
        ('totalDistanceCovered', _AggregatedSingleTariffClassSession_totalDistanceCovered),
        ('numberOfDetectedEvents', _AggregatedSingleTariffClassSession_numberOfDetectedEvents),
        ('obeStatus', _AggregatedSingleTariffClassSession_obeStatus),
        ('feeExclVat', _AggregatedSingleTariffClassSession_feeExclVat),
        ('sumVat', _AggregatedSingleTariffClassSession_sumVat),
        ])
    AggregatedSingleTariffClassSession._ext = []
    
    #-----< DetectedChargeObject >-----#
    DetectedChargeObject = SEQ(name='DetectedChargeObject', mode=MODE_TYPE)
    _DetectedChargeObject_chargeObjectId = SEQ(name='chargeObjectId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ChargeObjectId')))
    _DetectedChargeObject_subObjectNumber = INT(name='subObjectNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int4Unsigned')), opt=True)
    _DetectedChargeObject_timeWhenUsed = TIME_GEN(name='timeWhenUsed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetectedChargeObject_mileageWhenUsed = SEQ(name='mileageWhenUsed', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Distance')), opt=True)
    _DetectedChargeObject_currentTariffClass = SEQ(name='currentTariffClass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TariffClassDescription')), opt=True)
    _DetectedChargeObject_vehicleDescription = SEQ(name='vehicleDescription', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleDescription')), opt=True)
    _DetectedChargeObject_obeStatus = INT(name='obeStatus', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Int1Unsigned')), opt=True)
    _DetectedChargeObject_feeExclVat = SEQ(name='feeExclVat', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _DetectedChargeObject_sumVat = SEQ(name='sumVat', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _DetectedChargeObject_chargeObjDetectionMode = INT(name='chargeObjDetectionMode', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DetectionMode')), opt=True)
    DetectedChargeObject._cont = ASN1Dict([
        ('chargeObjectId', _DetectedChargeObject_chargeObjectId),
        ('subObjectNumber', _DetectedChargeObject_subObjectNumber),
        ('timeWhenUsed', _DetectedChargeObject_timeWhenUsed),
        ('mileageWhenUsed', _DetectedChargeObject_mileageWhenUsed),
        ('currentTariffClass', _DetectedChargeObject_currentTariffClass),
        ('vehicleDescription', _DetectedChargeObject_vehicleDescription),
        ('obeStatus', _DetectedChargeObject_obeStatus),
        ('feeExclVat', _DetectedChargeObject_feeExclVat),
        ('sumVat', _DetectedChargeObject_sumVat),
        ('chargeObjDetectionMode', _DetectedChargeObject_chargeObjDetectionMode),
        ])
    DetectedChargeObject._ext = []
    
    #-----< TariffClassDescription >-----#
    TariffClassDescription = SEQ(name='TariffClassDescription', mode=MODE_TYPE)
    _TariffClassDescription_tariffClassId = INT(name='tariffClassId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TariffClassId')), default=0)
    _TariffClassDescription_localVehicleClassId = INT(name='localVehicleClassId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'LocalVehicleClassId')), opt=True)
    _TariffClassDescription_timeClassId = INT(name='timeClassId', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TimeClassId')), opt=True)
    _TariffClassDescription_locationClassId = INT(name='locationClassId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'LocationClassId')), opt=True)
    _TariffClassDescription_userClassId = INT(name='userClassId', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'UserClassId')), opt=True)
    TariffClassDescription._cont = ASN1Dict([
        ('tariffClassId', _TariffClassDescription_tariffClassId),
        ('localVehicleClassId', _TariffClassDescription_localVehicleClassId),
        ('timeClassId', _TariffClassDescription_timeClassId),
        ('locationClassId', _TariffClassDescription_locationClassId),
        ('userClassId', _TariffClassDescription_userClassId),
        ])
    TariffClassDescription._ext = None
    
    #-----< VehicleDescription >-----#
    VehicleDescription = SEQ(name='VehicleDescription', mode=MODE_TYPE)
    _VehicleDescription_vehicleLPNr = SEQ(name='vehicleLPNr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'Lpn')), opt=True)
    _VehicleDescription_axles = SEQ(name='axles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleAxles')), opt=True)
    _VehicleDescription_class_ = INT(name='class', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleClass')), opt=True)
    _VehicleDescription_dimensions = SEQ(name='dimensions', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleDimensions')), opt=True)
    _VehicleDescription_specificCharacteristics = SEQ(name='specificCharacteristics', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleSpecificCharacteristics')), opt=True)
    _VehicleDescription_ladenWeight = INT(name='ladenWeight', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleWeightLaden')), opt=True)
    _VehicleDescription_weightLimits = SEQ(name='weightLimits', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleWeightLimits')), opt=True)
    _VehicleDescription_trailerCharacteristics = SEQ(name='trailerCharacteristics', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'TrailerCharacteristics')), opt=True)
    _VehicleDescription_vehicleCurrentMaxTrainWeight = INT(name='vehicleCurrentMaxTrainWeight', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleCurrentMaxTrainWeight')), opt=True)
    _VehicleDescription_actualNumberOfPassengers = INT(name='actualNumberOfPassengers', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ActualNumberOfPassengers')), opt=True)
    _VehicleDescription_axleWeightLimits = SEQ(name='axleWeightLimits', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'AxleWeightLimits')), opt=True)
    _VehicleDescription_dieselEmissionValues = SEQ(name='dieselEmissionValues', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DieselEmissionValues')), opt=True)
    _VehicleDescription_driverCharacteristics = SEQ(name='driverCharacteristics', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'DriverCharacteristics')), opt=True)
    _VehicleDescription_engineDetails = SEQ(name='engineDetails', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EngineDetails')), opt=True)
    _VehicleDescription_exhaustEmissionValues = SEQ(name='exhaustEmissionValues', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'ExhaustEmissionValues')), opt=True)
    _VehicleDescription_passengerCapacity = SEQ(name='passengerCapacity', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PassengerCapacity')), opt=True)
    _VehicleDescription_soundLevel = SEQ(name='soundLevel', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'SoundLevel')), opt=True)
    VehicleDescription._cont = ASN1Dict([
        ('vehicleLPNr', _VehicleDescription_vehicleLPNr),
        ('axles', _VehicleDescription_axles),
        ('class', _VehicleDescription_class_),
        ('dimensions', _VehicleDescription_dimensions),
        ('specificCharacteristics', _VehicleDescription_specificCharacteristics),
        ('ladenWeight', _VehicleDescription_ladenWeight),
        ('weightLimits', _VehicleDescription_weightLimits),
        ('trailerCharacteristics', _VehicleDescription_trailerCharacteristics),
        ('vehicleCurrentMaxTrainWeight', _VehicleDescription_vehicleCurrentMaxTrainWeight),
        ('actualNumberOfPassengers', _VehicleDescription_actualNumberOfPassengers),
        ('axleWeightLimits', _VehicleDescription_axleWeightLimits),
        ('dieselEmissionValues', _VehicleDescription_dieselEmissionValues),
        ('driverCharacteristics', _VehicleDescription_driverCharacteristics),
        ('engineDetails', _VehicleDescription_engineDetails),
        ('exhaustEmissionValues', _VehicleDescription_exhaustEmissionValues),
        ('passengerCapacity', _VehicleDescription_passengerCapacity),
        ('soundLevel', _VehicleDescription_soundLevel),
        ])
    VehicleDescription._ext = []
    
    _all_ = [
        Int1Unsigned,
        Int1Signed,
        Int2Unsigned,
        Int2Signed,
        Int3Unsigned,
        Int4Unsigned,
        Int4Signed,
        Int8Unsigned,
        Int8Signed,
        AccountStatus,
        ActualNumberOfPassengers,
        Altitude,
        CO2EmissionValue,
        ContractAuthenticator,
        ContractSerialNumber,
        CopValue,
        CountryCode,
        DescriptiveCharacteristics,
        DetectionMode,
        EmissionUnit,
        EngineCharacteristics,
        EquipmentIccId,
        EquipmentObuId,
        EquipmentStatus,
        EuroValue,
        FutureCharacteristics,
        IssuerIdentifier,
        Latitude,
        DistanceUnit,
        LocalVehicleClassId,
        LocationClassId,
        Longitude,
        PaymentSecurityData,
        PayUnit,
        PersonalAccountNumber,
        ReceiptAuthenticator,
        ReceiptDistance,
        ResultFin,
        ReceiptIccId,
        ReceiptObuId,
        ResultOp,
        ReceiptServiceSerialNumber,
        ReceiptText,
        StationType,
        TariffClassId,
        Time,
        TimeClassId,
        TimeUnit,
        TrailerType,
        TyreConfiguration,
        UserClassId,
        VehicleAuthenticator,
        VehicleClass,
        VehicleCurrentMaxTrainWeight,
        VehicleTotalDistance,
        VehicleWeightLaden,
        Weekday,
        _AbsolutePosition2d_gnssLon,
        _AbsolutePosition2d_gnssLat,
        AbsolutePosition2d,
        _AbsolutePosition3d_longitude,
        _AbsolutePosition3d_latitude,
        _AbsolutePosition3d_altitude,
        AbsolutePosition3d,
        _AxleWeightLimit_axleNumber,
        _AxleWeightLimit_maxLadenWeightOnAxle,
        AxleWeightLimit,
        _AxleWeightLimits_maxLadenweightOnAxle1,
        _AxleWeightLimits_maxLadenweightOnAxle2,
        _AxleWeightLimits_maxLadenweightOnAxle3,
        _AxleWeightLimits_maxLadenweightOnAxle4,
        _AxleWeightLimits_maxLadenweightOnAxle5,
        AxleWeightLimits,
        _DateCompact_year,
        _DateCompact_month,
        _DateCompact_day,
        DateCompact,
        _DieselEmissionValues_particulate,
        _DieselEmissionValues_absorptionCoeff,
        DieselEmissionValues,
        _DriverCharacteristics_driverClass,
        _DriverCharacteristics_tripPurpose,
        DriverCharacteristics,
        _Distance_distanceValue,
        _Distance_distanceUnit,
        Distance,
        _Duration_durationValue,
        _Duration_timeUnit,
        Duration,
        _EngineDetails_engineCapacity,
        _EngineDetails_enginePower,
        EngineDetails,
        _ExhaustEmissionValues_unitType,
        _ExhaustEmissionValues_emissionCo,
        _ExhaustEmissionValues_emissionHc,
        _ExhaustEmissionValues_emissionNox,
        _ExhaustEmissionValues_emissionHcNox,
        ExhaustEmissionValues,
        _NumberOfAxles_trailerAxles,
        _NumberOfAxles_tractorAxles,
        NumberOfAxles,
        _ObeId_manufacturerId,
        _ObeId_equipmentObuId,
        ObeId,
        _Particulate_unitType,
        _Particulate_value,
        Particulate,
        _PassengerCapacity_numberOfSeats,
        _PassengerCapacity_numberOfStandingPlaces,
        PassengerCapacity,
        _PaymentFee_paymentFeeAmount,
        _PaymentFee_paymentFeeUnit,
        PaymentFee,
        _Period_beginOfPeriod,
        _Period_endOfPeriod,
        Period,
        _Provider_countryCode,
        _Provider_providerIdentifier,
        Provider,
        _RelativePosition3d_longitude,
        _RelativePosition3d_latitude,
        _RelativePosition3d_altitude,
        RelativePosition3d,
        _SessionClass_sessionTariffClass,
        _SessionClass_sessionClaimedClass,
        SessionClass,
        _SessionLocation_ascendingKilometrage,
        _SessionLocation_laneCodeNumber,
        SessionLocation,
        _SignedValue_positive,
        _SignedValue_negative,
        SignedValue,
        _SoundLevel_soundStationary,
        _SoundLevel_soundDriveBy,
        SoundLevel,
        _TimeCompact_hours,
        _TimeCompact_mins,
        _TimeCompact_doubleSecs,
        TimeCompact,
        _TrailerDetails_trailerType,
        _TrailerDetails_trailerAxles,
        TrailerDetails,
        _AxlesWeightLimits__item_,
        AxlesWeightLimits,
        _ChargeObjectId_chargeObjectOperator,
        _ChargeObjectId_chargeObjectDesignation,
        ChargeObjectId,
        _ContractValidity_contractRestrictions,
        _ContractValidity_contractExpiryDate,
        ContractValidity,
        _DateAndTime_timeDate,
        _DateAndTime_timeCompact,
        DateAndTime,
        _EnvironmentalCharacteristics_euroValue,
        _EnvironmentalCharacteristics_copValue,
        EnvironmentalCharacteristics,
        _Lpn_countryCode,
        _Lpn_alphabetIndicator,
        _Lpn_licencePlateNumber,
        Lpn,
        _PaymentMeans_personalAccountNumber,
        _PaymentMeans_paymentMeansExpiryDate,
        _PaymentMeans_pamentMeansUsageControl,
        PaymentMeans,
        PaymentMeansBalance,
        _Point_pointIdentifier,
        _Point_absolutePointCoordinates,
        _Point_relativePointCoordinates,
        Point,
        _PurseBalance_purseValue,
        _PurseBalance_purseUnit,
        PurseBalance,
        _TrailerCharacteristics_trailerDetails,
        _TrailerCharacteristics_trailerMaxLadenWeight,
        _TrailerCharacteristics_trailerWeightUnladen,
        TrailerCharacteristics,
        _ValidityOfContract_issuerRestrictions,
        _ValidityOfContract_contractExpiryDate,
        ValidityOfContract,
        _VehicleAxlesNumber_tyreConfiguration,
        _VehicleAxlesNumber_numberOfAxles,
        VehicleAxlesNumber,
        _VehicleDimensions_vehicleLengthOverall,
        _VehicleDimensions_vehicleHeigthOverall,
        _VehicleDimensions_vehicleWidthOverall,
        VehicleDimensions,
        _VehicleWeightLimits_vehicleMaxLadenWeight,
        _VehicleWeightLimits_vehicleTrainMaximumWeight,
        _VehicleWeightLimits_vehicleWeightUnladen,
        VehicleWeightLimits,
        _EfcContextMark_contractProvider,
        _EfcContextMark_typeOfContract,
        _EfcContextMark_contextVersion,
        EfcContextMark,
        _ReceiptContract_sessionContractProvider,
        _ReceiptContract_sessionTypeOfContract,
        _ReceiptContract_sessionContractSerialNumber,
        ReceiptContract,
        _ReceiptData_sessionTime,
        _ReceiptData_sessionServiceProvider,
        _ReceiptData_locationOfStation,
        _ReceiptData_sessionLocation,
        _ReceiptData_sessionType,
        _ReceiptData_sessionResult,
        _ReceiptData_sessionTariffClass,
        _ReceiptData_sessionClaimedClass,
        _ReceiptData_sessionFee,
        _ReceiptData_sessionContractProvider,
        _ReceiptData_sessionTypeOfContract,
        _ReceiptData_sessionContextVersion,
        _ReceiptData_receiptDataAuthenticator,
        ReceiptData,
        _ReceiptFinancialPart_personalAccountNumber,
        _ReceiptFinancialPart_sessionPaymentFee,
        _ReceiptFinancialPart_sessionCurrentBalance,
        _ReceiptFinancialPart_receiptFinancialSerialNumber,
        ReceiptFinancialPart,
        _ReceiptServicePart_sessionTime,
        _ReceiptServicePart_sessionServiceProvider,
        _ReceiptServicePart_stationLocation,
        _ReceiptServicePart_sessionLocation,
        _ReceiptServicePart_typeOfSession,
        _ReceiptServicePart_sessionResultOperational,
        _ReceiptServicePart_sessionResultFinancial,
        ReceiptServicePart,
        _UserId_pan,
        _UserId_contractSerialNumber,
        _UserId_licencePlateNumber,
        _UserId_obeId,
        _UserId_iccId,
        UserId,
        _VehicleAxles_vehicleFirstAxleHeight,
        _VehicleAxles_vehicleAxlesNumber,
        VehicleAxles,
        _VehicleSpecificCharacteristics_environmentalCharacteristics,
        _VehicleSpecificCharacteristics_engineCharacteristics,
        _VehicleSpecificCharacteristics_descriptiveCharacteristics,
        _VehicleSpecificCharacteristics_futureCharacteristics,
        VehicleSpecificCharacteristics,
        _AggregatedSingleTariffClassSession_timePeriodCovered,
        _AggregatedSingleTariffClassSession_currentTariffClass,
        _AggregatedSingleTariffClassSession_vehicleDescription,
        _AggregatedSingleTariffClassSession_totalDistanceCovered,
        _AggregatedSingleTariffClassSession_numberOfDetectedEvents,
        _AggregatedSingleTariffClassSession_obeStatus,
        _AggregatedSingleTariffClassSession_feeExclVat,
        _AggregatedSingleTariffClassSession_sumVat,
        AggregatedSingleTariffClassSession,
        _DetectedChargeObject_chargeObjectId,
        _DetectedChargeObject_subObjectNumber,
        _DetectedChargeObject_timeWhenUsed,
        _DetectedChargeObject_mileageWhenUsed,
        _DetectedChargeObject_currentTariffClass,
        _DetectedChargeObject_vehicleDescription,
        _DetectedChargeObject_obeStatus,
        _DetectedChargeObject_feeExclVat,
        _DetectedChargeObject_sumVat,
        _DetectedChargeObject_chargeObjDetectionMode,
        DetectedChargeObject,
        _TariffClassDescription_tariffClassId,
        _TariffClassDescription_localVehicleClassId,
        _TariffClassDescription_timeClassId,
        _TariffClassDescription_locationClassId,
        _TariffClassDescription_userClassId,
        TariffClassDescription,
        _VehicleDescription_vehicleLPNr,
        _VehicleDescription_axles,
        _VehicleDescription_class_,
        _VehicleDescription_dimensions,
        _VehicleDescription_specificCharacteristics,
        _VehicleDescription_ladenWeight,
        _VehicleDescription_weightLimits,
        _VehicleDescription_trailerCharacteristics,
        _VehicleDescription_vehicleCurrentMaxTrainWeight,
        _VehicleDescription_actualNumberOfPassengers,
        _VehicleDescription_axleWeightLimits,
        _VehicleDescription_dieselEmissionValues,
        _VehicleDescription_driverCharacteristics,
        _VehicleDescription_engineDetails,
        _VehicleDescription_exhaustEmissionValues,
        _VehicleDescription_passengerCapacity,
        _VehicleDescription_soundLevel,
        VehicleDescription,
    ]

class J2540ITIS:

    _name_  = 'J2540ITIS'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2540, 2, 1, 1, 1]
    
    _obj_ = [
        'AccidentsAndIncidents',
        'AlternateRoute',
        'AssetStatus',
        'Closures',
        'DelayStatusCancellation',
        'DeviceStatus',
        'Disasters',
        'Disturbances',
        'GenericLocations',
        'IncidentResponseEquipment',
        'IncidentResponseStatus',
        'SystemInformation',
        'AdviceInstructionsMandatory',
        'AdviceInstructionsRecommendations',
        'ITIStext',
        'ITISgroups',
        'ITIScodes',
        'LaneRoadway',
        'LargeNumbers',
        'MobileSituation',
        'MUTCDLocations',
        'NamedObjects',
        'Objects',
        'Obstruction',
        'ParkingInformation',
        'PavementConditions',
        'Precipitation',
        'Qualifiers',
        'RecreationalObjectsAndActivities',
        'RegulatoryAndWarningSigns',
        'ResponderGroupAffected',
        'RestrictionClass',
        'RoadsideAssets',
        'Roadwork',
        'SmallNumbers',
        'SpecialEvents',
        'SportingEvents',
        'StatesAndTerritories',
        'StreetSuffixes',
        'Structures',
        'SuggestionAdvice',
        'Temperature',
        'TrafficConditions',
        'TransitMode',
        'TransitOperations',
        'TravelerGroupAffected',
        'Units',
        'UnusualDriving',
        'ValidManeuvers',
        'VehicleGroupAffected',
        'VisibilityAndAirQuality',
        'WarningAdvice',
        'WeatherConditions',
        'Winds',
        'WinterDrivingIndex',
        'WinterDrivingRestrictions',
        'ITISEventType',
        'ITIScodesAndText',
        ]
    _type_ = [
        'AccidentsAndIncidents',
        'AlternateRoute',
        'AssetStatus',
        'Closures',
        'DelayStatusCancellation',
        'DeviceStatus',
        'Disasters',
        'Disturbances',
        'GenericLocations',
        'IncidentResponseEquipment',
        'IncidentResponseStatus',
        'SystemInformation',
        'AdviceInstructionsMandatory',
        'AdviceInstructionsRecommendations',
        'ITIStext',
        'ITISgroups',
        'ITIScodes',
        'LaneRoadway',
        'LargeNumbers',
        'MobileSituation',
        'MUTCDLocations',
        'NamedObjects',
        'Objects',
        'Obstruction',
        'ParkingInformation',
        'PavementConditions',
        'Precipitation',
        'Qualifiers',
        'RecreationalObjectsAndActivities',
        'RegulatoryAndWarningSigns',
        'ResponderGroupAffected',
        'RestrictionClass',
        'RoadsideAssets',
        'Roadwork',
        'SmallNumbers',
        'SpecialEvents',
        'SportingEvents',
        'StatesAndTerritories',
        'StreetSuffixes',
        'Structures',
        'SuggestionAdvice',
        'Temperature',
        'TrafficConditions',
        'TransitMode',
        'TransitOperations',
        'TravelerGroupAffected',
        'Units',
        'UnusualDriving',
        'ValidManeuvers',
        'VehicleGroupAffected',
        'VisibilityAndAirQuality',
        'WarningAdvice',
        'WeatherConditions',
        'Winds',
        'WinterDrivingIndex',
        'WinterDrivingRestrictions',
        'ITISEventType',
        'ITIScodesAndText',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< AccidentsAndIncidents >-----#
    AccidentsAndIncidents = INT(name='AccidentsAndIncidents', mode=MODE_TYPE)
    AccidentsAndIncidents._cont = ASN1Dict([('accident', 513), ('serious-accident', 514), ('injury-accident', 515), ('minor-accident', 516), ('multi-vehicle-accident', 517), ('numerous-accidents', 518), ('accident-involving-a-bicycle', 519), ('accident-involving-a-bus', 520), ('accident-involving-a-motorcycle', 521), ('accident-involving-a-pedestrian', 522), ('accident-involving-a-train', 523), ('accident-involving-a-truck', 524), ('accident-involving-a-semi-trailer', 562), ('accident-involving-hazardous-materials', 525), ('earlier-accident', 526), ('medical-emergency', 527), ('secondary-accident', 528), ('rescue-and-recovery-work-REMOVED', 529), ('accident-investigation-work', 530), ('incident', 531), ('stalled-vehicle', 532), ('abandoned-vehicle', 533), ('disabled-vehicle', 534), ('disabled-truck', 535), ('disabled-semi-trailer', 536), ('disabled-bus', 537), ('disabled-train', 538), ('vehicle-spun-out', 539), ('vehicle-on-fire', 540), ('vehicle-in-water', 541), ('vehicles-slowing-to-look-at-accident', 542), ('jackknifed-semi-trailer', 543), ('jackknifed-trailer-home', 544), ('jackknifed-trailer', 545), ('spillage-occurring-from-moving-vehicle', 546), ('acid-spill', 547), ('chemical-spill', 548), ('fuel-spill', 549), ('hazardous-materials-spill', 550), ('oil-spill', 551), ('spilled-load', 552), ('toxic-spill', 553), ('overturned-vehicle', 554), ('overturned-truck', 555), ('overturned-semi-trailer', 556), ('overturned-bus', 557), ('derailed-train', 558), ('stuck-vehicle', 559), ('truck-stuck-under-bridge', 560), ('bus-stuck-under-bridge', 561), ('accident-cleared', 638), ('incident-cleared', 639)])
    AccidentsAndIncidents._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< AlternateRoute >-----#
    AlternateRoute = INT(name='AlternateRoute', mode=MODE_TYPE)
    AlternateRoute._cont = ASN1Dict([('detour-where-possible', 8449), ('no-detour-available', 8450), ('follow-signs', 8451), ('follow-detour-signs', 8452), ('follow-special-detour-markers', 8453), ('do-not-follow-detour-signs', 8454), ('detour-in-operation', 8455), ('follow-local-detour', 8456), ('compulsory-detour-in-operation', 8457), ('no-suitable-detour-available', 8458), ('detour-is-no-longer-recommended', 8459), ('local-drivers-are-recommended-to-avoid-the-area', 8460), ('trucks-are-recommended-to-avoid-the-area', 8461), ('consider-alternate-route', 8462), ('consider-alternate-parking', 8463), ('consider-alternate-destination', 8464), ('consider-alternate-area', 8465), ('snow-route', 8466), ('emergency-snow-route', 8467), ('evacuation-route', 8468), ('truck-route', 8469), ('hazardous-materials-route', 8470), ('detour', 8471)])
    AlternateRoute._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< AssetStatus >-----#
    AssetStatus = INT(name='AssetStatus', mode=MODE_TYPE)
    AssetStatus._cont = ASN1Dict([('unknown-status', 10240), ('ready-for-use', 10241), ('working-normally', 10242), ('working-autonomously', 10243), ('working-incorrectly', 10244), ('not-working', 10245), ('normal-maintenance', 10246), ('in-route-to-use', 10247), ('returning-from-use', 10248), ('out-of-service', 10249), ('off-duty', 10250), ('on-patrol', 10251), ('on-call', 10252), ('on-break', 10253), ('mandatory-time-off', 10254), ('low-on-fuel', 10255), ('low-on-water', 10256), ('low-charge', 10257), ('missing', 10258)])
    AssetStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Closures >-----#
    Closures = INT(name='Closures', mode=MODE_TYPE)
    Closures._cont = ASN1Dict([('closed-to-traffic', 769), ('closed', 770), ('closed-ahead', 771), ('closed-intermittently', 772), ('closed-for-repairs', 773), ('closed-for-the-season', 774), ('blocked', 775), ('blocked-ahead', 776), ('reduced-to-one-lane', 777), ('reduced-to-two-lanes', 778), ('reduced-to-three-lanes', 779), ('collapse', 780), ('out', 781), ('open-to-traffic', 891), ('open', 892), ('reopened-to-traffic', 893), ('clearing', 894), ('cleared-from-road', 895)])
    Closures._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< DelayStatusCancellation >-----#
    DelayStatusCancellation = INT(name='DelayStatusCancellation', mode=MODE_TYPE)
    DelayStatusCancellation._cont = ASN1Dict([('delays', 1537), ('short-delays', 1538), ('long-delays', 1539), ('very-long-delays', 1540), ('delays-of-uncertain-duration', 1541), ('delayed-until-further-notice', 1542), ('busy', 1543), ('very-busy', 1544), ('crowded', 1545), ('overcrowded', 1546), ('cancellations', 1547), ('route-canceled-and-no-replacement', 1548), ('service-canceled', 1549), ('service-suspended', 1550), ('service-withdrawn', 1551), ('service-fully-booked', 1552), ('all-services-fully-booked', 1553), ('next-departure', 1554), ('next-arrival', 1555), ('very-frequent-service', 1556), ('frequent-service', 1557), ('fairly-frequent-service', 1558), ('regular-service', 1559), ('irregular-service', 1560), ('not-operating', 1561), ('system-busy', 1562), ('system-very-busy', 1563), ('system-crowded', 1564), ('system-overcrowded', 1565), ('deleted-travel-time', 1566), ('headway', 1567), ('extra-services-in-operation', 1568), ('delays-clearing', 1660), ('delays-cleared', 1661), ('normal-services-resumed', 1662), ('operating', 1663)])
    DelayStatusCancellation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< DeviceStatus >-----#
    DeviceStatus = INT(name='DeviceStatus', mode=MODE_TYPE)
    DeviceStatus._cont = ASN1Dict([('lane-control-signs-not-working', 2305), ('lane-control-signs-working-incorrectly', 2306), ('lane-control-signs-operating', 2307), ('variable-message-signs-not-working', 2308), ('variable-message-signs-working-incorrectly', 2309), ('variable-message-signs-operating', 2310), ('emergency-telephones-not-working', 2311), ('emergency-telephone-number-not-working', 2312), ('traffic-lights-not-working', 2313), ('traffic-lights-working-incorrectly', 2314), ('ramp-control-signals-not-working', 2315), ('ramp-control-signals-working-incorrectly', 2316), ('temporary-traffic-lights-not-working', 2317), ('temporary-traffic-lights-working-incorrectly', 2318), ('traffic-signal-control-computer-not-working', 2319), ('traffic-signal-timings-changed', 2320), ('overheight-warning-system-triggered', 2321), ('equipment-failure', 2322), ('railroad-crossing-equipment-failure', 2323), ('tunnel-ventilation-not-working', 2324), ('power-failure', 2325), ('widespread-power-outages', 2326), ('technical-problems', 2327), ('sign-down', 2328), ('lines-in-road-faded', 2329), ('damaged-light-standard', 2330), ('traffic-signal-stuck-on-flash', 2331), ('guide-rail', 2332), ('fencing', 2333), ('light-standard-hanging-by-wires', 2334), ('call-box', 2335), ('signal-cabinet', 2336), ('detector', 2337), ('improper-use-of-State-vehicle-or-equipment', 2338), ('bulb-out', 2339), ('not-yet-operational', 2340), ('not-yet-installed', 2341), ('electronic-signs-repaired', 2428), ('emergency-call-facilities-restored', 2429), ('traffic-signals-repaired', 2430), ('railroad-crossing-equipment-now-working-normally', 2431)])
    DeviceStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Disasters >-----#
    Disasters = INT(name='Disasters', mode=MODE_TYPE)
    Disasters._cont = ASN1Dict([('flash-flood', 3073), ('major-flood', 3074), ('reservoir-failure', 3075), ('levee-failure', 3076), ('tsunami', 3077), ('tidal-wave', 3078), ('volcanic-eruption', 3079), ('ash-fall', 3080), ('lava-flow', 3081), ('serious-fire', 3082), ('forest-fire', 3083), ('wildfire', 3084), ('building-fire', 3085), ('brush-fire', 3086), ('grass-fire', 3087), ('fire-danger-extreme', 3088), ('fire-danger-very-high', 3089), ('fire-danger-high', 3090), ('fire-danger-medium', 3091), ('fire-danger-low', 3092), ('earthquake-damage', 3093), ('air-crash', 3094), ('rail-crash', 3095), ('toxic-release', 3096), ('toxic-leak', 3097), ('radioactive-release', 3098), ('radiation-hazard', 3099), ('reactor-leakage', 3100), ('explosion', 3101), ('major-hazardous-materials-fire', 3102), ('major-hazardous-materials-release', 3103), ('disaster-cleared', 3199)])
    Disasters._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Disturbances >-----#
    Disturbances = INT(name='Disturbances', mode=MODE_TYPE)
    Disturbances._cont = ASN1Dict([('assault', 3329), ('crime', 3330), ('robbery', 3331), ('fare-dispute', 3332), ('shooting', 3333), ('gunfire-on-roadway', 3334), ('suicide', 3335), ('fight', 3336), ('gang-fight', 3337), ('person-harassment', 3338), ('person-injured', 3339), ('sick-customer', 3363), ('unruly-passenger', 3340), ('person-intoxicated', 3341), ('crowd-control-problem', 3342), ('demonstration', 3343), ('march', 3344), ('public-disturbance', 3345), ('riot', 3346), ('civil-unrest', 3347), ('civil-emergency', 3348), ('strike', 3349), ('public-transit-strike', 3350), ('stampede', 3351), ('teargas-used', 3352), ('security-alert', 3353), ('security-incident', 3354), ('checkpoint', 3355), ('bomb-alert', 3356), ('terrorist-incident', 3357), ('high-velocity-shell-fire', 3358), ('explosives-in-use', 3359), ('air-raid', 3360), ('weapons-of-mass-destruction-threat', 3361), ('military-operations', 3362), ('security-problem-cleared', 3454), ('traffic-disturbance-cleared', 3455)])
    Disturbances._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< GenericLocations >-----#
    GenericLocations = INT(name='GenericLocations', mode=MODE_TYPE)
    GenericLocations._cont = ASN1Dict([('on-bridges', 7937), ('in-tunnels', 7938), ('entering-or-leaving-tunnels', 7939), ('on-ramps', 7940), ('in-road-construction-area', 7941), ('around-a-curve', 7942), ('on-curve', 8026), ('on-tracks', 8009), ('in-street', 8025), ('shoulder', 8027), ('on-minor-roads', 7943), ('in-the-opposing-lanes', 7944), ('adjacent-to-roadway', 7945), ('across-tracks', 8024), ('on-bend', 7946), ('intersection', 8032), ('entire-intersection', 7947), ('in-the-median', 7948), ('moved-to-side-of-road', 7949), ('moved-to-shoulder', 7950), ('on-the-roadway', 7951), ('dip', 8010), ('traffic-circle', 8011), ('crossover', 8028), ('cross-road', 8029), ('side-road', 8030), ('to', 8014), ('by', 8015), ('through', 8016), ('area-of', 8017), ('under', 8018), ('over', 8019), ('from', 8020), ('approaching', 8021), ('entering-at', 8022), ('exiting-at', 8023), ('in-shaded-areas', 7952), ('in-low-lying-areas', 7953), ('in-the-downtown-area', 7954), ('in-the-inner-city-area', 7955), ('in-parts', 7956), ('in-some-places', 7957), ('in-the-ditch', 7958), ('in-the-valley', 7959), ('on-hill-top', 7960), ('near-the-foothills', 7961), ('at-high-altitudes', 7962), ('near-the-lake', 7963), ('near-the-shore', 7964), ('nearby-basin', 8008), ('over-the-crest-of-a-hill', 7965), ('other-than-on-the-roadway', 7966), ('near-the-beach', 7967), ('near-beach-access-point', 7968), ('mountain-pass', 8006), ('lower-level', 7969), ('upper-level', 7970), ('coast', 8034), ('airport', 7971), ('concourse', 7972), ('gate', 7973), ('baggage-claim', 7974), ('customs-point', 7975), ('reservation-center', 8007), ('station', 7976), ('platform', 7977), ('dock', 7978), ('depot', 7979), ('ev-charging-point', 7980), ('information-welcome-point', 7981), ('at-rest-area', 7982), ('at-service-area', 7983), ('at-weigh-station', 7984), ('roadside-park', 8033), ('picnic-areas', 7985), ('rest-area', 7986), ('service-stations', 7987), ('toilets', 7988), ('bus-stop', 8031), ('park-and-ride-lot', 8012), ('on-the-right', 7989), ('on-the-left', 7990), ('in-the-center', 7991), ('in-the-opposite-direction', 7992), ('cross-traffic', 7993), ('northbound-traffic', 7994), ('eastbound-traffic', 7995), ('southbound-traffic', 7996), ('westbound-traffic', 7997), ('north', 7998), ('south', 7999), ('east', 8000), ('west', 8001), ('northeast', 8002), ('northwest', 8003), ('southeast', 8004), ('southwest', 8005)])
    GenericLocations._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< IncidentResponseEquipment >-----#
    IncidentResponseEquipment = INT(name='IncidentResponseEquipment', mode=MODE_TYPE)
    IncidentResponseEquipment._cont = ASN1Dict([('ground-fire-suppression', 9985), ('heavy-ground-equipment', 9986), ('aircraft', 9988), ('marine-equipment', 9989), ('support-equipment', 9990), ('medical-rescue-unit', 9991), ('other', 9993), ('ground-fire-suppression-other', 9994), ('engine', 9995), ('truck-or-aerial', 9996), ('quint', 9997), ('tanker-pumper-combination', 9998), ('brush-truck', 10000), ('aircraft-rescue-firefighting', 10001), ('heavy-ground-equipment-other', 10004), ('dozer-or-plow', 10005), ('tractor', 10006), ('tanker-or-tender', 10008), ('aircraft-other', 10024), ('aircraft-fixed-wing-tanker', 10025), ('helitanker', 10026), ('helicopter', 10027), ('marine-equipment-other', 10034), ('fire-boat-with-pump', 10035), ('boat-no-pump', 10036), ('support-apparatus-other', 10044), ('breathing-apparatus-support', 10045), ('light-and-air-unit', 10046), ('medical-rescue-unit-other', 10054), ('rescue-unit', 10055), ('urban-search-rescue-unit', 10056), ('high-angle-rescue', 10057), ('crash-fire-rescue', 10058), ('bLS-unit', 10059), ('aLS-unit', 10060), ('mobile-command-post', 10075), ('chief-officer-car', 10076), ('hAZMAT-unit', 10077), ('type-i-hand-crew', 10078), ('type-ii-hand-crew', 10079), ('privately-owned-vehicle', 10083), ('other-apparatus-resource', 10084), ('ambulance', 10085), ('bomb-squad-van', 10086), ('combine-harvester', 10087), ('construction-vehicle', 10088), ('farm-tractor', 10089), ('grass-cutting-machines', 10090), ('hAZMAT-containment-tow', 10091), ('heavy-tow', 10092), ('light-tow', 10094), ('flatbed-tow', 10114), ('hedge-cutting-machines', 10093), ('mobile-crane', 10095), ('refuse-collection-vehicle', 10096), ('resurfacing-vehicle', 10097), ('road-sweeper', 10098), ('survey-crews', 10115), ('roadside-litter-collection-crews', 10099), ('salvage-vehicle', 10100), ('sand-truck', 10101), ('snowplow', 10102), ('steam-roller', 10103), ('swat-team-van', 10104), ('track-laying-vehicle', 10105), ('unknown-vehicle', 10106), ('white-lining-vehicle', 10107), ('dump-truck', 10108), ('supervisor-vehicle', 10109), ('snow-blower', 10110), ('rotary-snow-blower', 10111), ('road-grader', 10112), ('steam-truck', 10113)])
    IncidentResponseEquipment._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< IncidentResponseStatus >-----#
    IncidentResponseStatus = INT(name='IncidentResponseStatus', mode=MODE_TYPE)
    IncidentResponseStatus._cont = ASN1Dict([('unconfirmed-report', 2817), ('initial-response-en-route', 2818), ('follow-up-response-en-route', 2819), ('initial-response-on-scene', 2820), ('follow-up-response-on-scene', 2821), ('confirmed-report', 2822), ('scene-is-unsecured-at-this-time', 2823), ('response-scene-secured', 2824), ('rescue-and-recovery-work-in-progress', 2825), ('extraction-in-progress', 2826), ('clearance-work-in-progress', 2827), ('body-removal-operations', 2828), ('fire-containment-contained', 2829), ('fire-containment-not-contained', 2830), ('event-cleared', 2831), ('traffic-clearing', 2832), ('incident-closed', 2833)])
    IncidentResponseStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< SystemInformation >-----#
    SystemInformation = INT(name='SystemInformation', mode=MODE_TYPE)
    SystemInformation._cont = ASN1Dict([('information-available-on-radio', 4353), ('information-available-on-TV', 4354), ('call-to-get-information', 4355), ('information-available-via-Internet', 4356), ('test-message', 4357), ('no-information-available', 4358), ('null-description', 4359), ('police-assistance', 4361), ('police-monitor-CB', 4362), ('emergency-notification', 4363), ('in-emergency-dial-911', 4364), ('travel-Info-call-511', 4365), ('car-pool-information', 4366), ('information-service-resumed', 4478), ('information-service-is-being-suspended', 4360), ('message-canceled', 4479)])
    SystemInformation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< AdviceInstructionsMandatory >-----#
    AdviceInstructionsMandatory = INT(name='AdviceInstructionsMandatory', mode=MODE_TYPE)
    AdviceInstructionsMandatory._cont = ASN1Dict([('keep-to-the-right', 7425), ('keep-to-the-left', 7426), ('use-right-lane', 7427), ('use-left-lane', 7428), ('stay-in-lane', 7450), ('merge', 7451), ('heavy-vehicles-use-right-lane', 7429), ('heavy-vehicles-use-left-lane', 7430), ('observe-signals', 7431), ('observe-signs', 7432), ('no-passing', 7433), ('no-smoking', 7434), ('no-open-flames', 7435), ('use-shoulder-as-lane', 7436), ('do-not-drive-on-the-shoulder', 7437), ('allow-emergency-vehicles-to-pass', 7438), ('clear-a-lane-for-emergency-vehicles', 7439), ('pull-over-to-the-edge-of-the-roadway', 7440), ('wait-for-escort-vehicle', 7441), ('in-emergency-wait-for-police-patrol', 7442), ('reduce-your-speed', 7443), ('observe-speed-limits', 7444), ('check-point', 7445), ('entry-requirements', 7446), ('insurance-requirements', 7447), ('firearms-requirements', 7448), ('pet-requirements', 7449), ('slower-traffic-keep-right', 7452), ('keep-off', 7453), ('evacuate-area-immediately', 7454), ('shoulder-travel-no-longer-allowed', 7547)])
    AdviceInstructionsMandatory._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< AdviceInstructionsRecommendations >-----#
    AdviceInstructionsRecommendations = INT(name='AdviceInstructionsRecommendations', mode=MODE_TYPE)
    AdviceInstructionsRecommendations._cont = ASN1Dict([('drive-carefully', 7169), ('drive-with-extreme-caution', 7170), ('approach-with-care', 7171), ('keep-your-distance', 7172), ('increase-normal-following-distance', 7173), ('test-your-brakes', 7174), ('cross-intersection-with-care', 7175), ('pass-with-care', 7176), ('pass', 7200), ('use-low-beam-headlights', 7177), ('use-fog-lights', 7178), ('use-hazard-warning-lights', 7179), ('do-not-leave-your-vehicle', 7180), ('leave-your-vehicle-and-proceed-to-next-safe-place', 7181), ('turn-off-engine', 7182), ('close-all-windows-turn-off-heater-air-conditioner-and-vents', 7183), ('turn-off-air-conditioner-to-prevent-engine-overheating', 7184), ('turn-off-mobile-phones-and-two-way-radios', 7185), ('prepare-to-stop', 7186), ('be-prepared-to-stop', 7201), ('stop-at-next-rest-area', 7187), ('stop-at-next-safe-place', 7188), ('only-travel-if-absolutely-necessary', 7189), ('drive-to-another-service-area', 7190), ('use-through-traffic-lanes', 7191), ('use-local-traffic-lanes', 7192), ('use-left-hand-parallel-roadway', 7193), ('use-right-hand-parallel-roadway', 7194), ('use-heavy-vehicle-lane', 7195), ('observe-recommended-speed', 7196), ('signals-sequenced-for-speed', 7202), ('maintain-top-safe-speed', 7203), ('facing-traffic', 7197), ('push-button', 7198), ('to-cross-street', 7199), ('evacuate-area-voluntarily', 7204), ('shelter-in-place', 7205)])
    AdviceInstructionsRecommendations._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ITIStext >-----#
    ITIStext = STR_IA5(name='ITIStext', mode=MODE_TYPE)
    ITIStext._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=500)], ev=None, er=[])
    
    #-----< ITISgroups >-----#
    ITISgroups = INT(name='ITISgroups', mode=MODE_TYPE)
    ITISgroups._cont = ASN1Dict([('trafficConditions', 1), ('accidentsAndIncidents', 2), ('closures', 3), ('roadwork', 4), ('obstruction', 5), ('delayStatusCancellation', 6), ('unusualDriving', 7), ('mobileSituation', 8), ('deviceStatus', 9), ('restrictionClass', 10), ('incidentResponseStatus', 11), ('disasters', 12), ('disturbances', 13), ('sportingEvents', 14), ('specialEvents', 15), ('parkingInformation', 16), ('systemInformation', 17), ('weatherConditions', 18), ('precipitation', 19), ('winds', 20), ('visibilityAndAirQuality', 21), ('temperature', 22), ('pavementConditions', 23), ('winterDrivingRestrictions', 24), ('winterDrivingIndex', 25), ('suggestionAdvice', 26), ('warningAdvice', 27), ('adviceInstructionsRecommendations', 28), ('adviceInstructionsMandatory', 29), ('qualifiers', 30), ('genericLocations', 31), ('laneRoadway', 32), ('alternateRoute', 33), ('units', 34), ('transitMode', 35), ('vehicleGroupAffected', 36), ('travelerGroupAffected', 37), ('responderGroupAffected', 38), ('incidentResponseEquipment', 39), ('assetStatus', 40), ('roadsideAssets', 41), ('transitOperations', 42), ('objects', 43), ('validManeuvers', 44), ('largeNumbers', 45), ('namedObjects', 46), ('recreationalObjectsAndActivities', 47), ('regulatoryAndWarningSigns', 48), ('smallNumbers', 49), ('states', 50), ('structures', 51), ('streetSuffixes', 52), ('mUTCDLocations', 53)])
    ITISgroups._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ITIScodes >-----#
    ITIScodes = INT(name='ITIScodes', mode=MODE_TYPE)
    ITIScodes._cont = ASN1Dict([('stopped-traffic', 257), ('stop-and-go-traffic', 258), ('slow-traffic', 259), ('heavy-traffic', 260), ('traffic-building', 261), ('long-queues', 262), ('traffic-congestion', 263), ('traffic-lighter-than-normal', 264), ('traffic-heavier-than-normal', 265), ('traffic-much-heavier-than-normal', 266), ('current-speed', 267), ('speed-limit', 268), ('travel-time', 269), ('merging-traffic', 272), ('contraflow', 273), ('contraflow-canceled', 378), ('traffic-flowing-freely', 379), ('traffic-easing', 380), ('traffic-returned-to-normal', 381), ('no-problems-to-report', 382), ('traffic-congestion-cleared', 383), ('accident', 513), ('serious-accident', 514), ('injury-accident', 515), ('minor-accident', 516), ('multi-vehicle-accident', 517), ('numerous-accidents', 518), ('accident-involving-a-bicycle', 519), ('accident-involving-a-bus', 520), ('accident-involving-a-motorcycle', 521), ('accident-involving-a-pedestrian', 522), ('accident-involving-a-train', 523), ('accident-involving-a-truck', 524), ('accident-involving-a-semi-trailer', 562), ('accident-involving-hazardous-materials', 525), ('earlier-accident', 526), ('medical-emergency', 527), ('secondary-accident', 528), ('rescue-and-recovery-work-REMOVED', 529), ('accident-investigation-work', 530), ('incident', 531), ('stalled-vehicle', 532), ('abandoned-vehicle', 533), ('disabled-vehicle', 534), ('disabled-truck', 535), ('disabled-semi-trailer', 536), ('disabled-bus', 537), ('disabled-train', 538), ('vehicle-spun-out', 539), ('vehicle-on-fire', 540), ('vehicle-in-water', 541), ('vehicles-slowing-to-look-at-accident', 542), ('jackknifed-semi-trailer', 543), ('jackknifed-trailer-home', 544), ('jackknifed-trailer', 545), ('spillage-occurring-from-moving-vehicle', 546), ('acid-spill', 547), ('chemical-spill', 548), ('fuel-spill', 549), ('hazardous-materials-spill', 550), ('oil-spill', 551), ('spilled-load', 552), ('toxic-spill', 553), ('overturned-vehicle', 554), ('overturned-truck', 555), ('overturned-semi-trailer', 556), ('overturned-bus', 557), ('derailed-train', 558), ('stuck-vehicle', 559), ('truck-stuck-under-bridge', 560), ('bus-stuck-under-bridge', 561), ('accident-cleared', 638), ('incident-cleared', 639), ('closed-to-traffic', 769), ('closed', 770), ('closed-ahead', 771), ('closed-intermittently', 772), ('closed-for-repairs', 773), ('closed-for-the-season', 774), ('blocked', 775), ('blocked-ahead', 776), ('reduced-to-one-lane', 777), ('reduced-to-two-lanes', 778), ('reduced-to-three-lanes', 779), ('collapse', 780), ('out', 781), ('open-to-traffic', 891), ('open', 892), ('reopened-to-traffic', 893), ('clearing', 894), ('cleared-from-road', 895), ('road-construction', 1025), ('major-road-construction', 1026), ('long-term-road-construction', 1027), ('construction-work', 1028), ('paving-operations', 1029), ('work-in-the-median', 1030), ('road-reconstruction', 1031), ('opposing-traffic', 1032), ('narrow-lanes', 1033), ('construction-traffic-merging', 1034), ('single-line-traffic-alternating-directions', 1035), ('road-maintenance-operations', 1036), ('road-marking-operations', 1037), ('road-widening', 1061), ('cracks', 1052), ('crack-REMOVE', 1058), ('bumps', 1053), ('drop-off', 1059), ('storm-drain', 1054), ('bridge-maintenance-operations', 1038), ('bridge-construction', 1039), ('bridge-demolition-work', 1040), ('seismic-retrofit', 1060), ('overgrown-grass', 1055), ('overgrown-brushshrubs', 1056), ('overgrown-trees', 1057), ('blasting', 1041), ('avalanche-control-activities', 1042), ('water-main-work', 1043), ('gas-main-work', 1044), ('work-on-underground-cables', 1045), ('work-on-underground-services', 1046), ('new-road-construction-layout', 1047), ('new-road-layout', 1048), ('temporary-lane-markings', 1049), ('temporary-traffic-lights', 1050), ('emergency-maintenance', 1051), ('utility-work', 1062), ('road-maintenance-cleared', 1146), ('normal-road-layout-restored', 1147), ('road-work-clearance-in-progress', 1148), ('road-construction-cleared', 1149), ('normal-traffic-lanes-restored', 1150), ('road-work-cleared', 1151), ('obstruction-on-roadway', 1281), ('object-on-roadway', 1282), ('objects-falling-from-moving-vehicle', 1283), ('debris-on-roadway', 1284), ('storm-damage', 1285), ('people-on-roadway', 1286), ('bicyclists-on-roadway', 1287), ('sightseers-obstructing-access', 1288), ('large-numbers-of-visitors', 1289), ('animal-on-roadway', 1290), ('large-animal-on-roadway', 1291), ('herd-of-animals-on-roadway', 1292), ('animal-struck', 1293), ('advertising-signs', 1315), ('fallen-trees', 1294), ('over-turned-trees', 1311), ('tree-limbs', 1312), ('utility-pole-down', 1314), ('downed-power-lines', 1295), ('downed-cables', 1296), ('subsidence', 1297), ('road-surface-collapse', 1298), ('frost-jacking', 1317), ('frost-heave', 1316), ('pavement-buckled', 1299), ('pothole', 1300), ('flooding', 1301), ('broken-water-main', 1302), ('collapsed-sewer', 1303), ('wash-out', 1319), ('washboard', 1318), ('sewer-overflow', 1304), ('gas-leak', 1305), ('snowmelt', 1306), ('mudslide', 1307), ('avalanche', 1308), ('rockfall', 1309), ('landslide', 1310), ('clearance-work', 1406), ('obstruction-cleared', 1407), ('delays', 1537), ('short-delays', 1538), ('long-delays', 1539), ('very-long-delays', 1540), ('delays-of-uncertain-duration', 1541), ('delayed-until-further-notice', 1542), ('busy', 1543), ('very-busy', 1544), ('crowded', 1545), ('overcrowded', 1546), ('cancellations', 1547), ('route-canceled-and-no-replacement', 1548), ('service-canceled', 1549), ('service-suspended', 1550), ('service-withdrawn', 1551), ('service-fully-booked', 1552), ('all-services-fully-booked', 1553), ('next-departure', 1554), ('next-arrival', 1555), ('very-frequent-service', 1556), ('frequent-service', 1557), ('fairly-frequent-service', 1558), ('regular-service', 1559), ('irregular-service', 1560), ('not-operating', 1561), ('system-busy', 1562), ('system-very-busy', 1563), ('system-crowded', 1564), ('system-overcrowded', 1565), ('deleted-travel-time', 1566), ('headway', 1567), ('extra-services-in-operation', 1568), ('delays-clearing', 1660), ('delays-cleared', 1661), ('normal-services-resumed', 1662), ('operating', 1663), ('vehicle-traveling-wrong-way', 1793), ('reckless-driver', 1794), ('prohibited-vehicle-on-roadway', 1795), ('emergency-vehicles-on-roadway', 1796), ('high-speed-emergency-vehicles', 1797), ('high-speed-chase', 1798), ('dangerous-vehicle-warning-cleared', 1918), ('emergency-vehicle-warning-cleared', 1919), ('abnormal-load', 2049), ('wide-load', 2050), ('long-load', 2051), ('slow-vehicle', 2052), ('farm-equipment', 2053), ('horse-drawn-vehicles', 2054), ('overheight-load', 2055), ('overweight-load', 2056), ('tracked-vehicle', 2057), ('vehicle-carrying-hazardous-materials', 2058), ('slow-moving-maintenance-vehicle', 2059), ('convoy', 2060), ('military-convoy', 2061), ('refugee-convoy', 2062), ('motorcade', 2063), ('mobile-situation-repositioning', 2064), ('winter-maintenance-vehicles', 2065), ('snowplows', 2066), ('slow-moving-maintenance-vehicle-warning-cleared', 2172), ('exceptional-load-warning-cleared', 2173), ('hazardous-load-warning-cleared', 2174), ('convoy-cleared', 2175), ('lane-control-signs-not-working', 2305), ('lane-control-signs-working-incorrectly', 2306), ('lane-control-signs-operating', 2307), ('variable-message-signs-not-working', 2308), ('variable-message-signs-working-incorrectly', 2309), ('variable-message-signs-operating', 2310), ('emergency-telephones-not-working', 2311), ('emergency-telephone-number-not-working', 2312), ('traffic-lights-not-working', 2313), ('traffic-lights-working-incorrectly', 2314), ('ramp-control-signals-not-working', 2315), ('ramp-control-signals-working-incorrectly', 2316), ('temporary-traffic-lights-not-working', 2317), ('temporary-traffic-lights-working-incorrectly', 2318), ('traffic-signal-control-computer-not-working', 2319), ('traffic-signal-timings-changed', 2320), ('overheight-warning-system-triggered', 2321), ('equipment-failure', 2322), ('railroad-crossing-equipment-failure', 2323), ('tunnel-ventilation-not-working', 2324), ('power-failure', 2325), ('widespread-power-outages', 2326), ('technical-problems', 2327), ('sign-down', 2328), ('lines-in-road-faded', 2329), ('damaged-light-standard', 2330), ('traffic-signal-stuck-on-flash', 2331), ('guide-rail', 2332), ('fencing', 2333), ('light-standard-hanging-by-wires', 2334), ('call-box', 2335), ('signal-cabinet', 2336), ('detector', 2337), ('improper-use-of-State-vehicle-or-equipment', 2338), ('bulb-out', 2339), ('not-yet-operational', 2340), ('not-yet-installed', 2341), ('electronic-signs-repaired', 2428), ('emergency-call-facilities-restored', 2429), ('traffic-signals-repaired', 2430), ('railroad-crossing-equipment-now-working-normally', 2431), ('restrictions', 2561), ('ramp-restrictions', 2562), ('truck-restriction', 2563), ('speed-restriction', 2564), ('noise-restriction', 2565), ('traffic-regulations-have-been-changed', 2566), ('local-access-only', 2567), ('no-trailers', 2568), ('no-high-profile-vehicles', 2569), ('hazardous-materials-truck-restriction', 2570), ('no-through-traffic', 2571), ('no-motor-vehicles', 2572), ('width-limit', 2573), ('height-limit', 2574), ('length-limit', 2575), ('axle-load-limit', 2576), ('gross-weight-limit', 2577), ('axle-count-limit', 2578), ('carpool-lane-available', 2579), ('carpool-restrictions-changed', 2580), ('hOV-2-no-single-occupant-vehicles', 2581), ('hOV-3-no-vehicles-with-less-than-three-occupants', 2582), ('bus-lane-available-for-all-vehicles', 2583), ('truck-lane-available-for-all-vehicles', 2584), ('permits-call-in-basis', 2585), ('permits-temporarily-closed', 2586), ('permits-closed', 2587), ('road-use-permits-required', 2588), ('permits-open', 2675), ('restrictions-for-high-profile-vehicles-lifted', 2676), ('width-limit-lifted', 2677), ('height-limit-lifted', 2678), ('length-limit-lifted', 2679), ('axle-load-limit-lifted', 2680), ('weight-limit-lifted', 2681), ('axle-count-limit-lifted', 2682), ('carpool-restrictions-lifted', 2683), ('lane-restrictions-lifted', 2684), ('ramp-restrictions-lifted', 2685), ('motor-vehicle-restrictions-lifted', 2686), ('restrictions-lifted', 2687), ('unconfirmed-report', 2817), ('initial-response-en-route', 2818), ('follow-up-response-en-route', 2819), ('initial-response-on-scene', 2820), ('follow-up-response-on-scene', 2821), ('confirmed-report', 2822), ('scene-is-unsecured-at-this-time', 2823), ('response-scene-secured', 2824), ('rescue-and-recovery-work-in-progress', 2825), ('extraction-in-progress', 2826), ('clearance-work-in-progress', 2827), ('body-removal-operations', 2828), ('fire-containment-contained', 2829), ('fire-containment-not-contained', 2830), ('event-cleared', 2831), ('traffic-clearing', 2832), ('incident-closed', 2833), ('flash-flood', 3073), ('major-flood', 3074), ('reservoir-failure', 3075), ('levee-failure', 3076), ('tsunami', 3077), ('tidal-wave', 3078), ('volcanic-eruption', 3079), ('ash-fall', 3080), ('lava-flow', 3081), ('serious-fire', 3082), ('forest-fire', 3083), ('wildfire', 3084), ('building-fire', 3085), ('brush-fire', 3086), ('grass-fire', 3087), ('fire-danger-extreme', 3088), ('fire-danger-very-high', 3089), ('fire-danger-high', 3090), ('fire-danger-medium', 3091), ('fire-danger-low', 3092), ('earthquake-damage', 3093), ('air-crash', 3094), ('rail-crash', 3095), ('toxic-release', 3096), ('toxic-leak', 3097), ('radioactive-release', 3098), ('radiation-hazard', 3099), ('reactor-leakage', 3100), ('explosion', 3101), ('major-hazardous-materials-fire', 3102), ('major-hazardous-materials-release', 3103), ('disaster-cleared', 3199), ('assault', 3329), ('crime', 3330), ('robbery', 3331), ('fare-dispute', 3332), ('shooting', 3333), ('gunfire-on-roadway', 3334), ('suicide', 3335), ('fight', 3336), ('gang-fight', 3337), ('person-harassment', 3338), ('person-injured', 3339), ('sick-customer', 3363), ('unruly-passenger', 3340), ('person-intoxicated', 3341), ('crowd-control-problem', 3342), ('demonstration', 3343), ('march', 3344), ('public-disturbance', 3345), ('riot', 3346), ('civil-unrest', 3347), ('civil-emergency', 3348), ('strike', 3349), ('public-transit-strike', 3350), ('stampede', 3351), ('teargas-used', 3352), ('security-alert', 3353), ('security-incident', 3354), ('checkpoint', 3355), ('bomb-alert', 3356), ('terrorist-incident', 3357), ('high-velocity-shell-fire', 3358), ('explosives-in-use', 3359), ('air-raid', 3360), ('weapons-of-mass-destruction-threat', 3361), ('military-operations', 3362), ('security-problem-cleared', 3454), ('traffic-disturbance-cleared', 3455), ('sports-event', 3585), ('game', 3586), ('tournament', 3587), ('track-and-field-event', 3588), ('baseball-game', 3589), ('basketball-game', 3590), ('boxing-match', 3591), ('football-game', 3592), ('soccer-game', 3593), ('golf-tournament', 3594), ('hockey-game', 3595), ('tennis-tournament', 3596), ('wrestling-match', 3597), ('road-race', 3598), ('automobile-race', 3599), ('bicycle-race', 3600), ('race-event', 3601), ('marathon', 3602), ('horse-show', 3603), ('rodeo', 3604), ('water-sports-event', 3605), ('winter-sports-event', 3606), ('skating-event', 3607), ('dog-sled-race', 3608), ('sporting-event-ended', 3711), ('major-event', 3841), ('airshow', 3842), ('hot-air-ballooning', 3843), ('concert', 3844), ('state-occasion', 3845), ('vIP-visit', 3846), ('show', 3847), ('festival', 3848), ('exhibition', 3849), ('performing-arts', 3850), ('outdoor-market', 3851), ('fair', 3852), ('carnival', 3853), ('fireworks-display', 3854), ('trade-expo', 3855), ('movie-filming', 3856), ('presidential-visit', 3857), ('parade', 3858), ('procession', 3859), ('funeral-procession', 3860), ('crowd', 3861), ('holiday-traffic-crowds', 3862), ('event-ended', 3967), ('normal-parking-restrictions-lifted', 4097), ('parking-meter-restrictions-lifted', 4098), ('special-parking-restrictions-in-force', 4099), ('full-parking-lot', 4100), ('full-parking-garage', 4101), ('all-parking-lots-full', 4102), ('no-parking-spaces-available', 4103), ('only-a-few-spaces-available', 4104), ('spaces-available', 4105), ('no-parking', 4106), ('parking-on-one-side-of-street-only', 4107), ('parking-on-both-sides-of-street', 4108), ('parallel-parking-only', 4109), ('parking-meters-not-available', 4110), ('use-of-parking-meters-restricted', 4111), ('event-parking', 4112), ('handicapped-parking', 4113), ('long-term-parking', 4114), ('overnight-parking', 4115), ('short-term-parking', 4116), ('parking-by-permit-only', 4117), ('emergency-parking-only', 4118), ('emergency-stopping-only', 4119), ('parking', 4120), ('stopping', 4121), ('standing', 4122), ('tow-away-zone', 4123), ('school-zone', 4124), ('speed-zone', 4125), ('loading-zone', 4126), ('state-law', 4127), ('van-accessible', 4128), ('special-parking-restrictions-lifted', 4222), ('no-parking-information-available', 4223), ('information-available-on-radio', 4353), ('information-available-on-TV', 4354), ('call-to-get-information', 4355), ('information-available-via-Internet', 4356), ('test-message', 4357), ('no-information-available', 4358), ('null-description', 4359), ('police-assistance', 4361), ('police-monitor-CB', 4362), ('emergency-notification', 4363), ('in-emergency-dial-911', 4364), ('travel-Info-call-511', 4365), ('car-pool-information', 4366), ('information-service-resumed', 4478), ('information-service-is-being-suspended', 4360), ('message-canceled', 4479), ('overcast', 4609), ('cloudy', 4610), ('mostly-cloudy', 4611), ('partly-cloudy', 4612), ('partly-sunny', 4613), ('mostly-sunny', 4614), ('sunny', 4615), ('fair-skies', 4616), ('clear-skies', 4617), ('mostly-clear', 4618), ('mostly-dry', 4619), ('dry', 4620), ('uV-index-very-high', 4621), ('uV-index-high', 4622), ('uV-index-moderate', 4623), ('uV-index-low', 4624), ('uV-index-very-low', 4625), ('barometric-pressure', 4626), ('ozone-alert', 4627), ('lighting-unknown', 4628), ('artificial-exterior-light', 4629), ('artificial-interior-light', 4630), ('darkness', 4631), ('dusk', 4632), ('dawn', 4633), ('moonlight', 4634), ('daylight', 4635), ('weather-forecast-withdrawn', 4735), ('severe-weather', 4865), ('blizzard', 4866), ('heavy-snow', 4867), ('snow', 4868), ('light-snow', 4869), ('snow-showers', 4870), ('winter-storm', 4871), ('ice-glaze', 4872), ('heavy-frost', 4873), ('frost', 4874), ('ice-storm', 4875), ('sleet', 4876), ('rain-and-snow-mixed', 4877), ('rain-changing-to-snow', 4878), ('damaging-hail', 4879), ('hail', 4880), ('thunderstorms', 4881), ('thundershowers', 4882), ('extremely-heavy-downpour', 4883), ('heavy-rain', 4884), ('rain', 4885), ('light-rain', 4886), ('drizzle', 4887), ('showers', 4888), ('dew', 4889), ('precipitation-cleared', 4991), ('tornado', 5121), ('hurricane', 5122), ('hurricane-force-winds', 5123), ('tropical-storm', 5124), ('gale-force-winds', 5125), ('storm-force-winds', 5126), ('strong-winds', 5127), ('moderate-winds', 5128), ('light-winds', 5129), ('calm', 5130), ('gusty-winds', 5131), ('crosswinds', 5132), ('windy', 5133), ('strong-winds-have-eased', 5246), ('strong-wind-forecast-withdrawn', 5247), ('dense-fog', 5377), ('fog', 5378), ('patchy-fog', 5379), ('freezing-fog', 5380), ('ice-fog', 5405), ('mist', 5381), ('haze', 5382), ('visibility-reduced', 5383), ('visibility-blocked', 5404), ('white-out', 5384), ('blowing-snow', 5385), ('smoke-hazard', 5386), ('spray-hazard', 5387), ('low-sun-glare', 5388), ('snow-glare', 5389), ('blowing-dust', 5390), ('blowing-sand', 5391), ('dust-storms', 5392), ('sandstorms', 5393), ('air-quality-good', 5394), ('air-quality-fair', 5395), ('air-quality-poor', 5396), ('air-quality-very-poor', 5397), ('severe-exhaust-pollution', 5398), ('smog-alert', 5399), ('pollen-count-high', 5400), ('pollen-count-medium', 5401), ('pollen-count-low', 5402), ('swarms-of-insects', 5403), ('fog-clearing', 5499), ('visibility-improved', 5500), ('fog-forecast-withdrawn', 5501), ('pollution-alert-ended', 5502), ('air-quality-improved', 5503), ('maximum-temperature', 5633), ('temperature', 5634), ('minimum-temperature', 5635), ('current-temperature', 5636), ('heat-index', 5637), ('extreme-heat', 5638), ('hot', 5639), ('hotter', 5640), ('heat', 5641), ('warmer', 5642), ('warm', 5643), ('mild', 5644), ('cool', 5645), ('cooler', 5646), ('cold', 5647), ('colder', 5648), ('very-cold', 5649), ('extreme-cold', 5650), ('wind-chill', 5651), ('dewpoint', 5652), ('relative-humidity', 5653), ('temperatures-close-to-the-seasonal-norm', 5758), ('less-extreme-temperatures', 5759), ('impassable', 5889), ('almost-impassable', 5890), ('passable-with-care', 5891), ('passable', 5892), ('surface-water-hazard', 5893), ('danger-of-hydroplaning', 5894), ('wet-pavement', 5895), ('treated-pavement', 5896), ('slippery', 5897), ('low-ground-clearance', 5938), ('at-grade-level-crossing', 5937), ('mud-on-roadway', 5898), ('leaves-on-roadway', 5899), ('loose-sand-on-roadway', 5900), ('loose-gravel', 5901), ('fuel-on-roadway', 5902), ('oil-on-roadway', 5903), ('road-surface-in-poor-condition', 5904), ('melting-tar', 5905), ('uneven-lanes', 5935), ('rough-road', 5931), ('rough-crossing', 5936), ('ice', 5906), ('icy-patches', 5907), ('black-ice', 5908), ('ice-pellets-on-roadway', 5909), ('ice-build-up', 5910), ('freezing-rain', 5911), ('wet-and-icy-roads', 5912), ('slush', 5914), ('melting-snow', 5913), ('frozen-slush', 5915), ('snow-on-roadway', 5916), ('packed-snow', 5917), ('packed-snow-patches', 5918), ('plowed-snow', 5919), ('wet-snow', 5920), ('fresh-snow', 5921), ('powder-snow', 5922), ('granular-snow', 5923), ('frozen-snow', 5924), ('crusted-snow', 5925), ('deep-snow', 5926), ('snow-drifts', 5927), ('drifting-snow', 5928), ('expected-snow-accumulation', 5929), ('current-snow-accumulation', 5930), ('sand', 5932), ('gravel', 5933), ('paved', 5934), ('dry-pavement', 6011), ('snow-cleared', 6012), ('pavement-conditions-improved', 6013), ('skid-hazard-reduced', 6014), ('pavement-conditions-cleared', 6015), ('winter-equipment-recommended', 6145), ('winter-equipment-required', 6146), ('snow-chains-recommended', 6147), ('snow-chains-required', 6148), ('snow-chains-prohibited', 6149), ('studded-tires-prohibited', 6150), ('snow-tires-recommended', 6151), ('snow-tires-required', 6152), ('four-wheel-drive-recommended', 6153), ('four-wheel-drive-required', 6154), ('snow-tires-or-chains-recommended', 6155), ('snow-tires-or-chains-required', 6156), ('winter-driving-requirements-lifted', 6271), ('driving-conditions-good', 6401), ('driving-conditions-fair', 6402), ('difficult-driving-conditions', 6403), ('very-difficult-driving-conditions', 6404), ('hazardous-driving-conditions', 6405), ('extremely-hazardous-driving-conditions', 6406), ('why-not-ride-share', 6657), ('is-this-your-no-ride-day', 6658), ('why-not-use-transit', 6659), ('why-not-park-and-ride', 6660), ('why-not-try-paratransit', 6661), ('why-not-travel-by-rail', 6662), ('why-not-use-the-subway', 6663), ('why-not-try-rapid-transit', 6664), ('why-not-travel-by-bus', 6665), ('your-parking-ticket-covers-the-return-ride', 6666), ('avoid-the-rush-hour', 6667), ('do-not-allow-unnecessary-gaps', 6668), ('follow-the-vehicle-in-front-smoothly', 6669), ('do-not-slow-down-unnecessarily', 6670), ('watch-for-muggers', 6671), ('watch-for-pickpockets', 6672), ('watch-for-thieves', 6673), ('sorry-for-any-delay', 6674), ('thank-you-for-your-understanding', 6675), ('we-appreciate-your-patience', 6676), ('we-are-grateful-for-your-cooperation', 6677), ('share-the-road', 6678), ('risk', 6913), ('watch', 6914), ('warning', 6915), ('alert', 6916), ('danger', 6917), ('danger-of-explosion', 6918), ('danger-of-fire', 6919), ('extra-police-patrols-in-operation', 6920), ('look-out-for-vehicles-stopped-under-bridges', 6921), ('increased-risk-of-accident', 6922), ('rescue-and-recovery-work-in-progress-at-sceneREMOVED', 6923), ('police-at-scene', 6924), ('emergency-vehicles-at-scene', 6925), ('traffic-being-directed-around-accident-area', 6926), ('police-directing-traffic', 6927), ('rescue-workers-directing-traffic', 6928), ('repairs-in-progress', 6929), ('pilot-car-in-operation', 6930), ('look-out-for-flagger', 6931), ('look-out-for-workers', 6952), ('police-checks-in-operation', 6932), ('truck-check-point', 6937), ('lockdown', 6935), ('security-check-point', 6936), ('single-occupancy-vehicle-check-point', 6938), ('mandatory-speed-limit-in-force', 6933), ('speed-limit-in-force-for-heavy-vehicles', 6934), ('behind-you', 6950), ('ride-with-traffic', 6953), ('prepare-to-evacuate-area', 6954), ('avoid', 6955), ('look', 6939), ('photo-enforced', 6940), ('traffic-signs', 6951), ('traffic-laws', 6941), ('use-low-gear', 6942), ('bridge-ices-before-road', 6943), ('speed-checked-by-radar', 6944), ('speed-checked-by-aircraft', 6945), ('fines', 6946), ('fines-higher', 6947), ('fines-doubled', 6948), ('fines-tripled', 6949), ('evacuation-canceled', 7033), ('warning-canceled', 7034), ('watch-canceled', 7035), ('alert-canceled', 7036), ('ended', 7037), ('cleared', 7038), ('canceled', 7039), ('drive-carefully', 7169), ('drive-with-extreme-caution', 7170), ('approach-with-care', 7171), ('keep-your-distance', 7172), ('increase-normal-following-distance', 7173), ('test-your-brakes', 7174), ('cross-intersection-with-care', 7175), ('pass-with-care', 7176), ('pass', 7200), ('use-low-beam-headlights', 7177), ('use-fog-lights', 7178), ('use-hazard-warning-lights', 7179), ('do-not-leave-your-vehicle', 7180), ('leave-your-vehicle-and-proceed-to-next-safe-place', 7181), ('turn-off-engine', 7182), ('close-all-windows-turn-off-heater-air-conditioner-and-vents', 7183), ('turn-off-air-conditioner-to-prevent-engine-overheating', 7184), ('turn-off-mobile-phones-and-two-way-radios', 7185), ('prepare-to-stop', 7186), ('be-prepared-to-stop', 7201), ('stop-at-next-rest-area', 7187), ('stop-at-next-safe-place', 7188), ('only-travel-if-absolutely-necessary', 7189), ('drive-to-another-service-area', 7190), ('use-through-traffic-lanes', 7191), ('use-local-traffic-lanes', 7192), ('use-left-hand-parallel-roadway', 7193), ('use-right-hand-parallel-roadway', 7194), ('use-heavy-vehicle-lane', 7195), ('observe-recommended-speed', 7196), ('signals-sequenced-for-speed', 7202), ('maintain-top-safe-speed', 7203), ('facing-traffic', 7197), ('push-button', 7198), ('to-cross-street', 7199), ('evacuate-area-voluntarily', 7204), ('shelter-in-place', 7205), ('keep-to-the-right', 7425), ('keep-to-the-left', 7426), ('use-right-lane', 7427), ('use-left-lane', 7428), ('stay-in-lane', 7450), ('merge', 7451), ('heavy-vehicles-use-right-lane', 7429), ('heavy-vehicles-use-left-lane', 7430), ('observe-signals', 7431), ('observe-signs', 7432), ('no-passing', 7433), ('no-smoking', 7434), ('no-open-flames', 7435), ('use-shoulder-as-lane', 7436), ('do-not-drive-on-the-shoulder', 7437), ('allow-emergency-vehicles-to-pass', 7438), ('clear-a-lane-for-emergency-vehicles', 7439), ('pull-over-to-the-edge-of-the-roadway', 7440), ('wait-for-escort-vehicle', 7441), ('in-emergency-wait-for-police-patrol', 7442), ('reduce-your-speed', 7443), ('observe-speed-limits', 7444), ('check-point', 7445), ('entry-requirements', 7446), ('insurance-requirements', 7447), ('firearms-requirements', 7448), ('pet-requirements', 7449), ('slower-traffic-keep-right', 7452), ('keep-off', 7453), ('evacuate-area-immediately', 7454), ('shoulder-travel-no-longer-allowed', 7547), ('above', 7681), ('below', 7682), ('in', 7683), ('around', 7684), ('after', 7685), ('before', 7686), ('at', 7687), ('on', 7688), ('near', 7689), ('from-the', 7690), ('terminal', 7691), ('falling-slowly', 7692), ('falling', 7693), ('falling-quickly', 7694), ('rising-slowly', 7695), ('rising', 7696), ('rising-quickly', 7697), ('steady', 7698), ('likely', 7699), ('changing-to', 7700), ('mostly', 7701), ('partly', 7702), ('minus', 7703), ('weather-ended', 7704), ('expected', 7705), ('low', 7706), ('mid', 7707), ('high', 7708), ('upper', 7709), ('middle', 7765), ('lower', 7764), ('unseasonably', 7710), ('reported', 7711), ('advice', 7712), ('due-to', 7713), ('proceed-to', 7714), ('transferred-to', 7715), ('use', 7716), ('affecting', 7717), ('blocking', 7718), ('connecting', 7719), ('finished', 7720), ('for', 7721), ('or', 7722), ('and', 7723), ('later', 7724), ('level', 7725), ('shortly', 7726), ('soon', 7727), ('service', 7728), ('graffiti', 7733), ('damaged', 7729), ('out-of-order', 7730), ('on-State-right-of-way', 7732), ('found-property', 7734), ('vandalism', 7731), ('major', 7766), ('minor', 7767), ('begin-time', 7735), ('added', 7736), ('end-time', 7737), ('no', 7738), ('do-not', 7739), ('block', 7740), ('except', 7741), ('day', 7742), ('night', 7743), ('any-time', 7744), ('has', 7745), ('must', 7757), ('may-have', 7746), ('may-exceed', 7759), ('only', 7747), ('lifted', 7748), ('empty', 7749), ('turning', 7750), ('u-turn', 7751), ('wait-for', 7752), ('when-flashing', 7753), ('duration', 7754), ('cross', 7755), ('when-wet', 7756), ('oncoming', 7758), ('to-request', 7760), ('exempt', 7761), ('skewed', 7762), ('when-children-are-present', 7763), ('on-bridges', 7937), ('in-tunnels', 7938), ('entering-or-leaving-tunnels', 7939), ('on-ramps', 7940), ('in-road-construction-area', 7941), ('around-a-curve', 7942), ('on-curve', 8026), ('on-tracks', 8009), ('in-street', 8025), ('shoulder', 8027), ('on-minor-roads', 7943), ('in-the-opposing-lanes', 7944), ('adjacent-to-roadway', 7945), ('across-tracks', 8024), ('on-bend', 7946), ('intersection', 8032), ('entire-intersection', 7947), ('in-the-median', 7948), ('moved-to-side-of-road', 7949), ('moved-to-shoulder', 7950), ('on-the-roadway', 7951), ('dip', 8010), ('traffic-circle', 8011), ('crossover', 8028), ('cross-road', 8029), ('side-road', 8030), ('to', 8014), ('by', 8015), ('through', 8016), ('area-of', 8017), ('under', 8018), ('over', 8019), ('from', 8020), ('approaching', 8021), ('entering-at', 8022), ('exiting-at', 8023), ('in-shaded-areas', 7952), ('in-low-lying-areas', 7953), ('in-the-downtown-area', 7954), ('in-the-inner-city-area', 7955), ('in-parts', 7956), ('in-some-places', 7957), ('in-the-ditch', 7958), ('in-the-valley', 7959), ('on-hill-top', 7960), ('near-the-foothills', 7961), ('at-high-altitudes', 7962), ('near-the-lake', 7963), ('near-the-shore', 7964), ('nearby-basin', 8008), ('over-the-crest-of-a-hill', 7965), ('other-than-on-the-roadway', 7966), ('near-the-beach', 7967), ('near-beach-access-point', 7968), ('mountain-pass', 8006), ('lower-level', 7969), ('upper-level', 7970), ('coast', 8034), ('airport', 7971), ('concourse', 7972), ('gate', 7973), ('baggage-claim', 7974), ('customs-point', 7975), ('reservation-center', 8007), ('station', 7976), ('platform', 7977), ('dock', 7978), ('depot', 7979), ('ev-charging-point', 7980), ('information-welcome-point', 7981), ('at-rest-area', 7982), ('at-service-area', 7983), ('at-weigh-station', 7984), ('roadside-park', 8033), ('picnic-areas', 7985), ('rest-area', 7986), ('service-stations', 7987), ('toilets', 7988), ('bus-stop', 8031), ('park-and-ride-lot', 8012), ('on-the-right', 7989), ('on-the-left', 7990), ('in-the-center', 7991), ('in-the-opposite-direction', 7992), ('cross-traffic', 7993), ('northbound-traffic', 7994), ('eastbound-traffic', 7995), ('southbound-traffic', 7996), ('westbound-traffic', 7997), ('north', 7998), ('south', 7999), ('east', 8000), ('west', 8001), ('northeast', 8002), ('northwest', 8003), ('southeast', 8004), ('southwest', 8005), ('all-roadways', 8193), ('through-lanes', 8194), ('left-lane', 8195), ('right-lane', 8196), ('center-lane', 8197), ('middle-lanes', 8198), ('middle-two-lanes', 8199), ('right-turning-lanes', 8200), ('left-turning-lanes', 8201), ('upper-deck-lanes', 8236), ('lower-deck-lanes', 8237), ('reversible-lanes', 8238), ('right-exit-lanes', 8239), ('left-exit-lanes', 8240), ('right-merging-lanes', 8241), ('left-merging-lanes', 8242), ('right-exit-ramp', 8202), ('right-second-exit-ramp', 8243), ('right-entrance-ramp', 8203), ('right-second-entrance-ramp', 8245), ('left-exit-ramp', 8204), ('left-second-exit-ramp', 8244), ('left-entrance-ramp', 8205), ('left-second-entrance-ramp', 8246), ('escape-ramp', 8234), ('hard-shoulder', 8206), ('soft-shoulder', 8207), ('right-shoulder', 8208), ('left-shoulder', 8209), ('median', 8252), ('sidewalk', 8251), ('highways', 8235), ('right-hand-parallel-lanes', 8210), ('left-hand-parallel-lanes', 8211), ('connecting-lanes', 8212), ('express-lanes', 8213), ('local-lanes', 8214), ('toll-lanes', 8215), ('electronic-toll-lanes', 8216), ('toll-plaza', 8217), ('inspection-lane', 8218), ('hOV-lanes', 8219), ('bus-lanes', 8220), ('carpool-lanes', 8221), ('truck-lanes', 8222), ('emergency-lanes', 8223), ('passing-lanes', 8224), ('climbing-lanes', 8225), ('slow-lane', 8226), ('service-road', 8227), ('cycle-lane', 8228), ('tracks', 8250), ('bridge', 8229), ('overpass', 8230), ('elevated-lanes', 8231), ('underpass', 8232), ('tunnel', 8233), ('all-exit-lanes', 8247), ('all-entry-lanes', 8248), ('either-shoulder', 8249), ('shoulder-work', 8253), ('detour-where-possible', 8449), ('no-detour-available', 8450), ('follow-signs', 8451), ('follow-detour-signs', 8452), ('follow-special-detour-markers', 8453), ('do-not-follow-detour-signs', 8454), ('detour-in-operation', 8455), ('follow-local-detour', 8456), ('compulsory-detour-in-operation', 8457), ('no-suitable-detour-available', 8458), ('detour-is-no-longer-recommended', 8459), ('local-drivers-are-recommended-to-avoid-the-area', 8460), ('trucks-are-recommended-to-avoid-the-area', 8461), ('consider-alternate-route', 8462), ('consider-alternate-parking', 8463), ('consider-alternate-destination', 8464), ('consider-alternate-area', 8465), ('snow-route', 8466), ('emergency-snow-route', 8467), ('evacuation-route', 8468), ('truck-route', 8469), ('hazardous-materials-route', 8470), ('detour', 8471), ('square-feet', 8705), ('square-meters', 8706), ('acres', 8707), ('hectares', 8708), ('inches', 8709), ('feet', 8710), ('mile', 8711), ('miles', 8712), ('nautical-miles', 8713), ('millimeters', 8714), ('meters', 8715), ('kilometer', 8716), ('kilometers', 8717), ('feet-per-second', 8718), ('meters-per-second', 8719), ('mPH', 8720), ('kPH', 8721), ('knots', 8722), ('elevation', 8766), ('aM', 8723), ('pM', 8724), ('holiday', 8726), ('seconds', 8727), ('minutes', 8728), ('hours', 8729), ('days', 8730), ('weeks', 8731), ('months', 8732), ('other-times', 8767), ('nSunday', 8758), ('nMonday', 8759), ('nTuesday', 8760), ('nWednesday', 8761), ('nThursday', 8762), ('nFriday', 8763), ('nSaturday', 8764), ('weekdays', 8765), ('weekends', 8725), ('degrees-Angle', 8733), ('degrees-Celsius', 8734), ('degrees-Fahrenheit', 8735), ('grams', 8736), ('kilograms', 8737), ('ounces', 8738), ('pounds', 8739), ('tons', 8740), ('fluid-ounces', 8741), ('gallons', 8742), ('milliliters', 8743), ('liters', 8744), ('kilograms-per-lane-mile', 8745), ('tons-per-lane-mile', 8746), ('dollar', 8747), ('percent', 8748), ('grade', 8757), ('time-delimiter', 8749), ('dollars', 8750), ('flight-number', 8751), ('person-people', 8752), ('response-plan', 8753), ('placard-type', 8754), ('placard-number', 8755), ('fM', 8756), ('travel', 8961), ('transit', 8962), ('bus', 8963), ('trolleybus', 8964), ('rail', 8965), ('commuter-rail', 8966), ('subway', 8967), ('rapid-transit', 8968), ('light-rail', 8969), ('streetcar', 8970), ('dial-a-ride', 8971), ('park-and-ride', 8972), ('shuttle', 8973), ('free-shuttle', 8974), ('airport-shuttle', 8975), ('taxies', 8976), ('ferry', 8977), ('passenger-ferry', 8978), ('vehicle-ferry', 8979), ('aerial-tramway', 8980), ('automated-guideway', 8981), ('cable-cars', 8982), ('monorail', 8983), ('air-travel', 8984), ('hitch-hitching', 8985), ('walk', 8986), ('all-vehicles', 9217), ('bicycles', 9218), ('motorcycles', 9219), ('cars', 9220), ('light-vehicles', 9221), ('cars-and-light-vehicles', 9222), ('cars-with-trailers', 9223), ('cars-with-recreational-trailers', 9224), ('vehicles-with-trailers', 9225), ('heavy-vehicles', 9226), ('trucks', 9227), ('buses', 9228), ('articulated-buses', 9229), ('school-buses', 9230), ('vehicles-with-semi-trailers', 9231), ('vehicles-with-double-trailers', 9232), ('high-profile-vehicles', 9233), ('wide-vehicles', 9234), ('long-vehicles', 9235), ('hazardous-loads', 9236), ('exceptional-loads', 9237), ('abnormal-loads', 9238), ('convoys', 9239), ('maintenance-vehicles', 9240), ('delivery-vehicles', 9241), ('vehicles-with-even-numbered-license-plates', 9242), ('vehicles-with-odd-numbered-license-plates', 9243), ('vehicles-with-parking-permits', 9244), ('vehicles-with-catalytic-converters', 9245), ('vehicles-without-catalytic-converters', 9246), ('gas-powered-vehicles', 9247), ('diesel-powered-vehicles', 9248), ('lPG-vehicles', 9249), ('military-convoys', 9250), ('military-vehicles', 9251), ('electric-powered-vehicles', 9252), ('hybrid-powered-vehicles', 9253), ('inherently-low-emission-vehicles', 9254), ('commercial-vehicles', 9255), ('runaway-vehicles', 9256), ('vehicles-with-lugs', 9257), ('motor-driven-cycles', 9258), ('recreational-vehicles', 9259), ('non-motorized-vehicles', 9260), ('traffic', 9261), ('through-traffic', 9473), ('holiday-traffic', 9474), ('residents', 9475), ('visitors', 9476), ('long-distance-traffic', 9477), ('local-traffic', 9478), ('regional-traffic', 9479), ('arrivals', 9480), ('departures', 9481), ('airline-travelers', 9482), ('commuter-airline-travelers', 9483), ('domestic-airline-travelers', 9484), ('international-airline-travelers', 9485), ('pedestrians', 9486), ('bicyclists', 9487), ('emergency-vehicle-units', 9729), ('federal-law-enforcement-units', 9730), ('state-police-units', 9731), ('county-police-units', 9732), ('local-police-units', 9733), ('ambulance-units', 9734), ('rescue-units', 9735), ('fire-units', 9736), ('hAZMAT-units', 9737), ('light-tow-unit', 9738), ('heavy-tow-unit', 9739), ('private-tow-units', 9743), ('freeway-service-patrols', 9740), ('transportation-response-units', 9741), ('private-contractor-response-units', 9742), ('ground-fire-suppression', 9985), ('heavy-ground-equipment', 9986), ('aircraft', 9988), ('marine-equipment', 9989), ('support-equipment', 9990), ('medical-rescue-unit', 9991), ('other', 9993), ('ground-fire-suppression-other', 9994), ('engine', 9995), ('truck-or-aerial', 9996), ('quint', 9997), ('tanker-pumper-combination', 9998), ('brush-truck', 10000), ('aircraft-rescue-firefighting', 10001), ('heavy-ground-equipment-other', 10004), ('dozer-or-plow', 10005), ('tractor', 10006), ('tanker-or-tender', 10008), ('aircraft-other', 10024), ('aircraft-fixed-wing-tanker', 10025), ('helitanker', 10026), ('helicopter', 10027), ('marine-equipment-other', 10034), ('fire-boat-with-pump', 10035), ('boat-no-pump', 10036), ('support-apparatus-other', 10044), ('breathing-apparatus-support', 10045), ('light-and-air-unit', 10046), ('medical-rescue-unit-other', 10054), ('rescue-unit', 10055), ('urban-search-rescue-unit', 10056), ('high-angle-rescue', 10057), ('crash-fire-rescue', 10058), ('bLS-unit', 10059), ('aLS-unit', 10060), ('mobile-command-post', 10075), ('chief-officer-car', 10076), ('hAZMAT-unit', 10077), ('type-i-hand-crew', 10078), ('type-ii-hand-crew', 10079), ('privately-owned-vehicle', 10083), ('other-apparatus-resource', 10084), ('ambulance', 10085), ('bomb-squad-van', 10086), ('combine-harvester', 10087), ('construction-vehicle', 10088), ('farm-tractor', 10089), ('grass-cutting-machines', 10090), ('hAZMAT-containment-tow', 10091), ('heavy-tow', 10092), ('light-tow', 10094), ('flatbed-tow', 10114), ('hedge-cutting-machines', 10093), ('mobile-crane', 10095), ('refuse-collection-vehicle', 10096), ('resurfacing-vehicle', 10097), ('road-sweeper', 10098), ('roadside-litter-collection-crews', 10099), ('survey-crews', 10115), ('salvage-vehicle', 10100), ('sand-truck', 10101), ('snowplow', 10102), ('steam-roller', 10103), ('swat-team-van', 10104), ('track-laying-vehicle', 10105), ('unknown-vehicle', 10106), ('white-lining-vehicle', 10107), ('dump-truck', 10108), ('supervisor-vehicle', 10109), ('snow-blower', 10110), ('rotary-snow-blower', 10111), ('road-grader', 10112), ('steam-truck', 10113), ('unknown-status', 10240), ('ready-for-use', 10241), ('working-normally', 10242), ('working-autonomously', 10243), ('working-incorrectly', 10244), ('not-working', 10245), ('normal-maintenance', 10246), ('in-route-to-use', 10247), ('returning-from-use', 10248), ('out-of-service', 10249), ('off-duty', 10250), ('on-patrol', 10251), ('on-call', 10252), ('on-break', 10253), ('mandatory-time-off', 10254), ('low-on-fuel', 10255), ('low-on-water', 10256), ('low-charge', 10257), ('missing', 10258), ('none', 10496), ('light-pole', 10497), ('utility-pole', 10498), ('gantry-way', 10499), ('sign-support', 10500), ('signal-pole', 10501), ('signage-public', 10502), ('signage-private', 10503), ('overhead-sign', 10568), ('ground-sign', 10569), ('cones', 10504), ('cones-post-type', 10505), ('cones-glue-post', 10506), ('cones-other', 10507), ('barriers', 10508), ('barrier-Aframe', 10509), ('barriers-heavy-duty', 10510), ('barricade-type-III', 10511), ('barricade-small', 10512), ('solid-barrier', 10565), ('moveable-barrier', 10566), ('barricade-lights', 10513), ('beacon', 10514), ('t-stand', 10515), ('a-stand', 10516), ('drums', 10517), ('sand-barrel', 10567), ('impact-attenuator', 10518), ('barricade-tape', 10519), ('safety-fence', 10520), ('temp-pavement-markings', 10521), ('speed-bumps', 10522), ('temp-curbs', 10523), ('parking-blocks', 10524), ('signboard-fixed', 10525), ('signboard-portable', 10526), ('stripe', 10572), ('island', 10573), ('har', 10527), ('har-AM', 10528), ('har-FM', 10529), ('har-DSRC', 10530), ('traffic-light', 10531), ('lane-control-signal', 10532), ('traffic-detector', 10533), ('vehicle-detector', 10534), ('system-alarm', 10535), ('arrow-board', 10536), ('fixed-VMS', 10537), ('mobile-VMS', 10538), ('ramp-control', 10539), ('gate-control', 10540), ('temporary-traffic-light', 10541), ('over-height-warning-system', 10542), ('over-weight-warning-system', 10543), ('emergency-telephones', 10544), ('railroad-crossing-equipment', 10545), ('tunnel-ventilation', 10546), ('ccTV', 10547), ('environmental-sensor', 10548), ('emergency-signal', 10570), ('countdown-pedestrian-sign', 10571), ('switch', 10549), ('signal', 10550), ('third-rail', 10551), ('overhead-power', 10552), ('concrete-tie', 10553), ('wooden-tie', 10554), ('manhole-cover', 10559), ('culvert', 10560), ('escalator', 10555), ('elevator', 10556), ('snow-poles', 10561), ('track', 10557), ('guide-poles', 10562), ('drawbridge', 10558), ('expansion-joint', 10563), ('shifted-plate', 10564), ('unknown-transit-problem', 10753), ('sleeping-customer', 10754), ('assault-on-passenger', 10755), ('assault-on-employee', 10756), ('broken-seat', 10757), ('bus-alarm', 10758), ('crime-or-drug-deal', 10759), ('eating-on-board', 10760), ('equipment-problem-with-air-conditioning', 10761), ('equipment-problem-with-air-system', 10762), ('equipment-problem-with-brakes', 10763), ('equipment-problem-with-chassis-or-suspension', 10764), ('equipment-problem-with-cooling-system', 10765), ('equipment-problem-with-doors', 10766), ('equipment-problem-with-electrical', 10767), ('equipment-problem-with-engine', 10768), ('equipment-problem-with-exterior-or-body', 10769), ('equipment-problem-with-fare-collection', 10770), ('equipment-problem-with-fuel-or-exhaust', 10771), ('equipment-problem-with-horn', 10772), ('equipment-problem-with-interior', 10773), ('equipment-problem-with-liftkneeling', 10774), ('equipment-problem-with-lights', 10775), ('equipment-problem-with-lubrication', 10776), ('equipment-problem-with-radio-or-communication', 10777), ('equipment-problem-with-signs', 10778), ('equipment-problem-with-steering', 10779), ('equipment-problem-with-tires', 10780), ('equipment-problem-with-transmission', 10781), ('equipment-problem-with-unknown-alarm', 10782), ('equipment-problem-with-wipers', 10783), ('fare-dispute-expired-pass', 10784), ('fare-dispute-expired-transfer', 10785), ('fare-dispute-expired-upgrade', 10786), ('fare-dispute-other', 10787), ('fare-dispute-refuses-to-pay', 10788), ('lift-passenger-cycle-completed', 10789), ('lift-passenger-ready-to-alight', 10790), ('lift-passenger-ready-to-board', 10791), ('lost-article', 10792), ('objects-thrown', 10793), ('passenger-accident-alighting', 10794), ('passenger-accident-boarding', 10795), ('passenger-accident-fallen-on-board', 10796), ('passenger-load', 10797), ('passenger-accident-other', 10798), ('passenger-sick-or-injured', 10799), ('right-of-way', 10800), ('theft', 10801), ('theft-of-service', 10802), ('waiting-to-get-relief-for-schedule-break', 10803), ('waiting-to-get-relief-after-run-is-finished', 10804), ('waiting-to-provide-relief', 10805), ('unknown-object', 11009), ('tire', 11010), ('rim', 11011), ('retread', 11012), ('trash', 11013), ('cargo', 11014), ('diesel', 11015), ('gasoline', 11016), ('anti-freeze', 11017), ('propane-gas', 11061), ('alternative-fuel', 11060), ('seat-belts', 11018), ('litter-container', 11019), ('all-Terrain-vehicle', 11020), ('seaplane', 11021), ('chairlift', 11022), ('fishing-pier', 11023), ('telephone', 11025), ('railroad-cross-buck', 11024), ('horn', 11048), ('train', 11047), ('deer', 11049), ('horse', 11051), ('cattle', 11050), ('golf-cart', 11052), ('services', 11056), ('motorist-services', 11059), ('food-services', 11053), ('roadside-table', 11055), ('ambulance-staging-point', 11054), ('fallout', 11026), ('medical', 11027), ('chemical', 11028), ('welfare', 11029), ('decontamination', 11063), ('evacuation', 11030), ('registration', 11062), ('emergency', 11064), ('left-arrow-signal', 11031), ('ahead-arrow-signal', 11032), ('right-arrow-signal', 11033), ('green-light-signal', 11034), ('green-arrow-signal', 11035), ('yellow-light-signal', 11036), ('yellow-arrow-signal', 11037), ('red-light-signal', 11038), ('red-arrow-signal', 11039), ('extended-green-signal', 11040), ('advance-arrow-signal', 11041), ('pedestrian-Signal-Stop', 11042), ('pedestrian-Signal-Caution', 11043), ('pedestrian-Signal-Walk', 11044), ('pedestrian-Signal-Light', 11045), ('pedestrian-Signal-Time-Display', 11046), ('prohibit-None-Allowed-LU-LT-L45-S-R45-RT-RU', 11264), ('prohibit-RU-Allowed-LU-LT-L45-S-R45-RT', 11265), ('prohibit-RT-Allowed-LU-LT-L45-S-R45-RU', 11266), ('prohibit-RT-RU-Allowed-LU-LT-L45-S-R45', 11267), ('prohibit-R45-Allowed-LU-LT-L45-S-RT-RU', 11268), ('prohibit-R45-RU-Allowed-LU-LT-L45-S-RT', 11269), ('prohibit-R45-RT-Allowed-LU-LT-L45-S-RU', 11270), ('prohibit-R45-RT-RU-Allowed-LU-LT-L45-S', 11271), ('prohibit-S-Allowed-LU-LT-L45-R45-RT-RU', 11272), ('prohibit-S-RU-Allowed-LU-LT-L45-R45-RT', 11273), ('prohibit-S-RT-Allowed-LU-LT-L45-R45-RU', 11274), ('prohibit-S-RT-RU-Allowed-LU-LT-L45-R45', 11275), ('prohibit-S-R45-Allowed-LU-LT-L45-RT-RU', 11276), ('prohibit-S-R45-RU-Allowed-LU-LT-L45-RT', 11277), ('prohibit-S-R45-RT-Allowed-LU-LT-L45-RU', 11278), ('prohibit-S-R45-RT-RU-Allowed-LU-LT-L45', 11279), ('prohibit-L45-Allowed-LU-LT-S-R45-RT-RU', 11280), ('prohibit-L45-RU-Allowed-LU-LT-S-R45-RT', 11281), ('prohibit-L45-RT-Allowed-LU-LT-S-R45-RU', 11282), ('prohibit-L45-RT-RU-Allowed-LU-LT-S-R45', 11283), ('prohibit-L45-R45-Allowed-LU-LT-S-RT-RU', 11284), ('prohibit-L45-R45-RU-Allowed-LU-LT-S-RT', 11285), ('prohibit-L45-R45-RT-Allowed-LU-LT-S-RU', 11286), ('prohibit-L45-R45-RT-RU-Allowed-LU-LT-S', 11287), ('prohibit-L45-S-Allowed-LU-LT-R45-RT-RU', 11288), ('prohibit-L45-S-RU-Allowed-LU-LT-R45-RT', 11289), ('prohibit-L45-S-RT-Allowed-LU-LT-R45-RU', 11290), ('prohibit-L45-S-RT-RU-Allowed-LU-LT-R45', 11291), ('prohibit-L45-S-R45-Allowed-LU-LT-RT-RU', 11292), ('prohibit-L45-S-R45-RU-Allowed-LU-LT-RT', 11293), ('prohibit-L45-S-R45-RT-Allowed-LU-LT-RU', 11294), ('prohibit-L45-S-R45-RT-RU-Allowed-LU-LT', 11295), ('prohibit-LT-Allowed-LU-L45-S-R45-RT-RU', 11296), ('prohibit-LT-RU-Allowed-LU-L45-S-R45-RT', 11297), ('prohibit-LT-RT-Allowed-LU-L45-S-R45-RU', 11298), ('prohibit-LT-RT-RU-Allowed-LU-L45-S-R45', 11299), ('prohibit-LT-R45-Allowed-LU-L45-S-RT-RU', 11300), ('prohibit-LT-R45-RU-Allowed-LU-L45-S-RT', 11301), ('prohibit-LT-R45-RT-Allowed-LU-L45-S-RU', 11302), ('prohibit-LT-R45-RT-RU-Allowed-LU-L45-S', 11303), ('prohibit-LT-S-Allowed-LU-L45-R45-RT-RU', 11304), ('prohibit-LT-S-RU-Allowed-LU-L45-R45-RT', 11305), ('prohibit-LT-S-RT-Allowed-LU-L45-R45-RU', 11306), ('prohibit-LT-S-RT-RU-Allowed-LU-L45-R45', 11307), ('prohibit-LT-S-R45-Allowed-LU-L45-RT-RU', 11308), ('prohibit-LT-S-R45-RU-Allowed-LU-L45-RT', 11309), ('prohibit-LT-S-R45-RT-Allowed-LU-L45-RU', 11310), ('prohibit-LT-S-R45-RT-RU-Allowed-LU-L45', 11311), ('prohibit-LT-L45-Allowed-LU-S-R45-RT-RU', 11312), ('prohibit-LT-L45-RU-Allowed-LU-S-R45-RT', 11313), ('prohibit-LT-L45-RT-Allowed-LU-S-R45-RU', 11314), ('prohibit-LT-L45-RT-RU-Allowed-LU-S-R45', 11315), ('prohibit-LT-L45-R45-Allowed-LU-S-RT-RU', 11316), ('prohibit-LT-L45-R45-RU-Allowed-LU-S-RT', 11317), ('prohibit-LT-L45-R45-RT-Allowed-LU-S-RU', 11318), ('prohibit-LT-L45-R45-RT-RU-Allowed-LU-S', 11319), ('prohibit-LT-L45-S-Allowed-LU-R45-RT-RU', 11320), ('prohibit-LT-L45-S-RU-Allowed-LU-R45-RT', 11321), ('prohibit-LT-L45-S-RT-Allowed-LU-R45-RU', 11322), ('prohibit-LT-L45-S-RT-RU-Allowed-LU-R45', 11323), ('prohibit-LT-L45-S-R45-Allowed-LU-RT-RU', 11324), ('prohibit-LT-L45-S-R45-RU-Allowed-LU-RT', 11325), ('prohibit-LT-L45-S-R45-RT-Allowed-LU-RU', 11326), ('prohibit-LT-L45-S-R45-RT-RU-Allowed-LU', 11327), ('prohibit-LU-Allowed-LT-L45-S-R45-RT-RU', 11328), ('prohibit-LU-RU-Allowed-LT-L45-S-R45-RT', 11329), ('prohibit-LU-RT-Allowed-LT-L45-S-R45-RU', 11330), ('prohibit-LU-RT-RU-Allowed-LT-L45-S-R45', 11331), ('prohibit-LU-R45-Allowed-LT-L45-S-RT-RU', 11332), ('prohibit-LU-R45-RU-Allowed-LT-L45-S-RT', 11333), ('prohibit-LU-R45-RT-Allowed-LT-L45-S-RU', 11334), ('prohibit-LU-R45-RT-RU-Allowed-LT-L45-S', 11335), ('prohibit-LU-S-Allowed-LT-L45-R45-RT-RU', 11336), ('prohibit-LU-S-RU-Allowed-LT-L45-R45-RT', 11337), ('prohibit-LU-S-RT-Allowed-LT-L45-R45-RU', 11338), ('prohibit-LU-S-RT-RU-Allowed-LT-L45-R45', 11339), ('prohibit-LU-S-R45-Allowed-LT-L45-RT-RU', 11340), ('prohibit-LU-S-R45-RU-Allowed-LT-L45-RT', 11341), ('prohibit-LU-S-R45-RT-Allowed-LT-L45-RU', 11342), ('prohibit-LU-S-R45-RT-RU-Allowed-LT-L45', 11343), ('prohibit-LU-L45-Allowed-LT-S-R45-RT-RU', 11344), ('prohibit-LU-L45-RU-Allowed-LT-S-R45-RT', 11345), ('prohibit-LU-L45-RT-Allowed-LT-S-R45-RU', 11346), ('prohibit-LU-L45-RT-RU-Allowed-LT-S-R45', 11347), ('prohibit-LU-L45-R45-Allowed-LT-S-RT-RU', 11348), ('prohibit-LU-L45-R45-RU-Allowed-LT-S-RT', 11349), ('prohibit-LU-L45-R45-RT-Allowed-LT-S-RU', 11350), ('prohibit-LU-L45-R45-RT-RU-Allowed-LT-S', 11351), ('prohibit-LU-L45-S-Allowed-LT-R45-RT-RU', 11352), ('prohibit-LU-L45-S-RU-Allowed-LT-R45-RT', 11353), ('prohibit-LU-L45-S-RT-Allowed-LT-R45-RU', 11354), ('prohibit-LU-L45-S-RT-RU-Allowed-LT-R45', 11355), ('prohibit-LU-L45-S-R45-Allowed-LT-RT-RU', 11356), ('prohibit-LU-L45-S-R45-RU-Allowed-LT-RT', 11357), ('prohibit-LU-L45-S-R45-RT-Allowed-LT-RU', 11358), ('prohibit-LU-L45-S-R45-RT-RU-Allowed-LT', 11359), ('prohibit-LU-LT-Allowed-L45-S-R45-RT-RU', 11360), ('prohibit-LU-LT-RU-Allowed-L45-S-R45-RT', 11361), ('prohibit-LU-LT-RT-Allowed-L45-S-R45-RU', 11362), ('prohibit-LU-LT-RT-RU-Allowed-L45-S-R45', 11363), ('prohibit-LU-LT-R45-Allowed-L45-S-RT-RU', 11364), ('prohibit-LU-LT-R45-RU-Allowed-L45-S-RT', 11365), ('prohibit-LU-LT-R45-RT-Allowed-L45-S-RU', 11366), ('prohibit-LU-LT-R45-RT-RU-Allowed-L45-S', 11367), ('prohibit-LU-LT-S-Allowed-L45-R45-RT-RU', 11368), ('prohibit-LU-LT-S-RU-Allowed-L45-R45-RT', 11369), ('prohibit-LU-LT-S-RT-Allowed-L45-R45-RU', 11370), ('prohibit-LU-LT-S-RT-RU-Allowed-L45-R45', 11371), ('prohibit-LU-LT-S-R45-Allowed-L45-RT-RU', 11372), ('prohibit-LU-LT-S-R45-RU-Allowed-L45-RT', 11373), ('prohibit-LU-LT-S-R45-RT-Allowed-L45-RU', 11374), ('prohibit-LU-LT-S-R45-RT-RU-Allowed-L45', 11375), ('prohibit-LU-LT-L45-Allowed-S-R45-RT-RU', 11376), ('prohibit-LU-LT-L45-RU-Allowed-S-R45-RT', 11377), ('prohibit-LU-LT-L45-RT-Allowed-S-R45-RU', 11378), ('prohibit-LU-LT-L45-RT-RU-Allowed-S-R45', 11379), ('prohibit-LU-LT-L45-R45-Allowed-S-RT-RU', 11380), ('prohibit-LU-LT-L45-R45-RU-Allowed-S-RT', 11381), ('prohibit-LU-LT-L45-R45-RT-Allowed-S-RU', 11382), ('prohibit-LU-LT-L45-R45-RT-RU-Allowed-S', 11383), ('prohibit-LU-LT-L45-S-Allowed-R45-RT-RU', 11384), ('prohibit-LU-LT-L45-S-RU-Allowed-R45-RT', 11385), ('prohibit-LU-LT-L45-S-RT-Allowed-R45-RU', 11386), ('prohibit-LU-LT-L45-S-RT-RU-Allowed-R45', 11387), ('prohibit-LU-LT-L45-S-R45-Allowed-RT-RU', 11388), ('prohibit-LU-LT-L45-S-R45-RU-Allowed-RT', 11389), ('prohibit-LU-LT-L45-S-R45-RT-Allowed-RU', 11390), ('prohibit-LU-LT-L45-S-R45-RT-RU-Allowed-None', 11391), ('n1-16th', 11521), ('n1-10th', 11522), ('n1-8th', 11523), ('n1-4th', 11524), ('n1-3rd', 11525), ('n1-2', 11526), ('n3-4', 11527), ('n300', 11531), ('n350', 11532), ('n400', 11533), ('n450', 11534), ('n500', 11535), ('n550', 11536), ('n600', 11537), ('n650', 11538), ('n700', 11539), ('n750', 11540), ('n800', 11541), ('n850', 11542), ('n900', 11543), ('n950', 11544), ('n1000', 11545), ('n1100', 11546), ('n1200', 11547), ('n1300', 11548), ('n1400', 11549), ('n1500', 11550), ('n1600', 11551), ('n1700', 11552), ('n1800', 11553), ('n1900', 11554), ('n2000', 11555), ('n2100', 11556), ('n2200', 11557), ('n2300', 11558), ('n2400', 11559), ('n2500', 11560), ('n2600', 11561), ('n2700', 11562), ('n2800', 11563), ('n2900', 11564), ('n3000', 11565), ('n3500', 11566), ('n4000', 11567), ('n4500', 11568), ('n5000', 11569), ('n5500', 11570), ('n6000', 11571), ('n6500', 11572), ('n7000', 11573), ('n7500', 11574), ('n8000', 11575), ('n8500', 11576), ('n9000', 11577), ('n9500', 11578), ('n10000', 11579), ('n11000', 11580), ('n12000', 11581), ('n13000', 11582), ('n14000', 11583), ('n15000', 11584), ('n16000', 11585), ('n17000', 11586), ('n18000', 11587), ('n19000', 11588), ('n20000', 11589), ('n21000', 11590), ('n22000', 11591), ('n23000', 11592), ('n24000', 11593), ('n25000', 11594), ('n26000', 11595), ('n27000', 11596), ('n28000', 11597), ('n29000', 11598), ('n30000', 11599), ('n35000', 11600), ('n40000', 11601), ('n45000', 11602), ('n50000', 11603), ('n55000', 11604), ('n60000', 11605), ('n65000', 11606), ('n70000', 11607), ('n75000', 11608), ('n80000', 11609), ('n85000', 11610), ('n90000', 11611), ('n95000', 11612), ('n100000', 11613), ('name-follows', 11777), ('freeway', 11778), ('us-Route', 11779), ('state-Route', 11780), ('interstate', 11781), ('business-Loop', 11782), ('spur', 11797), ('junction', 11798), ('alternative', 11783), ('county-Route', 11784), ('forest-Route', 11785), ('farm-to-Market-Route', 11786), ('eisenhower-Interstate-System', 11787), ('americas-Byways', 11788), ('national-Network-Route', 11789), ('scenic-Area', 11790), ('parking-Area', 11791), ('weight-Station', 11792), ('road', 11793), ('exit', 11794), ('historical-route', 11795), ('state-line', 11796), ('bicycle-route', 11799), ('bicycle-interstate-route', 11800), ('national-park', 11801), ('bear-viewing-area', 12033), ('deer-viewing-area', 12034), ('drinking-water', 12035), ('environmental-study-area', 12036), ('falling-rocks', 12037), ('firearms', 12038), ('leashed-pets', 12039), ('point-of-interest', 12040), ('smoking', 12041), ('dog', 12042), ('tent-camping', 12043), ('trailer-camping', 12044), ('first-aid', 12045), ('handicapped', 12046), ('mechanic', 12047), ('trailer-sanitary-station', 12048), ('viewing-area', 12049), ('scenic-overlook', 12095), ('campfire', 12050), ('locker', 12051), ('sleeping', 12052), ('trail', 12053), ('climbing', 12054), ('rock-climbing', 12055), ('hunting', 12056), ('playground', 12057), ('rock-collecting', 12058), ('spelunking', 12059), ('bicycle-trail', 12060), ('hiking-trail', 12061), ('horse-trail', 12062), ('trail-interpretive-auto', 12063), ('trail-interpretive-pedestrian', 12064), ('trail-road-for-4WD-vehicles', 12065), ('trail-for-trail-bikes', 12066), ('archer', 12067), ('hang-glider', 12068), ('boat-tours', 12069), ('canoeing', 12070), ('diving', 12071), ('scuba-diving', 12072), ('fishing', 12073), ('marine-recreation-area', 12074), ('motorboating', 12075), ('boat-ramp', 12076), ('rowboating', 12077), ('sailboating', 12078), ('water-skiing', 12079), ('surfing', 12080), ('swimming', 12081), ('wading', 12082), ('hand-launch', 12083), ('kayak', 12084), ('wind-surf', 12085), ('ice-skating', 12086), ('ski-jumping', 12087), ('bobbing', 12088), ('cross-country-skiing', 12089), ('downhill-skiing', 12090), ('sledding', 12091), ('snowmobiling', 12092), ('snowshoeing', 12093), ('winter-recreation-area', 12094), ('regulatory-sign', 12289), ('warning-sign', 12290), ('information-sign', 12291), ('construction-sign', 12292), ('guide-sign', 12293), ('stop', 12294), ('yield', 12295), ('caution', 12330), ('temporary', 12331), ('to-oncoming-traffic', 12296), ('four-way', 12297), ('all-way', 12298), ('one-way', 12329), ('zone', 12299), ('narrows', 12300), ('widens', 12301), ('reduced', 12302), ('combined', 12303), ('minimum', 12304), ('maximum', 12305), ('divided-road', 12306), ('double-arrow', 12307), ('dead-end', 12308), ('no-outlet', 12309), ('wrong-way', 12310), ('do-not-enter', 12314), ('nDetour', 12312), ('chevron', 12313), ('t-intersection-to-the-side', 12315), ('t-intersection-oncoming', 12316), ('y-intersection-to-the-side', 12317), ('y-intersection-oncoming', 12318), ('four-way-divided-highway-crossing', 12319), ('t-way-divided-highway-crossing', 12320), ('light-rail-divided-highway-crossing', 12321), ('light-rail-t-divided-highway-crossing', 12322), ('side-road-to-right', 12323), ('side-road-to-left', 12324), ('side-road-to-right-at-angle', 12325), ('side-road-to-left-at-angle', 12326), ('entering-roadway-merge', 12327), ('entering-roadway-added-lane', 12328), ('n1', 12545), ('n2', 12546), ('n3', 12547), ('n4', 12548), ('n5', 12549), ('n6', 12550), ('n7', 12551), ('n8', 12552), ('n9', 12553), ('n10', 12554), ('n11', 12555), ('n12', 12556), ('n13', 12557), ('n14', 12558), ('n15', 12559), ('n16', 12560), ('n17', 12561), ('n18', 12562), ('n19', 12563), ('n20', 12564), ('n21', 12565), ('n22', 12566), ('n23', 12567), ('n24', 12568), ('n25', 12569), ('n26', 12570), ('n27', 12571), ('n28', 12572), ('n29', 12573), ('n30', 12574), ('n31', 12575), ('n32', 12576), ('n33', 12577), ('n34', 12578), ('n35', 12579), ('n36', 12580), ('n37', 12581), ('n38', 12582), ('n39', 12583), ('n40', 12584), ('n41', 12585), ('n42', 12586), ('n43', 12587), ('n44', 12588), ('n45', 12589), ('n46', 12590), ('n47', 12591), ('n48', 12592), ('n49', 12593), ('n50', 12594), ('n51', 12595), ('n52', 12596), ('n53', 12597), ('n54', 12598), ('n55', 12599), ('n56', 12600), ('n57', 12601), ('n58', 12602), ('n59', 12603), ('n60', 12604), ('n61', 12605), ('n62', 12606), ('n63', 12607), ('n64', 12608), ('n65', 12609), ('n66', 12610), ('n67', 12611), ('n68', 12612), ('n69', 12613), ('n70', 12614), ('n71', 12615), ('n72', 12616), ('n73', 12617), ('n74', 12618), ('n75', 12619), ('n76', 12620), ('n77', 12621), ('n78', 12622), ('n79', 12623), ('n80', 12624), ('n81', 12625), ('n82', 12626), ('n83', 12627), ('n84', 12628), ('n85', 12629), ('n86', 12630), ('n87', 12631), ('n88', 12632), ('n89', 12633), ('n90', 12634), ('n91', 12635), ('n92', 12636), ('n93', 12637), ('n94', 12638), ('n95', 12639), ('n96', 12640), ('n97', 12641), ('n98', 12642), ('n99', 12643), ('n100', 12644), ('n101', 12645), ('n102', 12646), ('n103', 12647), ('n104', 12648), ('n105', 12649), ('n106', 12650), ('n107', 12651), ('n108', 12652), ('n109', 12653), ('n110', 12654), ('n111', 12655), ('n112', 12656), ('n113', 12657), ('n114', 12658), ('n115', 12659), ('n116', 12660), ('n117', 12661), ('n118', 12662), ('n119', 12663), ('n120', 12664), ('n121', 12665), ('n122', 12666), ('n123', 12667), ('n124', 12668), ('n125', 12669), ('n126', 12670), ('n127', 12671), ('n128', 12672), ('n129', 12673), ('n130', 12674), ('n131', 12675), ('n132', 12676), ('n133', 12677), ('n134', 12678), ('n135', 12679), ('n136', 12680), ('n137', 12681), ('n138', 12682), ('n139', 12683), ('n140', 12684), ('n141', 12685), ('n142', 12686), ('n143', 12687), ('n144', 12688), ('n145', 12689), ('n146', 12690), ('n147', 12691), ('n148', 12692), ('n149', 12693), ('n150', 12694), ('n151', 12695), ('n152', 12696), ('n153', 12697), ('n154', 12698), ('n155', 12699), ('n156', 12700), ('n157', 12701), ('n158', 12702), ('n159', 12703), ('n160', 12704), ('n161', 12705), ('n162', 12706), ('n163', 12707), ('n164', 12708), ('n165', 12709), ('n166', 12710), ('n167', 12711), ('n168', 12712), ('n169', 12713), ('n170', 12714), ('n171', 12715), ('n172', 12716), ('n173', 12717), ('n174', 12718), ('n175', 12719), ('n176', 12720), ('n177', 12721), ('n178', 12722), ('n179', 12723), ('n180', 12724), ('n181', 12725), ('n182', 12726), ('n183', 12727), ('n184', 12728), ('n185', 12729), ('n186', 12730), ('n187', 12731), ('n188', 12732), ('n189', 12733), ('n190', 12734), ('n191', 12735), ('n192', 12736), ('n193', 12737), ('n194', 12738), ('n195', 12739), ('n196', 12740), ('n197', 12741), ('n198', 12742), ('n199', 12743), ('n200', 12744), ('n201', 12745), ('n202', 12746), ('n203', 12747), ('n204', 12748), ('n205', 12749), ('n206', 12750), ('n207', 12751), ('n208', 12752), ('n209', 12753), ('n210', 12754), ('n211', 12755), ('n212', 12756), ('n213', 12757), ('n214', 12758), ('n215', 12759), ('n216', 12760), ('n217', 12761), ('n218', 12762), ('n219', 12763), ('n220', 12764), ('n221', 12765), ('n222', 12766), ('n223', 12767), ('n224', 12768), ('n225', 12769), ('n226', 12770), ('n227', 12771), ('n228', 12772), ('n229', 12773), ('n230', 12774), ('n231', 12775), ('n232', 12776), ('n233', 12777), ('n234', 12778), ('n235', 12779), ('n236', 12780), ('n237', 12781), ('n238', 12782), ('n239', 12783), ('n240', 12784), ('n241', 12785), ('n242', 12786), ('n243', 12787), ('n244', 12788), ('n245', 12789), ('n246', 12790), ('n247', 12791), ('n248', 12792), ('n249', 12793), ('n250', 12794), ('n251', 12795), ('n252', 12796), ('n253', 12797), ('n254', 12798), ('n255', 12799), ('alabama', 12801), ('alaska', 12802), ('american-Samoa', 12803), ('arizona', 12804), ('arkansas', 12805), ('california', 12806), ('colorado', 12807), ('connecticut', 12808), ('delaware', 12809), ('district-of-Columbia', 12810), ('florida', 12811), ('georgia', 12812), ('guam', 12813), ('hawaii', 12814), ('idaho', 12815), ('illinois', 12816), ('indiana', 12817), ('iowa', 12818), ('kansas', 12819), ('kentucky', 12820), ('louisiana', 12821), ('maine', 12822), ('maryland', 12823), ('massachusetts', 12824), ('michigan', 12825), ('minnesota', 12826), ('mississippi', 12827), ('missouri', 12828), ('montana', 12829), ('nebraska', 12830), ('nevada', 12831), ('new-Hampshire', 12832), ('new-Jersey', 12833), ('new-Mexico', 12834), ('new-York', 12835), ('north-Carolina', 12836), ('north-Dakota', 12837), ('northern-Marianas-Islands', 12838), ('ohio', 12839), ('oklahoma', 12840), ('oregon', 12841), ('pennsylvania', 12842), ('puerto-rico', 12843), ('rhode-Island', 12844), ('south-Carolina', 12845), ('south-Dakota', 12846), ('tennessee', 12847), ('texas', 12848), ('utah', 12849), ('vermont', 12850), ('virginia', 12851), ('virgin-Islands', 12852), ('washington', 12853), ('west-Virginia', 12854), ('wisconsin', 12855), ('wyoming', 12856), ('rest-room', 13057), ('mens-rest-room', 13058), ('womens-rest-room', 13059), ('family-rest-room', 13060), ('dam', 13061), ('fish-hatchery', 13062), ('information', 13063), ('lighthouse', 13064), ('lookout-tower', 13065), ('ranger-station', 13066), ('grocery-store', 13068), ('lodging', 13069), ('post-office', 13070), ('picnic-shelter', 13072), ('group-camping', 13073), ('group-picnicking', 13074), ('n24-hour-pharmacy', 13075), ('kennel', 13076), ('laundry-facilities', 13077), ('shower-facilities', 13078), ('amphitheater', 13079), ('stable', 13080), ('hospital', 13081), ('emergency-medical-service-point', 13082), ('library', 13083), ('recycling-collection-center', 13084), ('school', 13085), ('alley', 13313), ('annex', 13314), ('arcade', 13315), ('avenue', 13316), ('bayoo', 13317), ('beach', 13318), ('bend', 13319), ('bluff', 13320), ('bottom', 13321), ('boulevard', 13322), ('branch', 13323), ('nBridge', 13324), ('brook', 13325), ('burg', 13326), ('bypass', 13327), ('camp', 13328), ('canyon', 13329), ('cape', 13330), ('causeway', 13331), ('nCenter', 13332), ('circle', 13333), ('cliff', 13334), ('club', 13335), ('common', 13336), ('corner', 13337), ('course', 13338), ('court', 13339), ('cove', 13340), ('creek', 13341), ('crescent', 13342), ('crest', 13343), ('nCrossing', 13344), ('crossroad', 13345), ('curve', 13346), ('dale', 13347), ('nDam', 13348), ('divide', 13349), ('drive', 13350), ('estate', 13351), ('expressway', 13352), ('extension', 13353), ('fall', 13354), ('nFerry', 13355), ('field', 13356), ('flat', 13357), ('ford', 13358), ('forest', 13359), ('forge', 13360), ('fork', 13361), ('fort', 13362), ('nFreeway', 13363), ('garden', 13364), ('gateway', 13365), ('glen', 13366), ('green', 13367), ('grove', 13368), ('harbor', 13369), ('haven', 13370), ('heights', 13371), ('highway', 13372), ('nHill', 13373), ('hollow', 13374), ('inlet', 13375), ('nIsland', 13376), ('isle', 13377), ('nJunction', 13378), ('key', 13379), ('knoll', 13380), ('lake', 13381), ('land', 13382), ('landing', 13383), ('nLane', 13384), ('light', 13385), ('loaf', 13386), ('lock', 13387), ('lodge', 13388), ('loop', 13389), ('mall', 13390), ('manor', 13391), ('meadow', 13392), ('mews', 13393), ('mill', 13394), ('mission', 13395), ('motorway', 13396), ('mount', 13397), ('mountain', 13398), ('neck', 13399), ('orchard', 13400), ('oval', 13401), ('nOverpass', 13402), ('park', 13403), ('parkway', 13404), ('nPass', 13405), ('passage', 13406), ('path', 13407), ('pike', 13408), ('pine', 13409), ('plains', 13410), ('plaza', 13411), ('point', 13412), ('port', 13413), ('prairie', 13414), ('radial', 13415), ('ramp', 13416), ('ranch', 13417), ('rapid', 13418), ('rest', 13419), ('ridge', 13420), ('river', 13421), ('nRoad', 13422), ('route', 13423), ('row', 13424), ('rue', 13425), ('run', 13426), ('shoal', 13427), ('shore', 13428), ('skyway', 13429), ('spring', 13430), ('nSpur', 13431), ('square', 13432), ('nStation', 13433), ('stravenue', 13434), ('stream', 13435), ('street', 13436), ('summit', 13437), ('terrace', 13438), ('throughway', 13439), ('trace', 13440), ('nTrack', 13441), ('trafficway', 13442), ('nTrail', 13443), ('nTunnel', 13444), ('turnpike', 13445), ('nUnderpass', 13446), ('union', 13447), ('valley', 13448), ('viaduct', 13449), ('view', 13450), ('village', 13451), ('ville', 13452), ('vista', 13453), ('nWalk', 13454), ('wall', 13455), ('way', 13456), ('well', 13457), ('ahead', 13569), ('here', 13570), ('here-to', 13571), ('here-to-alley', 13572), ('here-to-corner', 13573), ('here-to-sign', 13574), ('between-signs', 13575), ('between', 13633), ('this-side-of-street', 13576), ('this-side-of-sign', 13577), ('right', 13579), ('left', 13580), ('begin-point', 13581), ('next', 13582), ('starting-start', 13611), ('ends-end', 13583), ('other-Side', 13584), ('crossing', 13585), ('crosswalks', 13586), ('center-strip', 13587), ('lane', 13588), ('shelter', 13634), ('center', 13635), ('hill', 13589), ('both-ways-left-and-right', 13590), ('both-ways-45-degree-angle-tilting-right', 13591), ('both-ways-45-degree-angle-tilting-left', 13592), ('both-directions-of-travel', 13593), ('left-arrow', 13610), ('left-turn', 13594), ('left-45-degree-arrow', 13595), ('left-45-degree-turn', 13596), ('ahead-and-to-the-left', 13597), ('ahead-and-to-the-left-at-a-45-degree-angle', 13598), ('right-arrow', 13609), ('right-turn', 13599), ('right-45-degree-arrow', 13600), ('right-45-degree-turn', 13601), ('ahead-and-to-the-right', 13602), ('ahead-and-to-the-right-at-a-45-degree-angle', 13603), ('downward-left-45-degree', 13604), ('downward-right-45-degree', 13605), ('downward-left-and-right-45-degree', 13606), ('reverse-turn-to-right', 13636), ('reverse-turn-to-left', 13637), ('reverse-curve-to-right', 13638), ('reverse-curve-to-left', 13639), ('two-lane-reverse-curve-to-right', 13623), ('two-lane-reverse-curve-to-left', 13624), ('three-lane-reverse-curve-to-right', 13625), ('three-lane-reverse-curve-to-left', 13626), ('winding-road-to-right', 13640), ('winding-road-to-left', 13641), ('chevron-right', 13613), ('chevron-left', 13614), ('right-turn-with-junction', 13615), ('left-turn-with-junction', 13616), ('hairpin-right', 13617), ('hairpin-left', 13618), ('truck-rollover-right', 13619), ('truck-rollover-left', 13620), ('n270-degree-turn-right', 13621), ('n270-degree-turn-left', 13622), ('double-reverse-curve-to-right', 13627), ('double-reverse-curve-to-left', 13628), ('two-lane-double-reverse-curve-to-right', 13629), ('two-lane-double-reverse-curve-to-left', 13630), ('three-lane-double-reverse-curve-to-right', 13631), ('three-lane-double-reverse-curve-to-left', 13632)])
    ITIScodes._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< LaneRoadway >-----#
    LaneRoadway = INT(name='LaneRoadway', mode=MODE_TYPE)
    LaneRoadway._cont = ASN1Dict([('all-roadways', 8193), ('through-lanes', 8194), ('left-lane', 8195), ('right-lane', 8196), ('center-lane', 8197), ('middle-lanes', 8198), ('middle-two-lanes', 8199), ('right-turning-lanes', 8200), ('left-turning-lanes', 8201), ('upper-deck-lanes', 8236), ('lower-deck-lanes', 8237), ('reversible-lanes', 8238), ('right-exit-lanes', 8239), ('left-exit-lanes', 8240), ('right-merging-lanes', 8241), ('left-merging-lanes', 8242), ('right-exit-ramp', 8202), ('right-second-exit-ramp', 8243), ('right-entrance-ramp', 8203), ('right-second-entrance-ramp', 8245), ('left-exit-ramp', 8204), ('left-second-exit-ramp', 8244), ('left-entrance-ramp', 8205), ('left-second-entrance-ramp', 8246), ('escape-ramp', 8234), ('hard-shoulder', 8206), ('soft-shoulder', 8207), ('right-shoulder', 8208), ('left-shoulder', 8209), ('median', 8252), ('sidewalk', 8251), ('highways', 8235), ('right-hand-parallel-lanes', 8210), ('left-hand-parallel-lanes', 8211), ('connecting-lanes', 8212), ('express-lanes', 8213), ('local-lanes', 8214), ('toll-lanes', 8215), ('electronic-toll-lanes', 8216), ('toll-plaza', 8217), ('inspection-lane', 8218), ('hOV-lanes', 8219), ('bus-lanes', 8220), ('carpool-lanes', 8221), ('truck-lanes', 8222), ('emergency-lanes', 8223), ('passing-lanes', 8224), ('climbing-lanes', 8225), ('slow-lane', 8226), ('service-road', 8227), ('cycle-lane', 8228), ('tracks', 8250), ('bridge', 8229), ('overpass', 8230), ('elevated-lanes', 8231), ('underpass', 8232), ('tunnel', 8233), ('all-exit-lanes', 8247), ('all-entry-lanes', 8248), ('either-shoulder', 8249), ('shoulder-work', 8253)])
    LaneRoadway._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< LargeNumbers >-----#
    LargeNumbers = INT(name='LargeNumbers', mode=MODE_TYPE)
    LargeNumbers._cont = ASN1Dict([('n1-16th', 11521), ('n1-10th', 11522), ('n1-8th', 11523), ('n1-4th', 11524), ('n1-3rd', 11525), ('n1-2', 11526), ('n3-4', 11527), ('n300', 11531), ('n350', 11532), ('n400', 11533), ('n450', 11534), ('n500', 11535), ('n550', 11536), ('n600', 11537), ('n650', 11538), ('n700', 11539), ('n750', 11540), ('n800', 11541), ('n850', 11542), ('n900', 11543), ('n950', 11544), ('n1000', 11545), ('n1100', 11546), ('n1200', 11547), ('n1300', 11548), ('n1400', 11549), ('n1500', 11550), ('n1600', 11551), ('n1700', 11552), ('n1800', 11553), ('n1900', 11554), ('n2000', 11555), ('n2100', 11556), ('n2200', 11557), ('n2300', 11558), ('n2400', 11559), ('n2500', 11560), ('n2600', 11561), ('n2700', 11562), ('n2800', 11563), ('n2900', 11564), ('n3000', 11565), ('n3500', 11566), ('n4000', 11567), ('n4500', 11568), ('n5000', 11569), ('n5500', 11570), ('n6000', 11571), ('n6500', 11572), ('n7000', 11573), ('n7500', 11574), ('n8000', 11575), ('n8500', 11576), ('n9000', 11577), ('n9500', 11578), ('n10000', 11579), ('n11000', 11580), ('n12000', 11581), ('n13000', 11582), ('n14000', 11583), ('n15000', 11584), ('n16000', 11585), ('n17000', 11586), ('n18000', 11587), ('n19000', 11588), ('n20000', 11589), ('n21000', 11590), ('n22000', 11591), ('n23000', 11592), ('n24000', 11593), ('n25000', 11594), ('n26000', 11595), ('n27000', 11596), ('n28000', 11597), ('n29000', 11598), ('n30000', 11599), ('n35000', 11600), ('n40000', 11601), ('n45000', 11602), ('n50000', 11603), ('n55000', 11604), ('n60000', 11605), ('n65000', 11606), ('n70000', 11607), ('n75000', 11608), ('n80000', 11609), ('n85000', 11610), ('n90000', 11611), ('n95000', 11612), ('n100000', 11613)])
    LargeNumbers._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< MobileSituation >-----#
    MobileSituation = INT(name='MobileSituation', mode=MODE_TYPE)
    MobileSituation._cont = ASN1Dict([('abnormal-load', 2049), ('wide-load', 2050), ('long-load', 2051), ('slow-vehicle', 2052), ('farm-equipment', 2053), ('horse-drawn-vehicles', 2054), ('overheight-load', 2055), ('overweight-load', 2056), ('tracked-vehicle', 2057), ('vehicle-carrying-hazardous-materials', 2058), ('slow-moving-maintenance-vehicle', 2059), ('convoy', 2060), ('military-convoy', 2061), ('refugee-convoy', 2062), ('motorcade', 2063), ('mobile-situation-repositioning', 2064), ('winter-maintenance-vehicles', 2065), ('snowplows', 2066), ('slow-moving-maintenance-vehicle-warning-cleared', 2172), ('exceptional-load-warning-cleared', 2173), ('hazardous-load-warning-cleared', 2174), ('convoy-cleared', 2175)])
    MobileSituation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< MUTCDLocations >-----#
    MUTCDLocations = INT(name='MUTCDLocations', mode=MODE_TYPE)
    MUTCDLocations._cont = ASN1Dict([('ahead', 13569), ('here', 13570), ('here-to', 13571), ('here-to-alley', 13572), ('here-to-corner', 13573), ('here-to-sign', 13574), ('between-signs', 13575), ('between', 13633), ('this-side-of-street', 13576), ('this-side-of-sign', 13577), ('right', 13579), ('left', 13580), ('begin-point', 13581), ('next', 13582), ('starting-start', 13611), ('ends-end', 13583), ('other-Side', 13584), ('crossing', 13585), ('crosswalks', 13586), ('center-strip', 13587), ('lane', 13588), ('shelter', 13634), ('center', 13635), ('hill', 13589), ('both-ways-left-and-right', 13590), ('both-ways-45-degree-angle-tilting-right', 13591), ('both-ways-45-degree-angle-tilting-left', 13592), ('both-directions-of-travel', 13593), ('left-arrow', 13610), ('left-turn', 13594), ('left-45-degree-arrow', 13595), ('left-45-degree-turn', 13596), ('ahead-and-to-the-left', 13597), ('ahead-and-to-the-left-at-a-45-degree-angle', 13598), ('right-arrow', 13609), ('right-turn', 13599), ('right-45-degree-arrow', 13600), ('right-45-degree-turn', 13601), ('ahead-and-to-the-right', 13602), ('ahead-and-to-the-right-at-a-45-degree-angle', 13603), ('downward-left-45-degree', 13604), ('downward-right-45-degree', 13605), ('downward-left-and-right-45-degree', 13606), ('reverse-turn-to-right', 13636), ('reverse-turn-to-left', 13637), ('reverse-curve-to-right', 13638), ('reverse-curve-to-left', 13639), ('two-lane-reverse-curve-to-right', 13623), ('two-lane-reverse-curve-to-left', 13624), ('three-lane-reverse-curve-to-right', 13625), ('three-lane-reverse-curve-to-left', 13626), ('winding-road-to-right', 13640), ('winding-road-to-left', 13641), ('chevron-right', 13613), ('chevron-left', 13614), ('right-turn-with-junction', 13615), ('left-turn-with-junction', 13616), ('hairpin-right', 13617), ('hairpin-left', 13618), ('truck-rollover-right', 13619), ('truck-rollover-left', 13620), ('n270-degree-turn-right', 13621), ('n270-degree-turn-left', 13622), ('double-reverse-curve-to-right', 13627), ('double-reverse-curve-to-left', 13628), ('two-lane-double-reverse-curve-to-right', 13629), ('two-lane-double-reverse-curve-to-left', 13630), ('three-lane-double-reverse-curve-to-right', 13631), ('three-lane-double-reverse-curve-to-left', 13632)])
    MUTCDLocations._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NamedObjects >-----#
    NamedObjects = INT(name='NamedObjects', mode=MODE_TYPE)
    NamedObjects._cont = ASN1Dict([('name-follows', 11777), ('freeway', 11778), ('us-Route', 11779), ('state-Route', 11780), ('interstate', 11781), ('business-Loop', 11782), ('spur', 11797), ('junction', 11798), ('alternative', 11783), ('county-Route', 11784), ('forest-Route', 11785), ('farm-to-Market-Route', 11786), ('eisenhower-Interstate-System', 11787), ('americas-Byways', 11788), ('national-Network-Route', 11789), ('scenic-Area', 11790), ('parking-Area', 11791), ('weight-Station', 11792), ('road', 11793), ('exit', 11794), ('historical-route', 11795), ('state-line', 11796), ('bicycle-route', 11799), ('bicycle-interstate-route', 11800), ('national-park', 11801)])
    NamedObjects._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Objects >-----#
    Objects = INT(name='Objects', mode=MODE_TYPE)
    Objects._cont = ASN1Dict([('unknown-object', 11009), ('tire', 11010), ('rim', 11011), ('retread', 11012), ('trash', 11013), ('cargo', 11014), ('diesel', 11015), ('gasoline', 11016), ('anti-freeze', 11017), ('propane-gas', 11061), ('alternative-fuel', 11060), ('seat-belts', 11018), ('litter-container', 11019), ('all-Terrain-vehicle', 11020), ('seaplane', 11021), ('chairlift', 11022), ('fishing-pier', 11023), ('telephone', 11025), ('railroad-cross-buck', 11024), ('horn', 11048), ('train', 11047), ('deer', 11049), ('horse', 11051), ('cattle', 11050), ('golf-cart', 11052), ('services', 11056), ('motorist-services', 11059), ('food-services', 11053), ('roadside-table', 11055), ('ambulance-staging-point', 11054), ('fallout', 11026), ('medical', 11027), ('chemical', 11028), ('welfare', 11029), ('decontamination', 11063), ('evacuation', 11030), ('registration', 11062), ('emergency', 11064), ('left-arrow-signal', 11031), ('ahead-arrow-signal', 11032), ('right-arrow-signal', 11033), ('green-light-signal', 11034), ('green-arrow-signal', 11035), ('yellow-light-signal', 11036), ('yellow-arrow-signal', 11037), ('red-light-signal', 11038), ('red-arrow-signal', 11039), ('extended-green-signal', 11040), ('advance-arrow-signal', 11041), ('pedestrian-Signal-Stop', 11042), ('pedestrian-Signal-Caution', 11043), ('pedestrian-Signal-Walk', 11044), ('pedestrian-Signal-Light', 11045), ('pedestrian-Signal-Time-Display', 11046)])
    Objects._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Obstruction >-----#
    Obstruction = INT(name='Obstruction', mode=MODE_TYPE)
    Obstruction._cont = ASN1Dict([('obstruction-on-roadway', 1281), ('object-on-roadway', 1282), ('objects-falling-from-moving-vehicle', 1283), ('debris-on-roadway', 1284), ('storm-damage', 1285), ('people-on-roadway', 1286), ('bicyclists-on-roadway', 1287), ('sightseers-obstructing-access', 1288), ('large-numbers-of-visitors', 1289), ('animal-on-roadway', 1290), ('large-animal-on-roadway', 1291), ('herd-of-animals-on-roadway', 1292), ('animal-struck', 1293), ('advertising-signs', 1315), ('fallen-trees', 1294), ('over-turned-trees', 1311), ('tree-limbs', 1312), ('utility-pole-down', 1314), ('downed-power-lines', 1295), ('downed-cables', 1296), ('subsidence', 1297), ('road-surface-collapse', 1298), ('frost-jacking', 1317), ('frost-heave', 1316), ('pavement-buckled', 1299), ('pothole', 1300), ('flooding', 1301), ('broken-water-main', 1302), ('collapsed-sewer', 1303), ('wash-out', 1319), ('washboard', 1318), ('sewer-overflow', 1304), ('gas-leak', 1305), ('snowmelt', 1306), ('mudslide', 1307), ('avalanche', 1308), ('rockfall', 1309), ('landslide', 1310), ('clearance-work', 1406), ('obstruction-cleared', 1407)])
    Obstruction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ParkingInformation >-----#
    ParkingInformation = INT(name='ParkingInformation', mode=MODE_TYPE)
    ParkingInformation._cont = ASN1Dict([('normal-parking-restrictions-lifted', 4097), ('parking-meter-restrictions-lifted', 4098), ('special-parking-restrictions-in-force', 4099), ('full-parking-lot', 4100), ('full-parking-garage', 4101), ('all-parking-lots-full', 4102), ('no-parking-spaces-available', 4103), ('only-a-few-spaces-available', 4104), ('spaces-available', 4105), ('no-parking', 4106), ('parking-on-one-side-of-street-only', 4107), ('parking-on-both-sides-of-street', 4108), ('parallel-parking-only', 4109), ('parking-meters-not-available', 4110), ('use-of-parking-meters-restricted', 4111), ('event-parking', 4112), ('handicapped-parking', 4113), ('long-term-parking', 4114), ('overnight-parking', 4115), ('short-term-parking', 4116), ('parking-by-permit-only', 4117), ('emergency-parking-only', 4118), ('emergency-stopping-only', 4119), ('parking', 4120), ('stopping', 4121), ('standing', 4122), ('tow-away-zone', 4123), ('school-zone', 4124), ('speed-zone', 4125), ('loading-zone', 4126), ('state-law', 4127), ('van-accessible', 4128), ('special-parking-restrictions-lifted', 4222), ('no-parking-information-available', 4223)])
    ParkingInformation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< PavementConditions >-----#
    PavementConditions = INT(name='PavementConditions', mode=MODE_TYPE)
    PavementConditions._cont = ASN1Dict([('impassable', 5889), ('almost-impassable', 5890), ('passable-with-care', 5891), ('passable', 5892), ('surface-water-hazard', 5893), ('danger-of-hydroplaning', 5894), ('wet-pavement', 5895), ('treated-pavement', 5896), ('slippery', 5897), ('low-ground-clearance', 5938), ('at-grade-level-crossing', 5937), ('mud-on-roadway', 5898), ('leaves-on-roadway', 5899), ('loose-sand-on-roadway', 5900), ('loose-gravel', 5901), ('fuel-on-roadway', 5902), ('oil-on-roadway', 5903), ('road-surface-in-poor-condition', 5904), ('melting-tar', 5905), ('uneven-lanes', 5935), ('rough-road', 5931), ('rough-crossing', 5936), ('ice', 5906), ('icy-patches', 5907), ('black-ice', 5908), ('ice-pellets-on-roadway', 5909), ('ice-build-up', 5910), ('freezing-rain', 5911), ('wet-and-icy-roads', 5912), ('slush', 5914), ('melting-snow', 5913), ('frozen-slush', 5915), ('snow-on-roadway', 5916), ('packed-snow', 5917), ('packed-snow-patches', 5918), ('plowed-snow', 5919), ('wet-snow', 5920), ('fresh-snow', 5921), ('powder-snow', 5922), ('granular-snow', 5923), ('frozen-snow', 5924), ('crusted-snow', 5925), ('deep-snow', 5926), ('snow-drifts', 5927), ('drifting-snow', 5928), ('expected-snow-accumulation', 5929), ('current-snow-accumulation', 5930), ('sand', 5932), ('gravel', 5933), ('paved', 5934), ('dry-pavement', 6011), ('snow-cleared', 6012), ('pavement-conditions-improved', 6013), ('skid-hazard-reduced', 6014), ('pavement-conditions-cleared', 6015)])
    PavementConditions._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Precipitation >-----#
    Precipitation = INT(name='Precipitation', mode=MODE_TYPE)
    Precipitation._cont = ASN1Dict([('severe-weather', 4865), ('blizzard', 4866), ('heavy-snow', 4867), ('snow', 4868), ('light-snow', 4869), ('snow-showers', 4870), ('winter-storm', 4871), ('ice-glaze', 4872), ('heavy-frost', 4873), ('frost', 4874), ('ice-storm', 4875), ('sleet', 4876), ('rain-and-snow-mixed', 4877), ('rain-changing-to-snow', 4878), ('damaging-hail', 4879), ('hail', 4880), ('thunderstorms', 4881), ('thundershowers', 4882), ('extremely-heavy-downpour', 4883), ('heavy-rain', 4884), ('rain', 4885), ('light-rain', 4886), ('drizzle', 4887), ('showers', 4888), ('dew', 4889), ('precipitation-cleared', 4991)])
    Precipitation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Qualifiers >-----#
    Qualifiers = INT(name='Qualifiers', mode=MODE_TYPE)
    Qualifiers._cont = ASN1Dict([('above', 7681), ('below', 7682), ('in', 7683), ('around', 7684), ('after', 7685), ('before', 7686), ('at', 7687), ('on', 7688), ('near', 7689), ('from-the', 7690), ('terminal', 7691), ('falling-slowly', 7692), ('falling', 7693), ('falling-quickly', 7694), ('rising-slowly', 7695), ('rising', 7696), ('rising-quickly', 7697), ('steady', 7698), ('likely', 7699), ('changing-to', 7700), ('mostly', 7701), ('partly', 7702), ('minus', 7703), ('weather-ended', 7704), ('expected', 7705), ('low', 7706), ('mid', 7707), ('high', 7708), ('upper', 7709), ('middle', 7765), ('lower', 7764), ('unseasonably', 7710), ('reported', 7711), ('advice', 7712), ('due-to', 7713), ('proceed-to', 7714), ('transferred-to', 7715), ('use', 7716), ('affecting', 7717), ('blocking', 7718), ('connecting', 7719), ('finished', 7720), ('for', 7721), ('or', 7722), ('and', 7723), ('later', 7724), ('level', 7725), ('shortly', 7726), ('soon', 7727), ('service', 7728), ('graffiti', 7733), ('damaged', 7729), ('out-of-order', 7730), ('on-State-right-of-way', 7732), ('found-property', 7734), ('vandalism', 7731), ('major', 7766), ('minor', 7767), ('begin-time', 7735), ('added', 7736), ('end-time', 7737), ('no', 7738), ('do-not', 7739), ('block', 7740), ('except', 7741), ('day', 7742), ('night', 7743), ('any-time', 7744), ('has', 7745), ('must', 7757), ('may-have', 7746), ('may-exceed', 7759), ('only', 7747), ('lifted', 7748), ('empty', 7749), ('turning', 7750), ('u-turn', 7751), ('wait-for', 7752), ('when-flashing', 7753), ('duration', 7754), ('cross', 7755), ('when-wet', 7756), ('oncoming', 7758), ('to-request', 7760), ('exempt', 7761), ('skewed', 7762), ('when-children-are-present', 7763)])
    Qualifiers._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RecreationalObjectsAndActivities >-----#
    RecreationalObjectsAndActivities = INT(name='RecreationalObjectsAndActivities', mode=MODE_TYPE)
    RecreationalObjectsAndActivities._cont = ASN1Dict([('bear-viewing-area', 12033), ('deer-viewing-area', 12034), ('drinking-water', 12035), ('environmental-study-area', 12036), ('falling-rocks', 12037), ('firearms', 12038), ('leashed-pets', 12039), ('point-of-interest', 12040), ('smoking', 12041), ('dog', 12042), ('tent-camping', 12043), ('trailer-camping', 12044), ('first-aid', 12045), ('handicapped', 12046), ('mechanic', 12047), ('trailer-sanitary-station', 12048), ('viewing-area', 12049), ('scenic-overlook', 12095), ('campfire', 12050), ('locker', 12051), ('sleeping', 12052), ('trail', 12053), ('climbing', 12054), ('rock-climbing', 12055), ('hunting', 12056), ('playground', 12057), ('rock-collecting', 12058), ('spelunking', 12059), ('bicycle-trail', 12060), ('hiking-trail', 12061), ('horse-trail', 12062), ('trail-interpretive-auto', 12063), ('trail-interpretive-pedestrian', 12064), ('trail-road-for-4WD-vehicles', 12065), ('trail-for-trail-bikes', 12066), ('archer', 12067), ('hang-glider', 12068), ('boat-tours', 12069), ('canoeing', 12070), ('diving', 12071), ('scuba-diving', 12072), ('fishing', 12073), ('marine-recreation-area', 12074), ('motorboating', 12075), ('boat-ramp', 12076), ('rowboating', 12077), ('sailboating', 12078), ('water-skiing', 12079), ('surfing', 12080), ('swimming', 12081), ('wading', 12082), ('hand-launch', 12083), ('kayak', 12084), ('wind-surf', 12085), ('ice-skating', 12086), ('ski-jumping', 12087), ('bobbing', 12088), ('cross-country-skiing', 12089), ('downhill-skiing', 12090), ('sledding', 12091), ('snowmobiling', 12092), ('snowshoeing', 12093), ('winter-recreation-area', 12094)])
    RecreationalObjectsAndActivities._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RegulatoryAndWarningSigns >-----#
    RegulatoryAndWarningSigns = INT(name='RegulatoryAndWarningSigns', mode=MODE_TYPE)
    RegulatoryAndWarningSigns._cont = ASN1Dict([('regulatory-sign', 12289), ('warning-sign', 12290), ('information-sign', 12291), ('construction-sign', 12292), ('guide-sign', 12293), ('stop', 12294), ('yield', 12295), ('caution', 12330), ('temporary', 12331), ('to-oncoming-traffic', 12296), ('four-way', 12297), ('all-way', 12298), ('one-way', 12329), ('zone', 12299), ('narrows', 12300), ('widens', 12301), ('reduced', 12302), ('combined', 12303), ('minimum', 12304), ('maximum', 12305), ('divided-road', 12306), ('double-arrow', 12307), ('dead-end', 12308), ('no-outlet', 12309), ('wrong-way', 12310), ('do-not-enter', 12314), ('nDetour', 12312), ('chevron', 12313), ('t-intersection-to-the-side', 12315), ('t-intersection-oncoming', 12316), ('y-intersection-to-the-side', 12317), ('y-intersection-oncoming', 12318), ('four-way-divided-highway-crossing', 12319), ('t-way-divided-highway-crossing', 12320), ('light-rail-divided-highway-crossing', 12321), ('light-rail-t-divided-highway-crossing', 12322), ('side-road-to-right', 12323), ('side-road-to-left', 12324), ('side-road-to-right-at-angle', 12325), ('side-road-to-left-at-angle', 12326), ('entering-roadway-merge', 12327), ('entering-roadway-added-lane', 12328)])
    RegulatoryAndWarningSigns._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ResponderGroupAffected >-----#
    ResponderGroupAffected = INT(name='ResponderGroupAffected', mode=MODE_TYPE)
    ResponderGroupAffected._cont = ASN1Dict([('emergency-vehicle-units', 9729), ('federal-law-enforcement-units', 9730), ('state-police-units', 9731), ('county-police-units', 9732), ('local-police-units', 9733), ('ambulance-units', 9734), ('rescue-units', 9735), ('fire-units', 9736), ('hAZMAT-units', 9737), ('light-tow-unit', 9738), ('heavy-tow-unit', 9739), ('private-tow-units', 9743), ('freeway-service-patrols', 9740), ('transportation-response-units', 9741), ('private-contractor-response-units', 9742)])
    ResponderGroupAffected._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RestrictionClass >-----#
    RestrictionClass = INT(name='RestrictionClass', mode=MODE_TYPE)
    RestrictionClass._cont = ASN1Dict([('restrictions', 2561), ('ramp-restrictions', 2562), ('truck-restriction', 2563), ('speed-restriction', 2564), ('noise-restriction', 2565), ('traffic-regulations-have-been-changed', 2566), ('local-access-only', 2567), ('no-trailers', 2568), ('no-high-profile-vehicles', 2569), ('hazardous-materials-truck-restriction', 2570), ('no-through-traffic', 2571), ('no-motor-vehicles', 2572), ('width-limit', 2573), ('height-limit', 2574), ('length-limit', 2575), ('axle-load-limit', 2576), ('gross-weight-limit', 2577), ('axle-count-limit', 2578), ('carpool-lane-available', 2579), ('carpool-restrictions-changed', 2580), ('hOV-2-no-single-occupant-vehicles', 2581), ('hOV-3-no-vehicles-with-less-than-three-occupants', 2582), ('bus-lane-available-for-all-vehicles', 2583), ('truck-lane-available-for-all-vehicles', 2584), ('permits-call-in-basis', 2585), ('permits-temporarily-closed', 2586), ('permits-closed', 2587), ('road-use-permits-required', 2588), ('permits-open', 2675), ('restrictions-for-high-profile-vehicles-lifted', 2676), ('width-limit-lifted', 2677), ('height-limit-lifted', 2678), ('length-limit-lifted', 2679), ('axle-load-limit-lifted', 2680), ('weight-limit-lifted', 2681), ('axle-count-limit-lifted', 2682), ('carpool-restrictions-lifted', 2683), ('lane-restrictions-lifted', 2684), ('ramp-restrictions-lifted', 2685), ('motor-vehicle-restrictions-lifted', 2686), ('restrictions-lifted', 2687)])
    RestrictionClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RoadsideAssets >-----#
    RoadsideAssets = INT(name='RoadsideAssets', mode=MODE_TYPE)
    RoadsideAssets._cont = ASN1Dict([('none', 10496), ('light-pole', 10497), ('utility-pole', 10498), ('gantry-way', 10499), ('sign-support', 10500), ('signal-pole', 10501), ('signage-public', 10502), ('signage-private', 10503), ('overhead-sign', 10568), ('ground-sign', 10569), ('cones', 10504), ('cones-post-type', 10505), ('cones-glue-post', 10506), ('cones-other', 10507), ('barriers', 10508), ('barrier-Aframe', 10509), ('barriers-heavy-duty', 10510), ('barricade-type-III', 10511), ('barricade-small', 10512), ('solid-barrier', 10565), ('moveable-barrier', 10566), ('barricade-lights', 10513), ('beacon', 10514), ('t-stand', 10515), ('a-stand', 10516), ('drums', 10517), ('sand-barrel', 10567), ('impact-attenuator', 10518), ('barricade-tape', 10519), ('safety-fence', 10520), ('temp-pavement-markings', 10521), ('speed-bumps', 10522), ('temp-curbs', 10523), ('parking-blocks', 10524), ('signboard-fixed', 10525), ('signboard-portable', 10526), ('stripe', 10572), ('island', 10573), ('har', 10527), ('har-AM', 10528), ('har-FM', 10529), ('har-DSRC', 10530), ('traffic-light', 10531), ('lane-control-signal', 10532), ('traffic-detector', 10533), ('vehicle-detector', 10534), ('system-alarm', 10535), ('arrow-board', 10536), ('fixed-VMS', 10537), ('mobile-VMS', 10538), ('ramp-control', 10539), ('gate-control', 10540), ('temporary-traffic-light', 10541), ('over-height-warning-system', 10542), ('over-weight-warning-system', 10543), ('emergency-telephones', 10544), ('railroad-crossing-equipment', 10545), ('tunnel-ventilation', 10546), ('ccTV', 10547), ('environmental-sensor', 10548), ('emergency-signal', 10570), ('countdown-pedestrian-sign', 10571), ('switch', 10549), ('signal', 10550), ('third-rail', 10551), ('overhead-power', 10552), ('concrete-tie', 10553), ('wooden-tie', 10554), ('manhole-cover', 10559), ('culvert', 10560), ('escalator', 10555), ('elevator', 10556), ('snow-poles', 10561), ('track', 10557), ('guide-poles', 10562), ('drawbridge', 10558), ('expansion-joint', 10563), ('shifted-plate', 10564)])
    RoadsideAssets._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Roadwork >-----#
    Roadwork = INT(name='Roadwork', mode=MODE_TYPE)
    Roadwork._cont = ASN1Dict([('road-construction', 1025), ('major-road-construction', 1026), ('long-term-road-construction', 1027), ('construction-work', 1028), ('paving-operations', 1029), ('work-in-the-median', 1030), ('road-reconstruction', 1031), ('opposing-traffic', 1032), ('narrow-lanes', 1033), ('construction-traffic-merging', 1034), ('single-line-traffic-alternating-directions', 1035), ('road-maintenance-operations', 1036), ('road-marking-operations', 1037), ('road-widening', 1061), ('cracks', 1052), ('crack-REMOVE', 1058), ('bumps', 1053), ('drop-off', 1059), ('storm-drain', 1054), ('bridge-maintenance-operations', 1038), ('bridge-construction', 1039), ('bridge-demolition-work', 1040), ('seismic-retrofit', 1060), ('overgrown-grass', 1055), ('overgrown-brushshrubs', 1056), ('overgrown-trees', 1057), ('blasting', 1041), ('avalanche-control-activities', 1042), ('water-main-work', 1043), ('gas-main-work', 1044), ('work-on-underground-cables', 1045), ('work-on-underground-services', 1046), ('new-road-construction-layout', 1047), ('new-road-layout', 1048), ('temporary-lane-markings', 1049), ('temporary-traffic-lights', 1050), ('emergency-maintenance', 1051), ('utility-work', 1062), ('road-maintenance-cleared', 1146), ('normal-road-layout-restored', 1147), ('road-work-clearance-in-progress', 1148), ('road-construction-cleared', 1149), ('normal-traffic-lanes-restored', 1150), ('road-work-cleared', 1151)])
    Roadwork._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< SmallNumbers >-----#
    SmallNumbers = INT(name='SmallNumbers', mode=MODE_TYPE)
    SmallNumbers._cont = ASN1Dict([('n1', 12545), ('n2', 12546), ('n3', 12547), ('n4', 12548), ('n5', 12549), ('n6', 12550), ('n7', 12551), ('n8', 12552), ('n9', 12553), ('n10', 12554), ('n11', 12555), ('n12', 12556), ('n13', 12557), ('n14', 12558), ('n15', 12559), ('n16', 12560), ('n17', 12561), ('n18', 12562), ('n19', 12563), ('n20', 12564), ('n21', 12565), ('n22', 12566), ('n23', 12567), ('n24', 12568), ('n25', 12569), ('n26', 12570), ('n27', 12571), ('n28', 12572), ('n29', 12573), ('n30', 12574), ('n31', 12575), ('n32', 12576), ('n33', 12577), ('n34', 12578), ('n35', 12579), ('n36', 12580), ('n37', 12581), ('n38', 12582), ('n39', 12583), ('n40', 12584), ('n41', 12585), ('n42', 12586), ('n43', 12587), ('n44', 12588), ('n45', 12589), ('n46', 12590), ('n47', 12591), ('n48', 12592), ('n49', 12593), ('n50', 12594), ('n51', 12595), ('n52', 12596), ('n53', 12597), ('n54', 12598), ('n55', 12599), ('n56', 12600), ('n57', 12601), ('n58', 12602), ('n59', 12603), ('n60', 12604), ('n61', 12605), ('n62', 12606), ('n63', 12607), ('n64', 12608), ('n65', 12609), ('n66', 12610), ('n67', 12611), ('n68', 12612), ('n69', 12613), ('n70', 12614), ('n71', 12615), ('n72', 12616), ('n73', 12617), ('n74', 12618), ('n75', 12619), ('n76', 12620), ('n77', 12621), ('n78', 12622), ('n79', 12623), ('n80', 12624), ('n81', 12625), ('n82', 12626), ('n83', 12627), ('n84', 12628), ('n85', 12629), ('n86', 12630), ('n87', 12631), ('n88', 12632), ('n89', 12633), ('n90', 12634), ('n91', 12635), ('n92', 12636), ('n93', 12637), ('n94', 12638), ('n95', 12639), ('n96', 12640), ('n97', 12641), ('n98', 12642), ('n99', 12643), ('n100', 12644), ('n101', 12645), ('n102', 12646), ('n103', 12647), ('n104', 12648), ('n105', 12649), ('n106', 12650), ('n107', 12651), ('n108', 12652), ('n109', 12653), ('n110', 12654), ('n111', 12655), ('n112', 12656), ('n113', 12657), ('n114', 12658), ('n115', 12659), ('n116', 12660), ('n117', 12661), ('n118', 12662), ('n119', 12663), ('n120', 12664), ('n121', 12665), ('n122', 12666), ('n123', 12667), ('n124', 12668), ('n125', 12669), ('n126', 12670), ('n127', 12671), ('n128', 12672), ('n129', 12673), ('n130', 12674), ('n131', 12675), ('n132', 12676), ('n133', 12677), ('n134', 12678), ('n135', 12679), ('n136', 12680), ('n137', 12681), ('n138', 12682), ('n139', 12683), ('n140', 12684), ('n141', 12685), ('n142', 12686), ('n143', 12687), ('n144', 12688), ('n145', 12689), ('n146', 12690), ('n147', 12691), ('n148', 12692), ('n149', 12693), ('n150', 12694), ('n151', 12695), ('n152', 12696), ('n153', 12697), ('n154', 12698), ('n155', 12699), ('n156', 12700), ('n157', 12701), ('n158', 12702), ('n159', 12703), ('n160', 12704), ('n161', 12705), ('n162', 12706), ('n163', 12707), ('n164', 12708), ('n165', 12709), ('n166', 12710), ('n167', 12711), ('n168', 12712), ('n169', 12713), ('n170', 12714), ('n171', 12715), ('n172', 12716), ('n173', 12717), ('n174', 12718), ('n175', 12719), ('n176', 12720), ('n177', 12721), ('n178', 12722), ('n179', 12723), ('n180', 12724), ('n181', 12725), ('n182', 12726), ('n183', 12727), ('n184', 12728), ('n185', 12729), ('n186', 12730), ('n187', 12731), ('n188', 12732), ('n189', 12733), ('n190', 12734), ('n191', 12735), ('n192', 12736), ('n193', 12737), ('n194', 12738), ('n195', 12739), ('n196', 12740), ('n197', 12741), ('n198', 12742), ('n199', 12743), ('n200', 12744), ('n201', 12745), ('n202', 12746), ('n203', 12747), ('n204', 12748), ('n205', 12749), ('n206', 12750), ('n207', 12751), ('n208', 12752), ('n209', 12753), ('n210', 12754), ('n211', 12755), ('n212', 12756), ('n213', 12757), ('n214', 12758), ('n215', 12759), ('n216', 12760), ('n217', 12761), ('n218', 12762), ('n219', 12763), ('n220', 12764), ('n221', 12765), ('n222', 12766), ('n223', 12767), ('n224', 12768), ('n225', 12769), ('n226', 12770), ('n227', 12771), ('n228', 12772), ('n229', 12773), ('n230', 12774), ('n231', 12775), ('n232', 12776), ('n233', 12777), ('n234', 12778), ('n235', 12779), ('n236', 12780), ('n237', 12781), ('n238', 12782), ('n239', 12783), ('n240', 12784), ('n241', 12785), ('n242', 12786), ('n243', 12787), ('n244', 12788), ('n245', 12789), ('n246', 12790), ('n247', 12791), ('n248', 12792), ('n249', 12793), ('n250', 12794), ('n251', 12795), ('n252', 12796), ('n253', 12797), ('n254', 12798), ('n255', 12799)])
    SmallNumbers._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< SpecialEvents >-----#
    SpecialEvents = INT(name='SpecialEvents', mode=MODE_TYPE)
    SpecialEvents._cont = ASN1Dict([('major-event', 3841), ('airshow', 3842), ('hot-air-ballooning', 3843), ('concert', 3844), ('state-occasion', 3845), ('vIP-visit', 3846), ('show', 3847), ('festival', 3848), ('exhibition', 3849), ('performing-arts', 3850), ('outdoor-market', 3851), ('fair', 3852), ('carnival', 3853), ('fireworks-display', 3854), ('trade-expo', 3855), ('movie-filming', 3856), ('presidential-visit', 3857), ('parade', 3858), ('procession', 3859), ('funeral-procession', 3860), ('crowd', 3861), ('holiday-traffic-crowds', 3862), ('event-ended', 3967)])
    SpecialEvents._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< SportingEvents >-----#
    SportingEvents = INT(name='SportingEvents', mode=MODE_TYPE)
    SportingEvents._cont = ASN1Dict([('sports-event', 3585), ('game', 3586), ('tournament', 3587), ('track-and-field-event', 3588), ('baseball-game', 3589), ('basketball-game', 3590), ('boxing-match', 3591), ('football-game', 3592), ('soccer-game', 3593), ('golf-tournament', 3594), ('hockey-game', 3595), ('tennis-tournament', 3596), ('wrestling-match', 3597), ('road-race', 3598), ('automobile-race', 3599), ('bicycle-race', 3600), ('race-event', 3601), ('marathon', 3602), ('horse-show', 3603), ('rodeo', 3604), ('water-sports-event', 3605), ('winter-sports-event', 3606), ('skating-event', 3607), ('dog-sled-race', 3608), ('sporting-event-ended', 3711)])
    SportingEvents._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< StatesAndTerritories >-----#
    StatesAndTerritories = INT(name='StatesAndTerritories', mode=MODE_TYPE)
    StatesAndTerritories._cont = ASN1Dict([('alabama', 12801), ('alaska', 12802), ('american-Samoa', 12803), ('arizona', 12804), ('arkansas', 12805), ('california', 12806), ('colorado', 12807), ('connecticut', 12808), ('delaware', 12809), ('district-of-Columbia', 12810), ('florida', 12811), ('georgia', 12812), ('guam', 12813), ('hawaii', 12814), ('idaho', 12815), ('illinois', 12816), ('indiana', 12817), ('iowa', 12818), ('kansas', 12819), ('kentucky', 12820), ('louisiana', 12821), ('maine', 12822), ('maryland', 12823), ('massachusetts', 12824), ('michigan', 12825), ('minnesota', 12826), ('mississippi', 12827), ('missouri', 12828), ('montana', 12829), ('nebraska', 12830), ('nevada', 12831), ('new-Hampshire', 12832), ('new-Jersey', 12833), ('new-Mexico', 12834), ('new-York', 12835), ('north-Carolina', 12836), ('north-Dakota', 12837), ('northern-Marianas-Islands', 12838), ('ohio', 12839), ('oklahoma', 12840), ('oregon', 12841), ('pennsylvania', 12842), ('puerto-rico', 12843), ('rhode-Island', 12844), ('south-Carolina', 12845), ('south-Dakota', 12846), ('tennessee', 12847), ('texas', 12848), ('utah', 12849), ('vermont', 12850), ('virginia', 12851), ('virgin-Islands', 12852), ('washington', 12853), ('west-Virginia', 12854), ('wisconsin', 12855), ('wyoming', 12856)])
    StatesAndTerritories._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< StreetSuffixes >-----#
    StreetSuffixes = INT(name='StreetSuffixes', mode=MODE_TYPE)
    StreetSuffixes._cont = ASN1Dict([('alley', 13313), ('annex', 13314), ('arcade', 13315), ('avenue', 13316), ('bayoo', 13317), ('beach', 13318), ('bend', 13319), ('bluff', 13320), ('bottom', 13321), ('boulevard', 13322), ('branch', 13323), ('nBridge', 13324), ('brook', 13325), ('burg', 13326), ('bypass', 13327), ('camp', 13328), ('canyon', 13329), ('cape', 13330), ('causeway', 13331), ('nCenter', 13332), ('circle', 13333), ('cliff', 13334), ('club', 13335), ('common', 13336), ('corner', 13337), ('course', 13338), ('court', 13339), ('cove', 13340), ('creek', 13341), ('crescent', 13342), ('crest', 13343), ('nCrossing', 13344), ('crossroad', 13345), ('curve', 13346), ('dale', 13347), ('nDam', 13348), ('divide', 13349), ('drive', 13350), ('estate', 13351), ('expressway', 13352), ('extension', 13353), ('fall', 13354), ('nFerry', 13355), ('field', 13356), ('flat', 13357), ('ford', 13358), ('forest', 13359), ('forge', 13360), ('fork', 13361), ('fort', 13362), ('nFreeway', 13363), ('garden', 13364), ('gateway', 13365), ('glen', 13366), ('green', 13367), ('grove', 13368), ('harbor', 13369), ('haven', 13370), ('heights', 13371), ('highway', 13372), ('nHill', 13373), ('hollow', 13374), ('inlet', 13375), ('nIsland', 13376), ('isle', 13377), ('nJunction', 13378), ('key', 13379), ('knoll', 13380), ('lake', 13381), ('land', 13382), ('landing', 13383), ('nLane', 13384), ('light', 13385), ('loaf', 13386), ('lock', 13387), ('lodge', 13388), ('loop', 13389), ('mall', 13390), ('manor', 13391), ('meadow', 13392), ('mews', 13393), ('mill', 13394), ('mission', 13395), ('motorway', 13396), ('mount', 13397), ('mountain', 13398), ('neck', 13399), ('orchard', 13400), ('oval', 13401), ('nOverpass', 13402), ('park', 13403), ('parkway', 13404), ('nPass', 13405), ('passage', 13406), ('path', 13407), ('pike', 13408), ('pine', 13409), ('plains', 13410), ('plaza', 13411), ('point', 13412), ('port', 13413), ('prairie', 13414), ('radial', 13415), ('ramp', 13416), ('ranch', 13417), ('rapid', 13418), ('rest', 13419), ('ridge', 13420), ('river', 13421), ('nRoad', 13422), ('route', 13423), ('row', 13424), ('rue', 13425), ('run', 13426), ('shoal', 13427), ('shore', 13428), ('skyway', 13429), ('spring', 13430), ('nSpur', 13431), ('square', 13432), ('nStation', 13433), ('stravenue', 13434), ('stream', 13435), ('street', 13436), ('summit', 13437), ('terrace', 13438), ('throughway', 13439), ('trace', 13440), ('nTrack', 13441), ('trafficway', 13442), ('nTrail', 13443), ('nTunnel', 13444), ('turnpike', 13445), ('nUnderpass', 13446), ('union', 13447), ('valley', 13448), ('viaduct', 13449), ('view', 13450), ('village', 13451), ('ville', 13452), ('vista', 13453), ('nWalk', 13454), ('wall', 13455), ('way', 13456), ('well', 13457)])
    StreetSuffixes._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Structures >-----#
    Structures = INT(name='Structures', mode=MODE_TYPE)
    Structures._cont = ASN1Dict([('rest-room', 13057), ('mens-rest-room', 13058), ('womens-rest-room', 13059), ('family-rest-room', 13060), ('dam', 13061), ('fish-hatchery', 13062), ('information', 13063), ('lighthouse', 13064), ('lookout-tower', 13065), ('ranger-station', 13066), ('grocery-store', 13068), ('lodging', 13069), ('post-office', 13070), ('picnic-shelter', 13072), ('group-camping', 13073), ('group-picnicking', 13074), ('n24-hour-pharmacy', 13075), ('kennel', 13076), ('laundry-facilities', 13077), ('shower-facilities', 13078), ('amphitheater', 13079), ('stable', 13080), ('hospital', 13081), ('emergency-medical-service-point', 13082), ('library', 13083), ('recycling-collection-center', 13084), ('school', 13085)])
    Structures._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< SuggestionAdvice >-----#
    SuggestionAdvice = INT(name='SuggestionAdvice', mode=MODE_TYPE)
    SuggestionAdvice._cont = ASN1Dict([('why-not-ride-share', 6657), ('is-this-your-no-ride-day', 6658), ('why-not-use-transit', 6659), ('why-not-park-and-ride', 6660), ('why-not-try-paratransit', 6661), ('why-not-travel-by-rail', 6662), ('why-not-use-the-subway', 6663), ('why-not-try-rapid-transit', 6664), ('why-not-travel-by-bus', 6665), ('your-parking-ticket-covers-the-return-ride', 6666), ('avoid-the-rush-hour', 6667), ('do-not-allow-unnecessary-gaps', 6668), ('follow-the-vehicle-in-front-smoothly', 6669), ('do-not-slow-down-unnecessarily', 6670), ('watch-for-muggers', 6671), ('watch-for-pickpockets', 6672), ('watch-for-thieves', 6673), ('sorry-for-any-delay', 6674), ('thank-you-for-your-understanding', 6675), ('we-appreciate-your-patience', 6676), ('we-are-grateful-for-your-cooperation', 6677), ('share-the-road', 6678)])
    SuggestionAdvice._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Temperature >-----#
    Temperature = INT(name='Temperature', mode=MODE_TYPE)
    Temperature._cont = ASN1Dict([('maximum-temperature', 5633), ('temperature', 5634), ('minimum-temperature', 5635), ('current-temperature', 5636), ('heat-index', 5637), ('extreme-heat', 5638), ('hot', 5639), ('hotter', 5640), ('heat', 5641), ('warmer', 5642), ('warm', 5643), ('mild', 5644), ('cool', 5645), ('cooler', 5646), ('cold', 5647), ('colder', 5648), ('very-cold', 5649), ('extreme-cold', 5650), ('wind-chill', 5651), ('dewpoint', 5652), ('relative-humidity', 5653), ('temperatures-close-to-the-seasonal-norm', 5758), ('less-extreme-temperatures', 5759)])
    Temperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< TrafficConditions >-----#
    TrafficConditions = INT(name='TrafficConditions', mode=MODE_TYPE)
    TrafficConditions._cont = ASN1Dict([('stopped-traffic', 257), ('stop-and-go-traffic', 258), ('slow-traffic', 259), ('heavy-traffic', 260), ('traffic-building', 261), ('long-queues', 262), ('traffic-congestion', 263), ('traffic-lighter-than-normal', 264), ('traffic-heavier-than-normal', 265), ('traffic-much-heavier-than-normal', 266), ('current-speed', 267), ('speed-limit', 268), ('travel-time', 269), ('merging-traffic', 272), ('contraflow', 273), ('contraflow-canceled', 378), ('traffic-flowing-freely', 379), ('traffic-easing', 380), ('traffic-returned-to-normal', 381), ('no-problems-to-report', 382), ('traffic-congestion-cleared', 383)])
    TrafficConditions._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< TransitMode >-----#
    TransitMode = INT(name='TransitMode', mode=MODE_TYPE)
    TransitMode._cont = ASN1Dict([('travel', 8961), ('transit', 8962), ('bus', 8963), ('trolleybus', 8964), ('rail', 8965), ('commuter-rail', 8966), ('subway', 8967), ('rapid-transit', 8968), ('light-rail', 8969), ('streetcar', 8970), ('dial-a-ride', 8971), ('park-and-ride', 8972), ('shuttle', 8973), ('free-shuttle', 8974), ('airport-shuttle', 8975), ('taxies', 8976), ('ferry', 8977), ('passenger-ferry', 8978), ('vehicle-ferry', 8979), ('aerial-tramway', 8980), ('automated-guideway', 8981), ('cable-cars', 8982), ('monorail', 8983), ('air-travel', 8984), ('hitch-hitching', 8985), ('walk', 8986)])
    TransitMode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< TransitOperations >-----#
    TransitOperations = INT(name='TransitOperations', mode=MODE_TYPE)
    TransitOperations._cont = ASN1Dict([('unknown-transit-problem', 10753), ('sleeping-customer', 10754), ('assault-on-passenger', 10755), ('assault-on-employee', 10756), ('broken-seat', 10757), ('bus-alarm', 10758), ('crime-or-drug-deal', 10759), ('eating-on-board', 10760), ('equipment-problem-with-air-conditioning', 10761), ('equipment-problem-with-air-system', 10762), ('equipment-problem-with-brakes', 10763), ('equipment-problem-with-chassis-or-suspension', 10764), ('equipment-problem-with-cooling-system', 10765), ('equipment-problem-with-doors', 10766), ('equipment-problem-with-electrical', 10767), ('equipment-problem-with-engine', 10768), ('equipment-problem-with-exterior-or-body', 10769), ('equipment-problem-with-fare-collection', 10770), ('equipment-problem-with-fuel-or-exhaust', 10771), ('equipment-problem-with-horn', 10772), ('equipment-problem-with-interior', 10773), ('equipment-problem-with-liftkneeling', 10774), ('equipment-problem-with-lights', 10775), ('equipment-problem-with-lubrication', 10776), ('equipment-problem-with-radio-or-communication', 10777), ('equipment-problem-with-signs', 10778), ('equipment-problem-with-steering', 10779), ('equipment-problem-with-tires', 10780), ('equipment-problem-with-transmission', 10781), ('equipment-problem-with-unknown-alarm', 10782), ('equipment-problem-with-wipers', 10783), ('fare-dispute-expired-pass', 10784), ('fare-dispute-expired-transfer', 10785), ('fare-dispute-expired-upgrade', 10786), ('fare-dispute-other', 10787), ('fare-dispute-refuses-to-pay', 10788), ('lift-passenger-cycle-completed', 10789), ('lift-passenger-ready-to-alight', 10790), ('lift-passenger-ready-to-board', 10791), ('lost-article', 10792), ('objects-thrown', 10793), ('passenger-accident-alighting', 10794), ('passenger-accident-boarding', 10795), ('passenger-accident-fallen-on-board', 10796), ('passenger-load', 10797), ('passenger-accident-other', 10798), ('passenger-sick-or-injured', 10799), ('right-of-way', 10800), ('theft', 10801), ('theft-of-service', 10802), ('waiting-to-get-relief-for-schedule-break', 10803), ('waiting-to-get-relief-after-run-is-finished', 10804), ('waiting-to-provide-relief', 10805)])
    TransitOperations._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< TravelerGroupAffected >-----#
    TravelerGroupAffected = INT(name='TravelerGroupAffected', mode=MODE_TYPE)
    TravelerGroupAffected._cont = ASN1Dict([('through-traffic', 9473), ('holiday-traffic', 9474), ('residents', 9475), ('visitors', 9476), ('long-distance-traffic', 9477), ('local-traffic', 9478), ('regional-traffic', 9479), ('arrivals', 9480), ('departures', 9481), ('airline-travelers', 9482), ('commuter-airline-travelers', 9483), ('domestic-airline-travelers', 9484), ('international-airline-travelers', 9485), ('pedestrians', 9486), ('bicyclists', 9487)])
    TravelerGroupAffected._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Units >-----#
    Units = INT(name='Units', mode=MODE_TYPE)
    Units._cont = ASN1Dict([('square-feet', 8705), ('square-meters', 8706), ('acres', 8707), ('hectares', 8708), ('inches', 8709), ('feet', 8710), ('mile', 8711), ('miles', 8712), ('nautical-miles', 8713), ('millimeters', 8714), ('meters', 8715), ('kilometer', 8716), ('kilometers', 8717), ('feet-per-second', 8718), ('meters-per-second', 8719), ('mPH', 8720), ('kPH', 8721), ('knots', 8722), ('elevation', 8766), ('aM', 8723), ('pM', 8724), ('holiday', 8726), ('seconds', 8727), ('minutes', 8728), ('hours', 8729), ('days', 8730), ('weeks', 8731), ('months', 8732), ('other-times', 8767), ('nSunday', 8758), ('nMonday', 8759), ('nTuesday', 8760), ('nWednesday', 8761), ('nThursday', 8762), ('nFriday', 8763), ('nSaturday', 8764), ('weekdays', 8765), ('weekends', 8725), ('degrees-Angle', 8733), ('degrees-Celsius', 8734), ('degrees-Fahrenheit', 8735), ('grams', 8736), ('kilograms', 8737), ('ounces', 8738), ('pounds', 8739), ('tons', 8740), ('fluid-ounces', 8741), ('gallons', 8742), ('milliliters', 8743), ('liters', 8744), ('kilograms-per-lane-mile', 8745), ('tons-per-lane-mile', 8746), ('dollar', 8747), ('percent', 8748), ('grade', 8757), ('time-delimiter', 8749), ('dollars', 8750), ('flight-number', 8751), ('person-people', 8752), ('response-plan', 8753), ('placard-type', 8754), ('placard-number', 8755), ('fM', 8756)])
    Units._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< UnusualDriving >-----#
    UnusualDriving = INT(name='UnusualDriving', mode=MODE_TYPE)
    UnusualDriving._cont = ASN1Dict([('vehicle-traveling-wrong-way', 1793), ('reckless-driver', 1794), ('prohibited-vehicle-on-roadway', 1795), ('emergency-vehicles-on-roadway', 1796), ('high-speed-emergency-vehicles', 1797), ('high-speed-chase', 1798), ('dangerous-vehicle-warning-cleared', 1918), ('emergency-vehicle-warning-cleared', 1919)])
    UnusualDriving._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ValidManeuvers >-----#
    ValidManeuvers = INT(name='ValidManeuvers', mode=MODE_TYPE)
    ValidManeuvers._cont = ASN1Dict([('prohibit-None-Allowed-LU-LT-L45-S-R45-RT-RU', 11264), ('prohibit-RU-Allowed-LU-LT-L45-S-R45-RT', 11265), ('prohibit-RT-Allowed-LU-LT-L45-S-R45-RU', 11266), ('prohibit-RT-RU-Allowed-LU-LT-L45-S-R45', 11267), ('prohibit-R45-Allowed-LU-LT-L45-S-RT-RU', 11268), ('prohibit-R45-RU-Allowed-LU-LT-L45-S-RT', 11269), ('prohibit-R45-RT-Allowed-LU-LT-L45-S-RU', 11270), ('prohibit-R45-RT-RU-Allowed-LU-LT-L45-S', 11271), ('prohibit-S-Allowed-LU-LT-L45-R45-RT-RU', 11272), ('prohibit-S-RU-Allowed-LU-LT-L45-R45-RT', 11273), ('prohibit-S-RT-Allowed-LU-LT-L45-R45-RU', 11274), ('prohibit-S-RT-RU-Allowed-LU-LT-L45-R45', 11275), ('prohibit-S-R45-Allowed-LU-LT-L45-RT-RU', 11276), ('prohibit-S-R45-RU-Allowed-LU-LT-L45-RT', 11277), ('prohibit-S-R45-RT-Allowed-LU-LT-L45-RU', 11278), ('prohibit-S-R45-RT-RU-Allowed-LU-LT-L45', 11279), ('prohibit-L45-Allowed-LU-LT-S-R45-RT-RU', 11280), ('prohibit-L45-RU-Allowed-LU-LT-S-R45-RT', 11281), ('prohibit-L45-RT-Allowed-LU-LT-S-R45-RU', 11282), ('prohibit-L45-RT-RU-Allowed-LU-LT-S-R45', 11283), ('prohibit-L45-R45-Allowed-LU-LT-S-RT-RU', 11284), ('prohibit-L45-R45-RU-Allowed-LU-LT-S-RT', 11285), ('prohibit-L45-R45-RT-Allowed-LU-LT-S-RU', 11286), ('prohibit-L45-R45-RT-RU-Allowed-LU-LT-S', 11287), ('prohibit-L45-S-Allowed-LU-LT-R45-RT-RU', 11288), ('prohibit-L45-S-RU-Allowed-LU-LT-R45-RT', 11289), ('prohibit-L45-S-RT-Allowed-LU-LT-R45-RU', 11290), ('prohibit-L45-S-RT-RU-Allowed-LU-LT-R45', 11291), ('prohibit-L45-S-R45-Allowed-LU-LT-RT-RU', 11292), ('prohibit-L45-S-R45-RU-Allowed-LU-LT-RT', 11293), ('prohibit-L45-S-R45-RT-Allowed-LU-LT-RU', 11294), ('prohibit-L45-S-R45-RT-RU-Allowed-LU-LT', 11295), ('prohibit-LT-Allowed-LU-L45-S-R45-RT-RU', 11296), ('prohibit-LT-RU-Allowed-LU-L45-S-R45-RT', 11297), ('prohibit-LT-RT-Allowed-LU-L45-S-R45-RU', 11298), ('prohibit-LT-RT-RU-Allowed-LU-L45-S-R45', 11299), ('prohibit-LT-R45-Allowed-LU-L45-S-RT-RU', 11300), ('prohibit-LT-R45-RU-Allowed-LU-L45-S-RT', 11301), ('prohibit-LT-R45-RT-Allowed-LU-L45-S-RU', 11302), ('prohibit-LT-R45-RT-RU-Allowed-LU-L45-S', 11303), ('prohibit-LT-S-Allowed-LU-L45-R45-RT-RU', 11304), ('prohibit-LT-S-RU-Allowed-LU-L45-R45-RT', 11305), ('prohibit-LT-S-RT-Allowed-LU-L45-R45-RU', 11306), ('prohibit-LT-S-RT-RU-Allowed-LU-L45-R45', 11307), ('prohibit-LT-S-R45-Allowed-LU-L45-RT-RU', 11308), ('prohibit-LT-S-R45-RU-Allowed-LU-L45-RT', 11309), ('prohibit-LT-S-R45-RT-Allowed-LU-L45-RU', 11310), ('prohibit-LT-S-R45-RT-RU-Allowed-LU-L45', 11311), ('prohibit-LT-L45-Allowed-LU-S-R45-RT-RU', 11312), ('prohibit-LT-L45-RU-Allowed-LU-S-R45-RT', 11313), ('prohibit-LT-L45-RT-Allowed-LU-S-R45-RU', 11314), ('prohibit-LT-L45-RT-RU-Allowed-LU-S-R45', 11315), ('prohibit-LT-L45-R45-Allowed-LU-S-RT-RU', 11316), ('prohibit-LT-L45-R45-RU-Allowed-LU-S-RT', 11317), ('prohibit-LT-L45-R45-RT-Allowed-LU-S-RU', 11318), ('prohibit-LT-L45-R45-RT-RU-Allowed-LU-S', 11319), ('prohibit-LT-L45-S-Allowed-LU-R45-RT-RU', 11320), ('prohibit-LT-L45-S-RU-Allowed-LU-R45-RT', 11321), ('prohibit-LT-L45-S-RT-Allowed-LU-R45-RU', 11322), ('prohibit-LT-L45-S-RT-RU-Allowed-LU-R45', 11323), ('prohibit-LT-L45-S-R45-Allowed-LU-RT-RU', 11324), ('prohibit-LT-L45-S-R45-RU-Allowed-LU-RT', 11325), ('prohibit-LT-L45-S-R45-RT-Allowed-LU-RU', 11326), ('prohibit-LT-L45-S-R45-RT-RU-Allowed-LU', 11327), ('prohibit-LU-Allowed-LT-L45-S-R45-RT-RU', 11328), ('prohibit-LU-RU-Allowed-LT-L45-S-R45-RT', 11329), ('prohibit-LU-RT-Allowed-LT-L45-S-R45-RU', 11330), ('prohibit-LU-RT-RU-Allowed-LT-L45-S-R45', 11331), ('prohibit-LU-R45-Allowed-LT-L45-S-RT-RU', 11332), ('prohibit-LU-R45-RU-Allowed-LT-L45-S-RT', 11333), ('prohibit-LU-R45-RT-Allowed-LT-L45-S-RU', 11334), ('prohibit-LU-R45-RT-RU-Allowed-LT-L45-S', 11335), ('prohibit-LU-S-Allowed-LT-L45-R45-RT-RU', 11336), ('prohibit-LU-S-RU-Allowed-LT-L45-R45-RT', 11337), ('prohibit-LU-S-RT-Allowed-LT-L45-R45-RU', 11338), ('prohibit-LU-S-RT-RU-Allowed-LT-L45-R45', 11339), ('prohibit-LU-S-R45-Allowed-LT-L45-RT-RU', 11340), ('prohibit-LU-S-R45-RU-Allowed-LT-L45-RT', 11341), ('prohibit-LU-S-R45-RT-Allowed-LT-L45-RU', 11342), ('prohibit-LU-S-R45-RT-RU-Allowed-LT-L45', 11343), ('prohibit-LU-L45-Allowed-LT-S-R45-RT-RU', 11344), ('prohibit-LU-L45-RU-Allowed-LT-S-R45-RT', 11345), ('prohibit-LU-L45-RT-Allowed-LT-S-R45-RU', 11346), ('prohibit-LU-L45-RT-RU-Allowed-LT-S-R45', 11347), ('prohibit-LU-L45-R45-Allowed-LT-S-RT-RU', 11348), ('prohibit-LU-L45-R45-RU-Allowed-LT-S-RT', 11349), ('prohibit-LU-L45-R45-RT-Allowed-LT-S-RU', 11350), ('prohibit-LU-L45-R45-RT-RU-Allowed-LT-S', 11351), ('prohibit-LU-L45-S-Allowed-LT-R45-RT-RU', 11352), ('prohibit-LU-L45-S-RU-Allowed-LT-R45-RT', 11353), ('prohibit-LU-L45-S-RT-Allowed-LT-R45-RU', 11354), ('prohibit-LU-L45-S-RT-RU-Allowed-LT-R45', 11355), ('prohibit-LU-L45-S-R45-Allowed-LT-RT-RU', 11356), ('prohibit-LU-L45-S-R45-RU-Allowed-LT-RT', 11357), ('prohibit-LU-L45-S-R45-RT-Allowed-LT-RU', 11358), ('prohibit-LU-L45-S-R45-RT-RU-Allowed-LT', 11359), ('prohibit-LU-LT-Allowed-L45-S-R45-RT-RU', 11360), ('prohibit-LU-LT-RU-Allowed-L45-S-R45-RT', 11361), ('prohibit-LU-LT-RT-Allowed-L45-S-R45-RU', 11362), ('prohibit-LU-LT-RT-RU-Allowed-L45-S-R45', 11363), ('prohibit-LU-LT-R45-Allowed-L45-S-RT-RU', 11364), ('prohibit-LU-LT-R45-RU-Allowed-L45-S-RT', 11365), ('prohibit-LU-LT-R45-RT-Allowed-L45-S-RU', 11366), ('prohibit-LU-LT-R45-RT-RU-Allowed-L45-S', 11367), ('prohibit-LU-LT-S-Allowed-L45-R45-RT-RU', 11368), ('prohibit-LU-LT-S-RU-Allowed-L45-R45-RT', 11369), ('prohibit-LU-LT-S-RT-Allowed-L45-R45-RU', 11370), ('prohibit-LU-LT-S-RT-RU-Allowed-L45-R45', 11371), ('prohibit-LU-LT-S-R45-Allowed-L45-RT-RU', 11372), ('prohibit-LU-LT-S-R45-RU-Allowed-L45-RT', 11373), ('prohibit-LU-LT-S-R45-RT-Allowed-L45-RU', 11374), ('prohibit-LU-LT-S-R45-RT-RU-Allowed-L45', 11375), ('prohibit-LU-LT-L45-Allowed-S-R45-RT-RU', 11376), ('prohibit-LU-LT-L45-RU-Allowed-S-R45-RT', 11377), ('prohibit-LU-LT-L45-RT-Allowed-S-R45-RU', 11378), ('prohibit-LU-LT-L45-RT-RU-Allowed-S-R45', 11379), ('prohibit-LU-LT-L45-R45-Allowed-S-RT-RU', 11380), ('prohibit-LU-LT-L45-R45-RU-Allowed-S-RT', 11381), ('prohibit-LU-LT-L45-R45-RT-Allowed-S-RU', 11382), ('prohibit-LU-LT-L45-R45-RT-RU-Allowed-S', 11383), ('prohibit-LU-LT-L45-S-Allowed-R45-RT-RU', 11384), ('prohibit-LU-LT-L45-S-RU-Allowed-R45-RT', 11385), ('prohibit-LU-LT-L45-S-RT-Allowed-R45-RU', 11386), ('prohibit-LU-LT-L45-S-RT-RU-Allowed-R45', 11387), ('prohibit-LU-LT-L45-S-R45-Allowed-RT-RU', 11388), ('prohibit-LU-LT-L45-S-R45-RU-Allowed-RT', 11389), ('prohibit-LU-LT-L45-S-R45-RT-Allowed-RU', 11390), ('prohibit-LU-LT-L45-S-R45-RT-RU-Allowed-None', 11391)])
    ValidManeuvers._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< VehicleGroupAffected >-----#
    VehicleGroupAffected = INT(name='VehicleGroupAffected', mode=MODE_TYPE)
    VehicleGroupAffected._cont = ASN1Dict([('all-vehicles', 9217), ('bicycles', 9218), ('motorcycles', 9219), ('cars', 9220), ('light-vehicles', 9221), ('cars-and-light-vehicles', 9222), ('cars-with-trailers', 9223), ('cars-with-recreational-trailers', 9224), ('vehicles-with-trailers', 9225), ('heavy-vehicles', 9226), ('trucks', 9227), ('buses', 9228), ('articulated-buses', 9229), ('school-buses', 9230), ('vehicles-with-semi-trailers', 9231), ('vehicles-with-double-trailers', 9232), ('high-profile-vehicles', 9233), ('wide-vehicles', 9234), ('long-vehicles', 9235), ('hazardous-loads', 9236), ('exceptional-loads', 9237), ('abnormal-loads', 9238), ('convoys', 9239), ('maintenance-vehicles', 9240), ('delivery-vehicles', 9241), ('vehicles-with-even-numbered-license-plates', 9242), ('vehicles-with-odd-numbered-license-plates', 9243), ('vehicles-with-parking-permits', 9244), ('vehicles-with-catalytic-converters', 9245), ('vehicles-without-catalytic-converters', 9246), ('gas-powered-vehicles', 9247), ('diesel-powered-vehicles', 9248), ('lPG-vehicles', 9249), ('military-convoys', 9250), ('military-vehicles', 9251), ('electric-powered-vehicles', 9252), ('hybrid-powered-vehicles', 9253), ('inherently-low-emission-vehicles', 9254), ('commercial-vehicles', 9255), ('runaway-vehicles', 9256), ('vehicles-with-lugs', 9257), ('motor-driven-cycles', 9258), ('recreational-vehicles', 9259), ('non-motorized-vehicles', 9260), ('traffic', 9261)])
    VehicleGroupAffected._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< VisibilityAndAirQuality >-----#
    VisibilityAndAirQuality = INT(name='VisibilityAndAirQuality', mode=MODE_TYPE)
    VisibilityAndAirQuality._cont = ASN1Dict([('dense-fog', 5377), ('fog', 5378), ('patchy-fog', 5379), ('freezing-fog', 5380), ('ice-fog', 5405), ('mist', 5381), ('haze', 5382), ('visibility-reduced', 5383), ('visibility-blocked', 5404), ('white-out', 5384), ('blowing-snow', 5385), ('smoke-hazard', 5386), ('spray-hazard', 5387), ('low-sun-glare', 5388), ('snow-glare', 5389), ('blowing-dust', 5390), ('blowing-sand', 5391), ('dust-storms', 5392), ('sandstorms', 5393), ('air-quality-good', 5394), ('air-quality-fair', 5395), ('air-quality-poor', 5396), ('air-quality-very-poor', 5397), ('severe-exhaust-pollution', 5398), ('smog-alert', 5399), ('pollen-count-high', 5400), ('pollen-count-medium', 5401), ('pollen-count-low', 5402), ('swarms-of-insects', 5403), ('fog-clearing', 5499), ('visibility-improved', 5500), ('fog-forecast-withdrawn', 5501), ('pollution-alert-ended', 5502), ('air-quality-improved', 5503)])
    VisibilityAndAirQuality._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< WarningAdvice >-----#
    WarningAdvice = INT(name='WarningAdvice', mode=MODE_TYPE)
    WarningAdvice._cont = ASN1Dict([('risk', 6913), ('watch', 6914), ('warning', 6915), ('alert', 6916), ('danger', 6917), ('danger-of-explosion', 6918), ('danger-of-fire', 6919), ('extra-police-patrols-in-operation', 6920), ('look-out-for-vehicles-stopped-under-bridges', 6921), ('increased-risk-of-accident', 6922), ('rescue-and-recovery-work-in-progress-at-sceneREMOVED', 6923), ('police-at-scene', 6924), ('emergency-vehicles-at-scene', 6925), ('traffic-being-directed-around-accident-area', 6926), ('police-directing-traffic', 6927), ('rescue-workers-directing-traffic', 6928), ('repairs-in-progress', 6929), ('pilot-car-in-operation', 6930), ('look-out-for-flagger', 6931), ('look-out-for-workers', 6952), ('police-checks-in-operation', 6932), ('truck-check-point', 6937), ('lockdown', 6935), ('security-check-point', 6936), ('single-occupancy-vehicle-check-point', 6938), ('mandatory-speed-limit-in-force', 6933), ('speed-limit-in-force-for-heavy-vehicles', 6934), ('behind-you', 6950), ('ride-with-traffic', 6953), ('prepare-to-evacuate-area', 6954), ('avoid', 6955), ('look', 6939), ('photo-enforced', 6940), ('traffic-signs', 6951), ('traffic-laws', 6941), ('use-low-gear', 6942), ('bridge-ices-before-road', 6943), ('speed-checked-by-radar', 6944), ('speed-checked-by-aircraft', 6945), ('fines', 6946), ('fines-higher', 6947), ('fines-doubled', 6948), ('fines-tripled', 6949), ('evacuation-canceled', 7033), ('warning-canceled', 7034), ('watch-canceled', 7035), ('alert-canceled', 7036), ('ended', 7037), ('cleared', 7038), ('canceled', 7039)])
    WarningAdvice._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< WeatherConditions >-----#
    WeatherConditions = INT(name='WeatherConditions', mode=MODE_TYPE)
    WeatherConditions._cont = ASN1Dict([('overcast', 4609), ('cloudy', 4610), ('mostly-cloudy', 4611), ('partly-cloudy', 4612), ('partly-sunny', 4613), ('mostly-sunny', 4614), ('sunny', 4615), ('fair-skies', 4616), ('clear-skies', 4617), ('mostly-clear', 4618), ('mostly-dry', 4619), ('dry', 4620), ('uV-index-very-high', 4621), ('uV-index-high', 4622), ('uV-index-moderate', 4623), ('uV-index-low', 4624), ('uV-index-very-low', 4625), ('barometric-pressure', 4626), ('ozone-alert', 4627), ('lighting-unknown', 4628), ('artificial-exterior-light', 4629), ('artificial-interior-light', 4630), ('darkness', 4631), ('dusk', 4632), ('dawn', 4633), ('moonlight', 4634), ('daylight', 4635), ('weather-forecast-withdrawn', 4735)])
    WeatherConditions._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Winds >-----#
    Winds = INT(name='Winds', mode=MODE_TYPE)
    Winds._cont = ASN1Dict([('tornado', 5121), ('hurricane', 5122), ('hurricane-force-winds', 5123), ('tropical-storm', 5124), ('gale-force-winds', 5125), ('storm-force-winds', 5126), ('strong-winds', 5127), ('moderate-winds', 5128), ('light-winds', 5129), ('calm', 5130), ('gusty-winds', 5131), ('crosswinds', 5132), ('windy', 5133), ('strong-winds-have-eased', 5246), ('strong-wind-forecast-withdrawn', 5247)])
    Winds._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< WinterDrivingIndex >-----#
    WinterDrivingIndex = INT(name='WinterDrivingIndex', mode=MODE_TYPE)
    WinterDrivingIndex._cont = ASN1Dict([('driving-conditions-good', 6401), ('driving-conditions-fair', 6402), ('difficult-driving-conditions', 6403), ('very-difficult-driving-conditions', 6404), ('hazardous-driving-conditions', 6405), ('extremely-hazardous-driving-conditions', 6406)])
    WinterDrivingIndex._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< WinterDrivingRestrictions >-----#
    WinterDrivingRestrictions = INT(name='WinterDrivingRestrictions', mode=MODE_TYPE)
    WinterDrivingRestrictions._cont = ASN1Dict([('winter-equipment-recommended', 6145), ('winter-equipment-required', 6146), ('snow-chains-recommended', 6147), ('snow-chains-required', 6148), ('snow-chains-prohibited', 6149), ('studded-tires-prohibited', 6150), ('snow-tires-recommended', 6151), ('snow-tires-required', 6152), ('four-wheel-drive-recommended', 6153), ('four-wheel-drive-required', 6154), ('snow-tires-or-chains-recommended', 6155), ('snow-tires-or-chains-required', 6156), ('winter-driving-requirements-lifted', 6271)])
    WinterDrivingRestrictions._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ITISEventType >-----#
    ITISEventType = CHOICE(name='ITISEventType', mode=MODE_TYPE)
    _ITISEventType_trafficConditions = INT(name='trafficConditions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'TrafficConditions')))
    _ITISEventType_accidentsAndIncidents = INT(name='accidentsAndIncidents', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'AccidentsAndIncidents')))
    _ITISEventType_closures = INT(name='closures', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Closures')))
    _ITISEventType_roadwork = INT(name='roadwork', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Roadwork')))
    _ITISEventType_obstruction = INT(name='obstruction', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Obstruction')))
    _ITISEventType_delayStatusCancellation = INT(name='delayStatusCancellation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'DelayStatusCancellation')))
    _ITISEventType_unusualDriving = INT(name='unusualDriving', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'UnusualDriving')))
    _ITISEventType_mobileSituation = INT(name='mobileSituation', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'MobileSituation')))
    _ITISEventType_deviceStatus = INT(name='deviceStatus', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'DeviceStatus')))
    _ITISEventType_restrictionClass = INT(name='restrictionClass', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'RestrictionClass')))
    _ITISEventType_incidentResponseStatus = INT(name='incidentResponseStatus', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'IncidentResponseStatus')))
    _ITISEventType_disasters = INT(name='disasters', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Disasters')))
    _ITISEventType_disturbances = INT(name='disturbances', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Disturbances')))
    _ITISEventType_sportingEvents = INT(name='sportingEvents', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'SportingEvents')))
    _ITISEventType_specialEvents = INT(name='specialEvents', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'SpecialEvents')))
    _ITISEventType_parkingInformation = INT(name='parkingInformation', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'ParkingInformation')))
    _ITISEventType_systemInformation = INT(name='systemInformation', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'SystemInformation')))
    _ITISEventType_weatherConditions = INT(name='weatherConditions', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'WeatherConditions')))
    _ITISEventType_precipitation = INT(name='precipitation', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Precipitation')))
    _ITISEventType_winds = INT(name='winds', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Winds')))
    _ITISEventType_visibilityAndAirQuality = INT(name='visibilityAndAirQuality', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'VisibilityAndAirQuality')))
    _ITISEventType_temperature = INT(name='temperature', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'Temperature')))
    _ITISEventType_pavementConditions = INT(name='pavementConditions', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'PavementConditions')))
    _ITISEventType_winterDrivingRestrictions = INT(name='winterDrivingRestrictions', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'WinterDrivingRestrictions')))
    _ITISEventType_winterDrivingIndex = INT(name='winterDrivingIndex', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'WinterDrivingIndex')))
    _ITISEventType_suggestionAdvice = INT(name='suggestionAdvice', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'SuggestionAdvice')))
    _ITISEventType_warningAdvice = INT(name='warningAdvice', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'WarningAdvice')))
    _ITISEventType_adviceInstructionsRecommendations = INT(name='adviceInstructionsRecommendations', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'AdviceInstructionsRecommendations')))
    _ITISEventType_adviceInstructionsMandatory = INT(name='adviceInstructionsMandatory', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'AdviceInstructionsMandatory')))
    _ITISEventType_laneRoadway = INT(name='laneRoadway', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'LaneRoadway')))
    _ITISEventType_alternateRoute = INT(name='alternateRoute', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'AlternateRoute')))
    _ITISEventType_transitMode = INT(name='transitMode', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'TransitMode')))
    _ITISEventType_vehicleGroupAffected = INT(name='vehicleGroupAffected', mode=MODE_TYPE, tag=(32, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'VehicleGroupAffected')))
    _ITISEventType_travelerGroupAffected = INT(name='travelerGroupAffected', mode=MODE_TYPE, tag=(33, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'TravelerGroupAffected')))
    _ITISEventType_responderGroupAffected = INT(name='responderGroupAffected', mode=MODE_TYPE, tag=(34, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'ResponderGroupAffected')))
    _ITISEventType_incidentResponseEquipment = INT(name='incidentResponseEquipment', mode=MODE_TYPE, tag=(35, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'IncidentResponseEquipment')))
    _ITISEventType_transitOperations = INT(name='transitOperations', mode=MODE_TYPE, tag=(36, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'TransitOperations')))
    _ITISEventType_regulatorySigns = INT(name='regulatorySigns', mode=MODE_TYPE, tag=(37, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'RegulatoryAndWarningSigns')))
    ITISEventType._cont = ASN1Dict([
        ('trafficConditions', _ITISEventType_trafficConditions),
        ('accidentsAndIncidents', _ITISEventType_accidentsAndIncidents),
        ('closures', _ITISEventType_closures),
        ('roadwork', _ITISEventType_roadwork),
        ('obstruction', _ITISEventType_obstruction),
        ('delayStatusCancellation', _ITISEventType_delayStatusCancellation),
        ('unusualDriving', _ITISEventType_unusualDriving),
        ('mobileSituation', _ITISEventType_mobileSituation),
        ('deviceStatus', _ITISEventType_deviceStatus),
        ('restrictionClass', _ITISEventType_restrictionClass),
        ('incidentResponseStatus', _ITISEventType_incidentResponseStatus),
        ('disasters', _ITISEventType_disasters),
        ('disturbances', _ITISEventType_disturbances),
        ('sportingEvents', _ITISEventType_sportingEvents),
        ('specialEvents', _ITISEventType_specialEvents),
        ('parkingInformation', _ITISEventType_parkingInformation),
        ('systemInformation', _ITISEventType_systemInformation),
        ('weatherConditions', _ITISEventType_weatherConditions),
        ('precipitation', _ITISEventType_precipitation),
        ('winds', _ITISEventType_winds),
        ('visibilityAndAirQuality', _ITISEventType_visibilityAndAirQuality),
        ('temperature', _ITISEventType_temperature),
        ('pavementConditions', _ITISEventType_pavementConditions),
        ('winterDrivingRestrictions', _ITISEventType_winterDrivingRestrictions),
        ('winterDrivingIndex', _ITISEventType_winterDrivingIndex),
        ('suggestionAdvice', _ITISEventType_suggestionAdvice),
        ('warningAdvice', _ITISEventType_warningAdvice),
        ('adviceInstructionsRecommendations', _ITISEventType_adviceInstructionsRecommendations),
        ('adviceInstructionsMandatory', _ITISEventType_adviceInstructionsMandatory),
        ('laneRoadway', _ITISEventType_laneRoadway),
        ('alternateRoute', _ITISEventType_alternateRoute),
        ('transitMode', _ITISEventType_transitMode),
        ('vehicleGroupAffected', _ITISEventType_vehicleGroupAffected),
        ('travelerGroupAffected', _ITISEventType_travelerGroupAffected),
        ('responderGroupAffected', _ITISEventType_responderGroupAffected),
        ('incidentResponseEquipment', _ITISEventType_incidentResponseEquipment),
        ('transitOperations', _ITISEventType_transitOperations),
        ('regulatorySigns', _ITISEventType_regulatorySigns),
        ])
    ITISEventType._ext = None
    
    #-----< ITIScodesAndText >-----#
    ITIScodesAndText = SEQ_OF(name='ITIScodesAndText', mode=MODE_TYPE)
    _ITIScodesAndText__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __ITIScodesAndText__item__item = CHOICE(name='item', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___ITIScodesAndText__item__item_itis = INT(name='itis', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'ITIScodes')))
    ___ITIScodesAndText__item__item_text = STR_IA5(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'ITIStext')))
    __ITIScodesAndText__item__item._cont = ASN1Dict([
        ('itis', ___ITIScodesAndText__item__item_itis),
        ('text', ___ITIScodesAndText__item__item_text),
        ])
    __ITIScodesAndText__item__item._ext = None
    _ITIScodesAndText__item_._cont = ASN1Dict([
        ('item', __ITIScodesAndText__item__item),
        ])
    _ITIScodesAndText__item_._ext = None
    ITIScodesAndText._cont = _ITIScodesAndText__item_
    ITIScodesAndText._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    
    _all_ = [
        AccidentsAndIncidents,
        AlternateRoute,
        AssetStatus,
        Closures,
        DelayStatusCancellation,
        DeviceStatus,
        Disasters,
        Disturbances,
        GenericLocations,
        IncidentResponseEquipment,
        IncidentResponseStatus,
        SystemInformation,
        AdviceInstructionsMandatory,
        AdviceInstructionsRecommendations,
        ITIStext,
        ITISgroups,
        ITIScodes,
        LaneRoadway,
        LargeNumbers,
        MobileSituation,
        MUTCDLocations,
        NamedObjects,
        Objects,
        Obstruction,
        ParkingInformation,
        PavementConditions,
        Precipitation,
        Qualifiers,
        RecreationalObjectsAndActivities,
        RegulatoryAndWarningSigns,
        ResponderGroupAffected,
        RestrictionClass,
        RoadsideAssets,
        Roadwork,
        SmallNumbers,
        SpecialEvents,
        SportingEvents,
        StatesAndTerritories,
        StreetSuffixes,
        Structures,
        SuggestionAdvice,
        Temperature,
        TrafficConditions,
        TransitMode,
        TransitOperations,
        TravelerGroupAffected,
        Units,
        UnusualDriving,
        ValidManeuvers,
        VehicleGroupAffected,
        VisibilityAndAirQuality,
        WarningAdvice,
        WeatherConditions,
        Winds,
        WinterDrivingIndex,
        WinterDrivingRestrictions,
        _ITISEventType_trafficConditions,
        _ITISEventType_accidentsAndIncidents,
        _ITISEventType_closures,
        _ITISEventType_roadwork,
        _ITISEventType_obstruction,
        _ITISEventType_delayStatusCancellation,
        _ITISEventType_unusualDriving,
        _ITISEventType_mobileSituation,
        _ITISEventType_deviceStatus,
        _ITISEventType_restrictionClass,
        _ITISEventType_incidentResponseStatus,
        _ITISEventType_disasters,
        _ITISEventType_disturbances,
        _ITISEventType_sportingEvents,
        _ITISEventType_specialEvents,
        _ITISEventType_parkingInformation,
        _ITISEventType_systemInformation,
        _ITISEventType_weatherConditions,
        _ITISEventType_precipitation,
        _ITISEventType_winds,
        _ITISEventType_visibilityAndAirQuality,
        _ITISEventType_temperature,
        _ITISEventType_pavementConditions,
        _ITISEventType_winterDrivingRestrictions,
        _ITISEventType_winterDrivingIndex,
        _ITISEventType_suggestionAdvice,
        _ITISEventType_warningAdvice,
        _ITISEventType_adviceInstructionsRecommendations,
        _ITISEventType_adviceInstructionsMandatory,
        _ITISEventType_laneRoadway,
        _ITISEventType_alternateRoute,
        _ITISEventType_transitMode,
        _ITISEventType_vehicleGroupAffected,
        _ITISEventType_travelerGroupAffected,
        _ITISEventType_responderGroupAffected,
        _ITISEventType_incidentResponseEquipment,
        _ITISEventType_transitOperations,
        _ITISEventType_regulatorySigns,
        ITISEventType,
        ___ITIScodesAndText__item__item_itis,
        ___ITIScodesAndText__item__item_text,
        __ITIScodesAndText__item__item,
        _ITIScodesAndText__item_,
        ITIScodesAndText,
    ]

class AddGrpB:

    _name_  = 'AddGrpB'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 4, 1, 1]
    
    _obj_ = [
        'Angle',
        'Day',
        'DayOfWeek',
        'DegreesLat',
        'DegreesLong',
        'Elevation',
        'Holiday',
        'Hour',
        'LatitudeDMS',
        'LongitudeDMS',
        'MaxTimetoChange',
        'MinTimetoChange',
        'Minute',
        'MinutesAngle',
        'Month',
        'MsgCount',
        'Second',
        'SecondsAngle',
        'SummerTime',
        'TenthSecond',
        'TimeRemaining',
        'Year',
        'LatitudeDMS2',
        'LongitudeDMS2',
        'Node-LLdms-48b',
        'Node-LLdms-80b',
        'LaneDataAttribute-addGrpB',
        'MovementEvent-addGrpB',
        'NodeOffsetPointXY-addGrpB',
        'Position3D-addGrpB',
        'TimeMark',
        ]
    _type_ = [
        'Angle',
        'Day',
        'DayOfWeek',
        'DegreesLat',
        'DegreesLong',
        'Elevation',
        'Holiday',
        'Hour',
        'LatitudeDMS',
        'LongitudeDMS',
        'MaxTimetoChange',
        'MinTimetoChange',
        'Minute',
        'MinutesAngle',
        'Month',
        'MsgCount',
        'Second',
        'SecondsAngle',
        'SummerTime',
        'TenthSecond',
        'TimeRemaining',
        'Year',
        'LatitudeDMS2',
        'LongitudeDMS2',
        'Node-LLdms-48b',
        'Node-LLdms-80b',
        'LaneDataAttribute-addGrpB',
        'MovementEvent-addGrpB',
        'NodeOffsetPointXY-addGrpB',
        'Position3D-addGrpB',
        'TimeMark',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< Angle >-----#
    Angle = INT(name='Angle', mode=MODE_TYPE)
    Angle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=239)], ev=None, er=[])
    
    #-----< Day >-----#
    Day = INT(name='Day', mode=MODE_TYPE)
    Day._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DayOfWeek >-----#
    DayOfWeek = ENUM(name='DayOfWeek', mode=MODE_TYPE)
    DayOfWeek._cont = ASN1Dict([('unknown', 0), ('monday', 1), ('tuesday', 2), ('wednesday', 3), ('thursday', 4), ('friday', 5), ('saturday', 6), ('sunday', 7)])
    DayOfWeek._ext = None
    
    #-----< DegreesLat >-----#
    DegreesLat = INT(name='DegreesLat', mode=MODE_TYPE)
    DegreesLat._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-90, ub=90)], ev=None, er=[])
    
    #-----< DegreesLong >-----#
    DegreesLong = INT(name='DegreesLong', mode=MODE_TYPE)
    DegreesLong._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-180, ub=180)], ev=None, er=[])
    
    #-----< Elevation >-----#
    Elevation = INT(name='Elevation', mode=MODE_TYPE)
    Elevation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    
    #-----< Holiday >-----#
    Holiday = ENUM(name='Holiday', mode=MODE_TYPE)
    Holiday._cont = ASN1Dict([('weekday', 0), ('holiday', 1)])
    Holiday._ext = None
    
    #-----< Hour >-----#
    Hour = INT(name='Hour', mode=MODE_TYPE)
    Hour._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LatitudeDMS >-----#
    LatitudeDMS = INT(name='LatitudeDMS', mode=MODE_TYPE)
    LatitudeDMS._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32400000, ub=32400000)], ev=None, er=[])
    
    #-----< LongitudeDMS >-----#
    LongitudeDMS = INT(name='LongitudeDMS', mode=MODE_TYPE)
    LongitudeDMS._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-64800000, ub=64800000)], ev=None, er=[])
    
    #-----< MaxTimetoChange >-----#
    MaxTimetoChange = INT(name='MaxTimetoChange', mode=MODE_TYPE)
    MaxTimetoChange._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2402)], ev=None, er=[])
    
    #-----< MinTimetoChange >-----#
    MinTimetoChange = INT(name='MinTimetoChange', mode=MODE_TYPE)
    MinTimetoChange._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2402)], ev=None, er=[])
    
    #-----< Minute >-----#
    Minute = INT(name='Minute', mode=MODE_TYPE)
    Minute._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< MinutesAngle >-----#
    MinutesAngle = INT(name='MinutesAngle', mode=MODE_TYPE)
    MinutesAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=59)], ev=None, er=[])
    
    #-----< Month >-----#
    Month = INT(name='Month', mode=MODE_TYPE)
    Month._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< MsgCount >-----#
    MsgCount = INT(name='MsgCount', mode=MODE_TYPE)
    MsgCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Second >-----#
    Second = INT(name='Second', mode=MODE_TYPE)
    Second._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=60)], ev=None, er=[])
    
    #-----< SecondsAngle >-----#
    SecondsAngle = INT(name='SecondsAngle', mode=MODE_TYPE)
    SecondsAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=5999)], ev=None, er=[])
    
    #-----< SummerTime >-----#
    SummerTime = ENUM(name='SummerTime', mode=MODE_TYPE)
    SummerTime._cont = ASN1Dict([('notInSummerTime', 0), ('inSummerTime', 1)])
    SummerTime._ext = None
    
    #-----< TenthSecond >-----#
    TenthSecond = INT(name='TenthSecond', mode=MODE_TYPE)
    TenthSecond._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=9)], ev=None, er=[])
    
    #-----< TimeRemaining >-----#
    TimeRemaining = INT(name='TimeRemaining', mode=MODE_TYPE)
    TimeRemaining._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=9001)], ev=None, er=[])
    
    #-----< Year >-----#
    Year = INT(name='Year', mode=MODE_TYPE)
    Year._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65535)], ev=None, er=[])
    
    #-----< LatitudeDMS2 >-----#
    LatitudeDMS2 = SEQ(name='LatitudeDMS2', mode=MODE_TYPE)
    _LatitudeDMS2_d = INT(name='d', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'DegreesLat')))
    _LatitudeDMS2_m = INT(name='m', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'MinutesAngle')))
    _LatitudeDMS2_s = INT(name='s', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'SecondsAngle')))
    LatitudeDMS2._cont = ASN1Dict([
        ('d', _LatitudeDMS2_d),
        ('m', _LatitudeDMS2_m),
        ('s', _LatitudeDMS2_s),
        ])
    LatitudeDMS2._ext = None
    
    #-----< LongitudeDMS2 >-----#
    LongitudeDMS2 = SEQ(name='LongitudeDMS2', mode=MODE_TYPE)
    _LongitudeDMS2_d = INT(name='d', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'DegreesLong')))
    _LongitudeDMS2_m = INT(name='m', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'MinutesAngle')))
    _LongitudeDMS2_s = INT(name='s', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'SecondsAngle')))
    LongitudeDMS2._cont = ASN1Dict([
        ('d', _LongitudeDMS2_d),
        ('m', _LongitudeDMS2_m),
        ('s', _LongitudeDMS2_s),
        ])
    LongitudeDMS2._ext = None
    
    #-----< Node-LLdms-48b >-----#
    Node_LLdms_48b = SEQ(name='Node-LLdms-48b', mode=MODE_TYPE)
    _Node_LLdms_48b_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'LongitudeDMS')))
    _Node_LLdms_48b_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'LatitudeDMS')))
    Node_LLdms_48b._cont = ASN1Dict([
        ('lon', _Node_LLdms_48b_lon),
        ('lat', _Node_LLdms_48b_lat),
        ])
    Node_LLdms_48b._ext = None
    
    #-----< Node-LLdms-80b >-----#
    Node_LLdms_80b = SEQ(name='Node-LLdms-80b', mode=MODE_TYPE)
    _Node_LLdms_80b_lon = SEQ(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'LongitudeDMS2')))
    _Node_LLdms_80b_lat = SEQ(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'LatitudeDMS2')))
    Node_LLdms_80b._cont = ASN1Dict([
        ('lon', _Node_LLdms_80b_lon),
        ('lat', _Node_LLdms_80b_lat),
        ])
    Node_LLdms_80b._ext = None
    
    #-----< LaneDataAttribute-addGrpB >-----#
    LaneDataAttribute_addGrpB = SEQ(name='LaneDataAttribute-addGrpB', mode=MODE_TYPE)
    LaneDataAttribute_addGrpB._cont = ASN1Dict([
        ])
    LaneDataAttribute_addGrpB._ext = []
    
    #-----< MovementEvent-addGrpB >-----#
    MovementEvent_addGrpB = SEQ(name='MovementEvent-addGrpB', mode=MODE_TYPE)
    _MovementEvent_addGrpB_startTime = INT(name='startTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'TimeRemaining')), opt=True)
    _MovementEvent_addGrpB_minEndTime = INT(name='minEndTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'MinTimetoChange')))
    _MovementEvent_addGrpB_maxEndTime = INT(name='maxEndTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'MaxTimetoChange')), opt=True)
    _MovementEvent_addGrpB_likelyTime = INT(name='likelyTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'TimeRemaining')), opt=True)
    _MovementEvent_addGrpB_confidence = INT(name='confidence', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeIntervalConfidence')), opt=True)
    _MovementEvent_addGrpB_nextTime = INT(name='nextTime', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'TimeRemaining')), opt=True)
    MovementEvent_addGrpB._cont = ASN1Dict([
        ('startTime', _MovementEvent_addGrpB_startTime),
        ('minEndTime', _MovementEvent_addGrpB_minEndTime),
        ('maxEndTime', _MovementEvent_addGrpB_maxEndTime),
        ('likelyTime', _MovementEvent_addGrpB_likelyTime),
        ('confidence', _MovementEvent_addGrpB_confidence),
        ('nextTime', _MovementEvent_addGrpB_nextTime),
        ])
    MovementEvent_addGrpB._ext = []
    
    #-----< NodeOffsetPointXY-addGrpB >-----#
    NodeOffsetPointXY_addGrpB = CHOICE(name='NodeOffsetPointXY-addGrpB', mode=MODE_TYPE)
    _NodeOffsetPointXY_addGrpB_posA = SEQ(name='posA', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Node-LLdms-48b')))
    _NodeOffsetPointXY_addGrpB_posB = SEQ(name='posB', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Node-LLdms-80b')))
    NodeOffsetPointXY_addGrpB._cont = ASN1Dict([
        ('posA', _NodeOffsetPointXY_addGrpB_posA),
        ('posB', _NodeOffsetPointXY_addGrpB_posB),
        ])
    NodeOffsetPointXY_addGrpB._ext = []
    
    #-----< Position3D-addGrpB >-----#
    Position3D_addGrpB = SEQ(name='Position3D-addGrpB', mode=MODE_TYPE)
    _Position3D_addGrpB_latitude = SEQ(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'LatitudeDMS2')))
    _Position3D_addGrpB_longitude = SEQ(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'LongitudeDMS2')))
    _Position3D_addGrpB_elevation = INT(name='elevation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Elevation')))
    Position3D_addGrpB._cont = ASN1Dict([
        ('latitude', _Position3D_addGrpB_latitude),
        ('longitude', _Position3D_addGrpB_longitude),
        ('elevation', _Position3D_addGrpB_elevation),
        ])
    Position3D_addGrpB._ext = []
    
    #-----< TimeMark >-----#
    TimeMark = SEQ(name='TimeMark', mode=MODE_TYPE)
    _TimeMark_year = INT(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Year')))
    _TimeMark_month = INT(name='month', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Month')))
    _TimeMark_day = INT(name='day', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Day')))
    _TimeMark_summerTime = ENUM(name='summerTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'SummerTime')))
    _TimeMark_holiday = ENUM(name='holiday', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Holiday')))
    _TimeMark_dayofWeek = ENUM(name='dayofWeek', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'DayOfWeek')))
    _TimeMark_hour = INT(name='hour', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Hour')))
    _TimeMark_minute = INT(name='minute', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Minute')))
    _TimeMark_second = INT(name='second', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'Second')))
    _TimeMark_tenthSecond = INT(name='tenthSecond', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpB', 'TenthSecond')))
    TimeMark._cont = ASN1Dict([
        ('year', _TimeMark_year),
        ('month', _TimeMark_month),
        ('day', _TimeMark_day),
        ('summerTime', _TimeMark_summerTime),
        ('holiday', _TimeMark_holiday),
        ('dayofWeek', _TimeMark_dayofWeek),
        ('hour', _TimeMark_hour),
        ('minute', _TimeMark_minute),
        ('second', _TimeMark_second),
        ('tenthSecond', _TimeMark_tenthSecond),
        ])
    TimeMark._ext = None
    
    _all_ = [
        Angle,
        Day,
        DayOfWeek,
        DegreesLat,
        DegreesLong,
        Elevation,
        Holiday,
        Hour,
        LatitudeDMS,
        LongitudeDMS,
        MaxTimetoChange,
        MinTimetoChange,
        Minute,
        MinutesAngle,
        Month,
        MsgCount,
        Second,
        SecondsAngle,
        SummerTime,
        TenthSecond,
        TimeRemaining,
        Year,
        _LatitudeDMS2_d,
        _LatitudeDMS2_m,
        _LatitudeDMS2_s,
        LatitudeDMS2,
        _LongitudeDMS2_d,
        _LongitudeDMS2_m,
        _LongitudeDMS2_s,
        LongitudeDMS2,
        _Node_LLdms_48b_lon,
        _Node_LLdms_48b_lat,
        Node_LLdms_48b,
        _Node_LLdms_80b_lon,
        _Node_LLdms_80b_lat,
        Node_LLdms_80b,
        LaneDataAttribute_addGrpB,
        _MovementEvent_addGrpB_startTime,
        _MovementEvent_addGrpB_minEndTime,
        _MovementEvent_addGrpB_maxEndTime,
        _MovementEvent_addGrpB_likelyTime,
        _MovementEvent_addGrpB_confidence,
        _MovementEvent_addGrpB_nextTime,
        MovementEvent_addGrpB,
        _NodeOffsetPointXY_addGrpB_posA,
        _NodeOffsetPointXY_addGrpB_posB,
        NodeOffsetPointXY_addGrpB,
        _Position3D_addGrpB_latitude,
        _Position3D_addGrpB_longitude,
        _Position3D_addGrpB_elevation,
        Position3D_addGrpB,
        _TimeMark_year,
        _TimeMark_month,
        _TimeMark_day,
        _TimeMark_summerTime,
        _TimeMark_holiday,
        _TimeMark_dayofWeek,
        _TimeMark_hour,
        _TimeMark_minute,
        _TimeMark_second,
        _TimeMark_tenthSecond,
        TimeMark,
    ]

class AddGrpC:

    _name_  = 'AddGrpC'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 3, 1, 1]
    
    _obj_ = [
        'AltitudeConfidence',
        'AltitudeValue',
        'EmissionType',
        'Altitude',
        'PrioritizationResponse',
        'PrioritizationResponseList',
        'ConnectionManeuverAssist-addGrpC',
        'IntersectionState-addGrpC',
        'MapData-addGrpC',
        'Position3D-addGrpC',
        'RestrictionUserType-addGrpC',
        'SignalHeadLocation',
        'SignalHeadLocationList',
        'VehicleToLanePosition',
        'VehicleToLanePositionList',
        ]
    _type_ = [
        'AltitudeConfidence',
        'AltitudeValue',
        'EmissionType',
        'Altitude',
        'PrioritizationResponse',
        'PrioritizationResponseList',
        'ConnectionManeuverAssist-addGrpC',
        'IntersectionState-addGrpC',
        'MapData-addGrpC',
        'Position3D-addGrpC',
        'RestrictionUserType-addGrpC',
        'SignalHeadLocation',
        'SignalHeadLocationList',
        'VehicleToLanePosition',
        'VehicleToLanePositionList',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< AltitudeConfidence >-----#
    AltitudeConfidence = ENUM(name='AltitudeConfidence', mode=MODE_TYPE)
    AltitudeConfidence._cont = ASN1Dict([('alt-000-01', 0), ('alt-000-02', 1), ('alt-000-05', 2), ('alt-000-10', 3), ('alt-000-20', 4), ('alt-000-50', 5), ('alt-001-00', 6), ('alt-002-00', 7), ('alt-005-00', 8), ('alt-010-00', 9), ('alt-020-00', 10), ('alt-050-00', 11), ('alt-100-00', 12), ('alt-200-00', 13), ('outOfRange', 14), ('unavailable', 15)])
    AltitudeConfidence._ext = None
    
    #-----< AltitudeValue >-----#
    AltitudeValue = INT(name='AltitudeValue', mode=MODE_TYPE)
    AltitudeValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-100000, ub=800001)], ev=None, er=[])
    
    #-----< EmissionType >-----#
    EmissionType = ENUM(name='EmissionType', mode=MODE_TYPE)
    EmissionType._cont = ASN1Dict([('typeA', 0), ('typeB', 1), ('typeC', 2), ('typeD', 3), ('typeE', 4)])
    EmissionType._ext = []
    
    #-----< Altitude >-----#
    Altitude = SEQ(name='Altitude', mode=MODE_TYPE)
    _Altitude_value = INT(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'AltitudeValue')))
    _Altitude_confidence = ENUM(name='confidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'AltitudeConfidence')))
    Altitude._cont = ASN1Dict([
        ('value', _Altitude_value),
        ('confidence', _Altitude_confidence),
        ])
    Altitude._ext = None
    
    #-----< PrioritizationResponse >-----#
    PrioritizationResponse = SEQ(name='PrioritizationResponse', mode=MODE_TYPE)
    _PrioritizationResponse_stationID = INT(name='stationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'StationID')))
    _PrioritizationResponse_priorState = ENUM(name='priorState', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PrioritizationResponseStatus')))
    _PrioritizationResponse_signalGroup = INT(name='signalGroup', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SignalGroupID')))
    PrioritizationResponse._cont = ASN1Dict([
        ('stationID', _PrioritizationResponse_stationID),
        ('priorState', _PrioritizationResponse_priorState),
        ('signalGroup', _PrioritizationResponse_signalGroup),
        ])
    PrioritizationResponse._ext = []
    
    #-----< PrioritizationResponseList >-----#
    PrioritizationResponseList = SEQ_OF(name='PrioritizationResponseList', mode=MODE_TYPE)
    _PrioritizationResponseList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'PrioritizationResponse')))
    PrioritizationResponseList._cont = _PrioritizationResponseList__item_
    PrioritizationResponseList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    
    #-----< ConnectionManeuverAssist-addGrpC >-----#
    ConnectionManeuverAssist_addGrpC = SEQ(name='ConnectionManeuverAssist-addGrpC', mode=MODE_TYPE)
    _ConnectionManeuverAssist_addGrpC_vehicleToLanePositions = SEQ_OF(name='vehicleToLanePositions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'VehicleToLanePositionList')))
    _ConnectionManeuverAssist_addGrpC_rsuDistanceFromAnchor = CHOICE(name='rsuDistanceFromAnchor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'NodeOffsetPointXY')), opt=True)
    ConnectionManeuverAssist_addGrpC._cont = ASN1Dict([
        ('vehicleToLanePositions', _ConnectionManeuverAssist_addGrpC_vehicleToLanePositions),
        ('rsuDistanceFromAnchor', _ConnectionManeuverAssist_addGrpC_rsuDistanceFromAnchor),
        ])
    ConnectionManeuverAssist_addGrpC._ext = None
    
    #-----< IntersectionState-addGrpC >-----#
    IntersectionState_addGrpC = SEQ(name='IntersectionState-addGrpC', mode=MODE_TYPE)
    _IntersectionState_addGrpC_activePrioritizations = SEQ_OF(name='activePrioritizations', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'PrioritizationResponseList')), opt=True)
    IntersectionState_addGrpC._cont = ASN1Dict([
        ('activePrioritizations', _IntersectionState_addGrpC_activePrioritizations),
        ])
    IntersectionState_addGrpC._ext = []
    
    #-----< MapData-addGrpC >-----#
    MapData_addGrpC = SEQ(name='MapData-addGrpC', mode=MODE_TYPE)
    _MapData_addGrpC_signalHeadLocations = SEQ_OF(name='signalHeadLocations', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'SignalHeadLocationList')), opt=True)
    MapData_addGrpC._cont = ASN1Dict([
        ('signalHeadLocations', _MapData_addGrpC_signalHeadLocations),
        ])
    MapData_addGrpC._ext = []
    
    #-----< Position3D-addGrpC >-----#
    Position3D_addGrpC = SEQ(name='Position3D-addGrpC', mode=MODE_TYPE)
    _Position3D_addGrpC_altitude = SEQ(name='altitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'Altitude')))
    Position3D_addGrpC._cont = ASN1Dict([
        ('altitude', _Position3D_addGrpC_altitude),
        ])
    Position3D_addGrpC._ext = []
    
    #-----< RestrictionUserType-addGrpC >-----#
    RestrictionUserType_addGrpC = SEQ(name='RestrictionUserType-addGrpC', mode=MODE_TYPE)
    _RestrictionUserType_addGrpC_emission = ENUM(name='emission', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'EmissionType')), opt=True)
    RestrictionUserType_addGrpC._cont = ASN1Dict([
        ('emission', _RestrictionUserType_addGrpC_emission),
        ])
    RestrictionUserType_addGrpC._ext = []
    
    #-----< SignalHeadLocation >-----#
    SignalHeadLocation = SEQ(name='SignalHeadLocation', mode=MODE_TYPE)
    _SignalHeadLocation_node = CHOICE(name='node', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'NodeOffsetPointXY')))
    _SignalHeadLocation_signalGroupID = INT(name='signalGroupID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SignalGroupID')))
    SignalHeadLocation._cont = ASN1Dict([
        ('node', _SignalHeadLocation_node),
        ('signalGroupID', _SignalHeadLocation_signalGroupID),
        ])
    SignalHeadLocation._ext = []
    
    #-----< SignalHeadLocationList >-----#
    SignalHeadLocationList = SEQ_OF(name='SignalHeadLocationList', mode=MODE_TYPE)
    _SignalHeadLocationList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'SignalHeadLocation')))
    SignalHeadLocationList._cont = _SignalHeadLocationList__item_
    SignalHeadLocationList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< VehicleToLanePosition >-----#
    VehicleToLanePosition = SEQ(name='VehicleToLanePosition', mode=MODE_TYPE)
    _VehicleToLanePosition_stationID = INT(name='stationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'StationID')))
    _VehicleToLanePosition_laneID = INT(name='laneID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')))
    VehicleToLanePosition._cont = ASN1Dict([
        ('stationID', _VehicleToLanePosition_stationID),
        ('laneID', _VehicleToLanePosition_laneID),
        ])
    VehicleToLanePosition._ext = []
    
    #-----< VehicleToLanePositionList >-----#
    VehicleToLanePositionList = SEQ_OF(name='VehicleToLanePositionList', mode=MODE_TYPE)
    _VehicleToLanePositionList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'VehicleToLanePosition')))
    VehicleToLanePositionList._cont = _VehicleToLanePositionList__item_
    VehicleToLanePositionList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    
    _all_ = [
        AltitudeConfidence,
        AltitudeValue,
        EmissionType,
        _Altitude_value,
        _Altitude_confidence,
        Altitude,
        _PrioritizationResponse_stationID,
        _PrioritizationResponse_priorState,
        _PrioritizationResponse_signalGroup,
        PrioritizationResponse,
        _PrioritizationResponseList__item_,
        PrioritizationResponseList,
        _ConnectionManeuverAssist_addGrpC_vehicleToLanePositions,
        _ConnectionManeuverAssist_addGrpC_rsuDistanceFromAnchor,
        ConnectionManeuverAssist_addGrpC,
        _IntersectionState_addGrpC_activePrioritizations,
        IntersectionState_addGrpC,
        _MapData_addGrpC_signalHeadLocations,
        MapData_addGrpC,
        _Position3D_addGrpC_altitude,
        Position3D_addGrpC,
        _RestrictionUserType_addGrpC_emission,
        RestrictionUserType_addGrpC,
        _SignalHeadLocation_node,
        _SignalHeadLocation_signalGroupID,
        SignalHeadLocation,
        _SignalHeadLocationList__item_,
        SignalHeadLocationList,
        _VehicleToLanePosition_stationID,
        _VehicleToLanePosition_laneID,
        VehicleToLanePosition,
        _VehicleToLanePositionList__item_,
        VehicleToLanePositionList,
    ]

class BasicSafetyMessage:

    _name_  = 'BasicSafetyMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 7, 1, 1]
    
    _obj_ = [
        'BasicSafetyMessage',
        'PARTII-EXT-ID-AND-TYPE',
        'PartIIcontent',
        'PartII-Id',
        'vehicleSafetyExt',
        'specialVehicleExt',
        'supplementalVehicleExt',
        'BSMpartIIExtension',
        'DisabledVehicle',
        'EventDescription',
        'ObstacleDetection',
        'PivotPointDescription',
        'RTCMPackage',
        'SpecialVehicleExtensions',
        'SpeedProfileMeasurementList',
        'SpeedProfile',
        'SupplementalVehicleExtensions',
        'TrailerData',
        'TrailerHistoryPointList',
        'TrailerHistoryPoint',
        'TrailerUnitDescriptionList',
        'TrailerUnitDescription',
        'VehicleData',
        'WeatherProbe',
        'WeatherReport',
        'IsDolly',
        'ObstacleDirection',
        'PivotingAllowed',
        'SpeedProfileMeasurement',
        'TrailerMass',
        'VertOffset-B07',
        ]
    _type_ = [
        'BasicSafetyMessage',
        'PARTII-EXT-ID-AND-TYPE',
        'PartIIcontent',
        'PartII-Id',
        'DisabledVehicle',
        'EventDescription',
        'ObstacleDetection',
        'PivotPointDescription',
        'RTCMPackage',
        'SpecialVehicleExtensions',
        'SpeedProfileMeasurementList',
        'SpeedProfile',
        'SupplementalVehicleExtensions',
        'TrailerData',
        'TrailerHistoryPointList',
        'TrailerHistoryPoint',
        'TrailerUnitDescriptionList',
        'TrailerUnitDescription',
        'VehicleData',
        'WeatherProbe',
        'WeatherReport',
        'IsDolly',
        'ObstacleDirection',
        'PivotingAllowed',
        'SpeedProfileMeasurement',
        'TrailerMass',
        'VertOffset-B07',
        ]
    _set_ = [
        'BSMpartIIExtension',
        ]
    _val_ = [
        'vehicleSafetyExt',
        'specialVehicleExt',
        'supplementalVehicleExt',
        ]
    _class_ = [
        'PARTII-EXT-ID-AND-TYPE',
        'BSMpartIIExtension',
        ]
    _param_ = [
        'PartIIcontent',
        ]
    
    #-----< BasicSafetyMessage >-----#
    BasicSafetyMessage = SEQ(name='BasicSafetyMessage', mode=MODE_TYPE)
    _BasicSafetyMessage_coreData = SEQ(name='coreData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BSMcoreData')))
    _BasicSafetyMessage_partII = SEQ_OF(name='partII', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __BasicSafetyMessage_partII__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'PartIIcontent')))
    ___BasicSafetyMessage_partII__item__partII_Id = INT(name='partII-Id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('BasicSafetyMessage', 'PARTII-EXT-ID-AND-TYPE'), ['id']))
    ____BasicSafetyMessage_partII__item__partII_Id_tab = CLASS(name='_tab_PARTII-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('BasicSafetyMessage', 'PARTII-EXT-ID-AND-TYPE')))
    _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'VehicleSafetyExtensions')))
    _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'SpecialVehicleExtensions')))
    _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'SupplementalVehicleExtensions')))
    ____BasicSafetyMessage_partII__item__partII_Id_tab._val = ASN1Set(rv=[dict([('Type', _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_0), ('id', 0)]), dict([('Type', _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_1), ('id', 1)]), dict([('Type', _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_2), ('id', 2)])], rr=[], ev=None, er=[])
    ___BasicSafetyMessage_partII__item__partII_Id._const_tab = ____BasicSafetyMessage_partII__item__partII_Id_tab
    ___BasicSafetyMessage_partII__item__partII_Id._const_tab_at = None
    ___BasicSafetyMessage_partII__item__partII_Id._const_tab_id = 'id'
    ___BasicSafetyMessage_partII__item__partII_Value = OPEN(name='partII-Value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('BasicSafetyMessage', 'PARTII-EXT-ID-AND-TYPE'), ['Type']))
    ___BasicSafetyMessage_partII__item__partII_Value._const_tab = ____BasicSafetyMessage_partII__item__partII_Id_tab
    ___BasicSafetyMessage_partII__item__partII_Value._const_tab_at = ('..', 'partII-Id')
    ___BasicSafetyMessage_partII__item__partII_Value._const_tab_id = 'Type'
    __BasicSafetyMessage_partII__item_._cont = ASN1Dict([
        ('partII-Id', ___BasicSafetyMessage_partII__item__partII_Id),
        ('partII-Value', ___BasicSafetyMessage_partII__item__partII_Value),
        ])
    __BasicSafetyMessage_partII__item_._ext = None
    _BasicSafetyMessage_partII._cont = __BasicSafetyMessage_partII__item_
    _BasicSafetyMessage_partII._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _BasicSafetyMessage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __BasicSafetyMessage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___BasicSafetyMessage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____BasicSafetyMessage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____BasicSafetyMessage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___BasicSafetyMessage_regional__item__regionId._const_tab = ____BasicSafetyMessage_regional__item__regionId_tab
    ___BasicSafetyMessage_regional__item__regionId._const_tab_at = None
    ___BasicSafetyMessage_regional__item__regionId._const_tab_id = 'id'
    ___BasicSafetyMessage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____BasicSafetyMessage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____BasicSafetyMessage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___BasicSafetyMessage_regional__item__regExtValue._const_tab = ____BasicSafetyMessage_regional__item__regExtValue_tab
    ___BasicSafetyMessage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___BasicSafetyMessage_regional__item__regExtValue._const_tab_id = 'Type'
    __BasicSafetyMessage_regional__item_._cont = ASN1Dict([
        ('regionId', ___BasicSafetyMessage_regional__item__regionId),
        ('regExtValue', ___BasicSafetyMessage_regional__item__regExtValue),
        ])
    __BasicSafetyMessage_regional__item_._ext = None
    _BasicSafetyMessage_regional._cont = __BasicSafetyMessage_regional__item_
    _BasicSafetyMessage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    BasicSafetyMessage._cont = ASN1Dict([
        ('coreData', _BasicSafetyMessage_coreData),
        ('partII', _BasicSafetyMessage_partII),
        ('regional', _BasicSafetyMessage_regional),
        ])
    BasicSafetyMessage._ext = []
    
    #-----< PARTII-EXT-ID-AND-TYPE >-----#
    PARTII_EXT_ID_AND_TYPE = CLASS(name='PARTII-EXT-ID-AND-TYPE', mode=MODE_TYPE)
    _PARTII_EXT_ID_AND_TYPE_id = INT(name='id', mode=MODE_VALUE, typeref=ASN1RefType(('BasicSafetyMessage', 'PartII-Id')), uniq=True)
    _PARTII_EXT_ID_AND_TYPE_Type = OPEN(name='Type', mode=MODE_TYPE)
    PARTII_EXT_ID_AND_TYPE._cont = ASN1Dict([
        ('id', _PARTII_EXT_ID_AND_TYPE_id),
        ('Type', _PARTII_EXT_ID_AND_TYPE_Type),
        ])
    
    #-----< PartIIcontent >-----#
    PartIIcontent = SEQ(name='PartIIcontent', mode=MODE_TYPE, param=True)
    
    #-----< PartII-Id >-----#
    PartII_Id = INT(name='PartII-Id', mode=MODE_TYPE)
    PartII_Id._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=63)], ev=None, er=[])
    
    #-----< vehicleSafetyExt >-----#
    vehicleSafetyExt = INT(name='vehicleSafetyExt', mode=MODE_VALUE, typeref=ASN1RefType(('BasicSafetyMessage', 'PartII-Id')))
    vehicleSafetyExt._val = 0
    
    #-----< specialVehicleExt >-----#
    specialVehicleExt = INT(name='specialVehicleExt', mode=MODE_VALUE, typeref=ASN1RefType(('BasicSafetyMessage', 'PartII-Id')))
    specialVehicleExt._val = 1
    
    #-----< supplementalVehicleExt >-----#
    supplementalVehicleExt = INT(name='supplementalVehicleExt', mode=MODE_VALUE, typeref=ASN1RefType(('BasicSafetyMessage', 'PartII-Id')))
    supplementalVehicleExt._val = 2
    
    #-----< BSMpartIIExtension >-----#
    BSMpartIIExtension = CLASS(name='BSMpartIIExtension', mode=MODE_SET, typeref=ASN1RefType(('BasicSafetyMessage', 'PARTII-EXT-ID-AND-TYPE')))
    _BSMpartIIExtension_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'VehicleSafetyExtensions')))
    _BSMpartIIExtension_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'SpecialVehicleExtensions')))
    _BSMpartIIExtension_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'SupplementalVehicleExtensions')))
    BSMpartIIExtension._val = ASN1Set(rv=[dict([('Type', _BSMpartIIExtension_val_Type_0), ('id', 0)]), dict([('Type', _BSMpartIIExtension_val_Type_1), ('id', 1)]), dict([('Type', _BSMpartIIExtension_val_Type_2), ('id', 2)])], rr=[], ev=[], er=[])
    
    #-----< DisabledVehicle >-----#
    DisabledVehicle = SEQ(name='DisabledVehicle', mode=MODE_TYPE)
    _DisabledVehicle_statusDetails = INT(name='statusDetails', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    _DisabledVehicle_statusDetails._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=523, ub=541)], ev=None, er=[])
    _DisabledVehicle_locationDetails = ENUM(name='locationDetails', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'GenericLocations')), opt=True)
    DisabledVehicle._cont = ASN1Dict([
        ('statusDetails', _DisabledVehicle_statusDetails),
        ('locationDetails', _DisabledVehicle_locationDetails),
        ])
    DisabledVehicle._ext = []
    
    #-----< EventDescription >-----#
    EventDescription = SEQ(name='EventDescription', mode=MODE_TYPE)
    _EventDescription_typeEvent = INT(name='typeEvent', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    _EventDescription_description = SEQ_OF(name='description', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __EventDescription_description__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    _EventDescription_description._cont = __EventDescription_description__item_
    _EventDescription_description._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _EventDescription_priority = OCT_STR(name='priority', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Priority')), opt=True)
    _EventDescription_heading = BIT_STR(name='heading', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingSlice')), opt=True)
    _EventDescription_extent = ENUM(name='extent', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Extent')), opt=True)
    _EventDescription_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __EventDescription_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___EventDescription_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____EventDescription_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____EventDescription_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___EventDescription_regional__item__regionId._const_tab = ____EventDescription_regional__item__regionId_tab
    ___EventDescription_regional__item__regionId._const_tab_at = None
    ___EventDescription_regional__item__regionId._const_tab_id = 'id'
    ___EventDescription_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____EventDescription_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____EventDescription_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___EventDescription_regional__item__regExtValue._const_tab = ____EventDescription_regional__item__regExtValue_tab
    ___EventDescription_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___EventDescription_regional__item__regExtValue._const_tab_id = 'Type'
    __EventDescription_regional__item_._cont = ASN1Dict([
        ('regionId', ___EventDescription_regional__item__regionId),
        ('regExtValue', ___EventDescription_regional__item__regExtValue),
        ])
    __EventDescription_regional__item_._ext = None
    _EventDescription_regional._cont = __EventDescription_regional__item_
    _EventDescription_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    EventDescription._cont = ASN1Dict([
        ('typeEvent', _EventDescription_typeEvent),
        ('description', _EventDescription_description),
        ('priority', _EventDescription_priority),
        ('heading', _EventDescription_heading),
        ('extent', _EventDescription_extent),
        ('regional', _EventDescription_regional),
        ])
    EventDescription._ext = []
    
    #-----< ObstacleDetection >-----#
    ObstacleDetection = SEQ(name='ObstacleDetection', mode=MODE_TYPE)
    _ObstacleDetection_obDist = INT(name='obDist', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ObstacleDistance')))
    _ObstacleDetection_obDirect = INT(name='obDirect', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'ObstacleDirection')))
    _ObstacleDetection_description = INT(name='description', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')), opt=True)
    _ObstacleDetection_description._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=523, ub=541)], ev=None, er=[])
    _ObstacleDetection_locationDetails = ENUM(name='locationDetails', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'GenericLocations')), opt=True)
    _ObstacleDetection_dateTime = SEQ(name='dateTime', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ObstacleDetection_vertEvent = BIT_STR(name='vertEvent', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VerticalAccelerationThreshold')), opt=True)
    ObstacleDetection._cont = ASN1Dict([
        ('obDist', _ObstacleDetection_obDist),
        ('obDirect', _ObstacleDetection_obDirect),
        ('description', _ObstacleDetection_description),
        ('locationDetails', _ObstacleDetection_locationDetails),
        ('dateTime', _ObstacleDetection_dateTime),
        ('vertEvent', _ObstacleDetection_vertEvent),
        ])
    ObstacleDetection._ext = []
    
    #-----< PivotPointDescription >-----#
    PivotPointDescription = SEQ(name='PivotPointDescription', mode=MODE_TYPE)
    _PivotPointDescription_pivotOffset = INT(name='pivotOffset', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B11')))
    _PivotPointDescription_pivotAngle = INT(name='pivotAngle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Angle')))
    _PivotPointDescription_pivots = BOOL(name='pivots', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'PivotingAllowed')))
    PivotPointDescription._cont = ASN1Dict([
        ('pivotOffset', _PivotPointDescription_pivotOffset),
        ('pivotAngle', _PivotPointDescription_pivotAngle),
        ('pivots', _PivotPointDescription_pivots),
        ])
    PivotPointDescription._ext = []
    
    #-----< RTCMPackage >-----#
    RTCMPackage = SEQ(name='RTCMPackage', mode=MODE_TYPE)
    _RTCMPackage_rtcmHeader = SEQ(name='rtcmHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RTCMheader')), opt=True)
    _RTCMPackage_msgs = SEQ_OF(name='msgs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RTCMmessageList')))
    RTCMPackage._cont = ASN1Dict([
        ('rtcmHeader', _RTCMPackage_rtcmHeader),
        ('msgs', _RTCMPackage_msgs),
        ])
    RTCMPackage._ext = []
    
    #-----< SpecialVehicleExtensions >-----#
    SpecialVehicleExtensions = SEQ(name='SpecialVehicleExtensions', mode=MODE_TYPE)
    _SpecialVehicleExtensions_vehicleAlerts = SEQ(name='vehicleAlerts', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'EmergencyDetails')), opt=True)
    _SpecialVehicleExtensions_description = SEQ(name='description', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'EventDescription')), opt=True)
    _SpecialVehicleExtensions_doNotUse = SEQ(name='doNotUse', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'TrailerData')), opt=True)
    SpecialVehicleExtensions._cont = ASN1Dict([
        ('vehicleAlerts', _SpecialVehicleExtensions_vehicleAlerts),
        ('description', _SpecialVehicleExtensions_description),
        ('doNotUse', _SpecialVehicleExtensions_doNotUse),
        ])
    SpecialVehicleExtensions._ext = []
    
    #-----< SpeedProfileMeasurementList >-----#
    SpeedProfileMeasurementList = SEQ_OF(name='SpeedProfileMeasurementList', mode=MODE_TYPE)
    _SpeedProfileMeasurementList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'SpeedProfileMeasurement')))
    SpeedProfileMeasurementList._cont = _SpeedProfileMeasurementList__item_
    SpeedProfileMeasurementList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< SpeedProfile >-----#
    SpeedProfile = SEQ(name='SpeedProfile', mode=MODE_TYPE)
    _SpeedProfile_speedReports = SEQ_OF(name='speedReports', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'SpeedProfileMeasurementList')))
    SpeedProfile._cont = ASN1Dict([
        ('speedReports', _SpeedProfile_speedReports),
        ])
    SpeedProfile._ext = []
    
    #-----< SupplementalVehicleExtensions >-----#
    SupplementalVehicleExtensions = SEQ(name='SupplementalVehicleExtensions', mode=MODE_TYPE)
    _SupplementalVehicleExtensions_classification = INT(name='classification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BasicVehicleClass')), opt=True)
    _SupplementalVehicleExtensions_classDetails = SEQ(name='classDetails', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleClassification')), opt=True)
    _SupplementalVehicleExtensions_vehicleData = SEQ(name='vehicleData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'VehicleData')), opt=True)
    _SupplementalVehicleExtensions_doNotUse1 = SEQ(name='doNotUse1', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'WeatherReport')), opt=True)
    _SupplementalVehicleExtensions_doNotUse2 = SEQ(name='doNotUse2', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'WeatherProbe')), opt=True)
    _SupplementalVehicleExtensions_doNotUse3 = SEQ(name='doNotUse3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'ObstacleDetection')), opt=True)
    _SupplementalVehicleExtensions_status = SEQ(name='status', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'DisabledVehicle')), opt=True)
    _SupplementalVehicleExtensions_doNotUse4 = SEQ(name='doNotUse4', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'SpeedProfile')), opt=True)
    _SupplementalVehicleExtensions_doNotUse5 = SEQ(name='doNotUse5', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'RTCMPackage')), opt=True)
    _SupplementalVehicleExtensions_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SupplementalVehicleExtensions_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SupplementalVehicleExtensions_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SupplementalVehicleExtensions_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SupplementalVehicleExtensions_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SupplementalVehicleExtensions_regional__item__regionId._const_tab = ____SupplementalVehicleExtensions_regional__item__regionId_tab
    ___SupplementalVehicleExtensions_regional__item__regionId._const_tab_at = None
    ___SupplementalVehicleExtensions_regional__item__regionId._const_tab_id = 'id'
    ___SupplementalVehicleExtensions_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SupplementalVehicleExtensions_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SupplementalVehicleExtensions_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SupplementalVehicleExtensions_regional__item__regExtValue._const_tab = ____SupplementalVehicleExtensions_regional__item__regExtValue_tab
    ___SupplementalVehicleExtensions_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SupplementalVehicleExtensions_regional__item__regExtValue._const_tab_id = 'Type'
    __SupplementalVehicleExtensions_regional__item_._cont = ASN1Dict([
        ('regionId', ___SupplementalVehicleExtensions_regional__item__regionId),
        ('regExtValue', ___SupplementalVehicleExtensions_regional__item__regExtValue),
        ])
    __SupplementalVehicleExtensions_regional__item_._ext = None
    _SupplementalVehicleExtensions_regional._cont = __SupplementalVehicleExtensions_regional__item_
    _SupplementalVehicleExtensions_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    _SupplementalVehicleExtensions_fhwaVehicleClass = ENUM(name='fhwaVehicleClass', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptVehicleClass')))
    _SupplementalVehicleExtensions_trailers = SEQ_OF(name='trailers', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TrailersJ2945Slash1B')), opt=True)
    _SupplementalVehicleExtensions_schoolBus = SEQ(name='schoolBus', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SchoolBusJ2945Slash1C')), opt=True)
    SupplementalVehicleExtensions._cont = ASN1Dict([
        ('classification', _SupplementalVehicleExtensions_classification),
        ('classDetails', _SupplementalVehicleExtensions_classDetails),
        ('vehicleData', _SupplementalVehicleExtensions_vehicleData),
        ('doNotUse1', _SupplementalVehicleExtensions_doNotUse1),
        ('doNotUse2', _SupplementalVehicleExtensions_doNotUse2),
        ('doNotUse3', _SupplementalVehicleExtensions_doNotUse3),
        ('status', _SupplementalVehicleExtensions_status),
        ('doNotUse4', _SupplementalVehicleExtensions_doNotUse4),
        ('doNotUse5', _SupplementalVehicleExtensions_doNotUse5),
        ('regional', _SupplementalVehicleExtensions_regional),
        ('fhwaVehicleClass', _SupplementalVehicleExtensions_fhwaVehicleClass),
        ('trailers', _SupplementalVehicleExtensions_trailers),
        ('schoolBus', _SupplementalVehicleExtensions_schoolBus),
        ])
    SupplementalVehicleExtensions._ext = ['fhwaVehicleClass', 'trailers', 'schoolBus']
    
    #-----< TrailerData >-----#
    TrailerData = SEQ(name='TrailerData', mode=MODE_TYPE)
    _TrailerData_doNotUse = INT(name='doNotUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SSPindex')))
    _TrailerData_connection = SEQ(name='connection', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'PivotPointDescription')))
    _TrailerData_units = SEQ_OF(name='units', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'TrailerUnitDescriptionList')))
    TrailerData._cont = ASN1Dict([
        ('doNotUse', _TrailerData_doNotUse),
        ('connection', _TrailerData_connection),
        ('units', _TrailerData_units),
        ])
    TrailerData._ext = []
    
    #-----< TrailerHistoryPointList >-----#
    TrailerHistoryPointList = SEQ_OF(name='TrailerHistoryPointList', mode=MODE_TYPE)
    _TrailerHistoryPointList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'TrailerHistoryPoint')))
    TrailerHistoryPointList._cont = _TrailerHistoryPointList__item_
    TrailerHistoryPointList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=23)], ev=None, er=[])
    
    #-----< TrailerHistoryPoint >-----#
    TrailerHistoryPoint = SEQ(name='TrailerHistoryPoint', mode=MODE_TYPE)
    _TrailerHistoryPoint_pivotAngle = INT(name='pivotAngle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Angle')))
    _TrailerHistoryPoint_timeOffset = INT(name='timeOffset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TimeOffset')))
    _TrailerHistoryPoint_positionOffset = SEQ(name='positionOffset', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-24b')))
    _TrailerHistoryPoint_elevationOffset = INT(name='elevationOffset', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'VertOffset-B07')), opt=True)
    _TrailerHistoryPoint_heading = INT(name='heading', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'CoarseHeading')), opt=True)
    TrailerHistoryPoint._cont = ASN1Dict([
        ('pivotAngle', _TrailerHistoryPoint_pivotAngle),
        ('timeOffset', _TrailerHistoryPoint_timeOffset),
        ('positionOffset', _TrailerHistoryPoint_positionOffset),
        ('elevationOffset', _TrailerHistoryPoint_elevationOffset),
        ('heading', _TrailerHistoryPoint_heading),
        ])
    TrailerHistoryPoint._ext = []
    
    #-----< TrailerUnitDescriptionList >-----#
    TrailerUnitDescriptionList = SEQ_OF(name='TrailerUnitDescriptionList', mode=MODE_TYPE)
    _TrailerUnitDescriptionList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'TrailerUnitDescription')))
    TrailerUnitDescriptionList._cont = _TrailerUnitDescriptionList__item_
    TrailerUnitDescriptionList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< TrailerUnitDescription >-----#
    TrailerUnitDescription = SEQ(name='TrailerUnitDescription', mode=MODE_TYPE)
    _TrailerUnitDescription_isDolly = BOOL(name='isDolly', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'IsDolly')))
    _TrailerUnitDescription_width = INT(name='width', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleWidth')))
    _TrailerUnitDescription_length = INT(name='length', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleLength')))
    _TrailerUnitDescription_height = INT(name='height', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleHeight')), opt=True)
    _TrailerUnitDescription_mass = INT(name='mass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'TrailerMass')), opt=True)
    _TrailerUnitDescription_bumperHeights = SEQ(name='bumperHeights', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BumperHeights')), opt=True)
    _TrailerUnitDescription_centerOfGravity = INT(name='centerOfGravity', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleHeight')), opt=True)
    _TrailerUnitDescription_frontPivot = SEQ(name='frontPivot', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'PivotPointDescription')))
    _TrailerUnitDescription_rearPivot = SEQ(name='rearPivot', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'PivotPointDescription')), opt=True)
    _TrailerUnitDescription_rearWheelOffset = INT(name='rearWheelOffset', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B12')), opt=True)
    _TrailerUnitDescription_positionOffset = SEQ(name='positionOffset', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-24b')))
    _TrailerUnitDescription_elevationOffset = INT(name='elevationOffset', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'VertOffset-B07')), opt=True)
    _TrailerUnitDescription_crumbData = SEQ_OF(name='crumbData', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'TrailerHistoryPointList')), opt=True)
    TrailerUnitDescription._cont = ASN1Dict([
        ('isDolly', _TrailerUnitDescription_isDolly),
        ('width', _TrailerUnitDescription_width),
        ('length', _TrailerUnitDescription_length),
        ('height', _TrailerUnitDescription_height),
        ('mass', _TrailerUnitDescription_mass),
        ('bumperHeights', _TrailerUnitDescription_bumperHeights),
        ('centerOfGravity', _TrailerUnitDescription_centerOfGravity),
        ('frontPivot', _TrailerUnitDescription_frontPivot),
        ('rearPivot', _TrailerUnitDescription_rearPivot),
        ('rearWheelOffset', _TrailerUnitDescription_rearWheelOffset),
        ('positionOffset', _TrailerUnitDescription_positionOffset),
        ('elevationOffset', _TrailerUnitDescription_elevationOffset),
        ('crumbData', _TrailerUnitDescription_crumbData),
        ])
    TrailerUnitDescription._ext = []
    
    #-----< VehicleData >-----#
    VehicleData = SEQ(name='VehicleData', mode=MODE_TYPE)
    _VehicleData_height = INT(name='height', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleHeight')), opt=True)
    _VehicleData_bumpers = SEQ(name='bumpers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BumperHeights')), opt=True)
    _VehicleData_mass = INT(name='mass', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleMass')), opt=True)
    _VehicleData_doNotUse = INT(name='doNotUse', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TrailerWeight')), opt=True)
    _VehicleData_trailerPresent = BOOL(name='trailerPresent', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleData_pivotPoint = SEQ(name='pivotPoint', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'PivotPointDescription')), opt=True)
    _VehicleData_axles = SEQ(name='axles', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Axles')), opt=True)
    _VehicleData_leanAngle = INT(name='leanAngle', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleData_leanAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-90, ub=90)], ev=None, er=[])
    VehicleData._cont = ASN1Dict([
        ('height', _VehicleData_height),
        ('bumpers', _VehicleData_bumpers),
        ('mass', _VehicleData_mass),
        ('doNotUse', _VehicleData_doNotUse),
        ('trailerPresent', _VehicleData_trailerPresent),
        ('pivotPoint', _VehicleData_pivotPoint),
        ('axles', _VehicleData_axles),
        ('leanAngle', _VehicleData_leanAngle),
        ])
    VehicleData._ext = ['trailerPresent', 'pivotPoint', 'axles', 'leanAngle']
    
    #-----< WeatherProbe >-----#
    WeatherProbe = SEQ(name='WeatherProbe', mode=MODE_TYPE)
    _WeatherProbe_airTemp = INT(name='airTemp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AmbientAirTemperature')), opt=True)
    _WeatherProbe_airPressure = INT(name='airPressure', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AmbientAirPressure')), opt=True)
    _WeatherProbe_rainRates = SEQ(name='rainRates', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'WiperSet')), opt=True)
    WeatherProbe._cont = ASN1Dict([
        ('airTemp', _WeatherProbe_airTemp),
        ('airPressure', _WeatherProbe_airPressure),
        ('rainRates', _WeatherProbe_rainRates),
        ])
    WeatherProbe._ext = []
    
    #-----< WeatherReport >-----#
    WeatherReport = SEQ(name='WeatherReport', mode=MODE_TYPE)
    _WeatherReport_isRaining = ENUM(name='isRaining', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssPrecipYesNo')))
    _WeatherReport_rainRate = INT(name='rainRate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssPrecipRate')), opt=True)
    _WeatherReport_precipSituation = ENUM(name='precipSituation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssPrecipSituation')), opt=True)
    _WeatherReport_solarRadiation = INT(name='solarRadiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssSolarRadiation')), opt=True)
    _WeatherReport_friction = INT(name='friction', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssMobileFriction')), opt=True)
    _WeatherReport_roadFriction = INT(name='roadFriction', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'CoefficientOfFriction')), opt=True)
    WeatherReport._cont = ASN1Dict([
        ('isRaining', _WeatherReport_isRaining),
        ('rainRate', _WeatherReport_rainRate),
        ('precipSituation', _WeatherReport_precipSituation),
        ('solarRadiation', _WeatherReport_solarRadiation),
        ('friction', _WeatherReport_friction),
        ('roadFriction', _WeatherReport_roadFriction),
        ])
    WeatherReport._ext = []
    
    #-----< IsDolly >-----#
    IsDolly = BOOL(name='IsDolly', mode=MODE_TYPE)
    
    #-----< ObstacleDirection >-----#
    ObstacleDirection = INT(name='ObstacleDirection', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'Angle')))
    
    #-----< PivotingAllowed >-----#
    PivotingAllowed = BOOL(name='PivotingAllowed', mode=MODE_TYPE)
    
    #-----< SpeedProfileMeasurement >-----#
    SpeedProfileMeasurement = INT(name='SpeedProfileMeasurement', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'GrossSpeed')))
    
    #-----< TrailerMass >-----#
    TrailerMass = INT(name='TrailerMass', mode=MODE_TYPE)
    TrailerMass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VertOffset-B07 >-----#
    VertOffset_B07 = INT(name='VertOffset-B07', mode=MODE_TYPE)
    VertOffset_B07._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-64, ub=63)], ev=None, er=[])
    
    _all_ = [
        _BasicSafetyMessage_coreData,
        ____BasicSafetyMessage_partII__item__partII_Id_tab,
        _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_0,
        _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_1,
        _____BasicSafetyMessage_partII__item__partII_Id_tab_val_Type_2,
        ___BasicSafetyMessage_partII__item__partII_Id,
        ___BasicSafetyMessage_partII__item__partII_Value,
        __BasicSafetyMessage_partII__item_,
        _BasicSafetyMessage_partII,
        ____BasicSafetyMessage_regional__item__regionId_tab,
        ___BasicSafetyMessage_regional__item__regionId,
        ____BasicSafetyMessage_regional__item__regExtValue_tab,
        ___BasicSafetyMessage_regional__item__regExtValue,
        __BasicSafetyMessage_regional__item_,
        _BasicSafetyMessage_regional,
        BasicSafetyMessage,
        _PARTII_EXT_ID_AND_TYPE_id,
        _PARTII_EXT_ID_AND_TYPE_Type,
        PARTII_EXT_ID_AND_TYPE,
        PartII_Id,
        vehicleSafetyExt,
        specialVehicleExt,
        supplementalVehicleExt,
        BSMpartIIExtension,
        _BSMpartIIExtension_val_Type_0,
        _BSMpartIIExtension_val_Type_1,
        _BSMpartIIExtension_val_Type_2,
        _DisabledVehicle_statusDetails,
        _DisabledVehicle_locationDetails,
        DisabledVehicle,
        _EventDescription_typeEvent,
        __EventDescription_description__item_,
        _EventDescription_description,
        _EventDescription_priority,
        _EventDescription_heading,
        _EventDescription_extent,
        ____EventDescription_regional__item__regionId_tab,
        ___EventDescription_regional__item__regionId,
        ____EventDescription_regional__item__regExtValue_tab,
        ___EventDescription_regional__item__regExtValue,
        __EventDescription_regional__item_,
        _EventDescription_regional,
        EventDescription,
        _ObstacleDetection_obDist,
        _ObstacleDetection_obDirect,
        _ObstacleDetection_description,
        _ObstacleDetection_locationDetails,
        _ObstacleDetection_dateTime,
        _ObstacleDetection_vertEvent,
        ObstacleDetection,
        _PivotPointDescription_pivotOffset,
        _PivotPointDescription_pivotAngle,
        _PivotPointDescription_pivots,
        PivotPointDescription,
        _RTCMPackage_rtcmHeader,
        _RTCMPackage_msgs,
        RTCMPackage,
        _SpecialVehicleExtensions_vehicleAlerts,
        _SpecialVehicleExtensions_description,
        _SpecialVehicleExtensions_doNotUse,
        SpecialVehicleExtensions,
        _SpeedProfileMeasurementList__item_,
        SpeedProfileMeasurementList,
        _SpeedProfile_speedReports,
        SpeedProfile,
        _SupplementalVehicleExtensions_classification,
        _SupplementalVehicleExtensions_classDetails,
        _SupplementalVehicleExtensions_vehicleData,
        _SupplementalVehicleExtensions_doNotUse1,
        _SupplementalVehicleExtensions_doNotUse2,
        _SupplementalVehicleExtensions_doNotUse3,
        _SupplementalVehicleExtensions_status,
        _SupplementalVehicleExtensions_doNotUse4,
        _SupplementalVehicleExtensions_doNotUse5,
        ____SupplementalVehicleExtensions_regional__item__regionId_tab,
        ___SupplementalVehicleExtensions_regional__item__regionId,
        ____SupplementalVehicleExtensions_regional__item__regExtValue_tab,
        ___SupplementalVehicleExtensions_regional__item__regExtValue,
        __SupplementalVehicleExtensions_regional__item_,
        _SupplementalVehicleExtensions_regional,
        _SupplementalVehicleExtensions_fhwaVehicleClass,
        _SupplementalVehicleExtensions_trailers,
        _SupplementalVehicleExtensions_schoolBus,
        SupplementalVehicleExtensions,
        _TrailerData_doNotUse,
        _TrailerData_connection,
        _TrailerData_units,
        TrailerData,
        _TrailerHistoryPointList__item_,
        TrailerHistoryPointList,
        _TrailerHistoryPoint_pivotAngle,
        _TrailerHistoryPoint_timeOffset,
        _TrailerHistoryPoint_positionOffset,
        _TrailerHistoryPoint_elevationOffset,
        _TrailerHistoryPoint_heading,
        TrailerHistoryPoint,
        _TrailerUnitDescriptionList__item_,
        TrailerUnitDescriptionList,
        _TrailerUnitDescription_isDolly,
        _TrailerUnitDescription_width,
        _TrailerUnitDescription_length,
        _TrailerUnitDescription_height,
        _TrailerUnitDescription_mass,
        _TrailerUnitDescription_bumperHeights,
        _TrailerUnitDescription_centerOfGravity,
        _TrailerUnitDescription_frontPivot,
        _TrailerUnitDescription_rearPivot,
        _TrailerUnitDescription_rearWheelOffset,
        _TrailerUnitDescription_positionOffset,
        _TrailerUnitDescription_elevationOffset,
        _TrailerUnitDescription_crumbData,
        TrailerUnitDescription,
        _VehicleData_height,
        _VehicleData_bumpers,
        _VehicleData_mass,
        _VehicleData_doNotUse,
        _VehicleData_trailerPresent,
        _VehicleData_pivotPoint,
        _VehicleData_axles,
        _VehicleData_leanAngle,
        VehicleData,
        _WeatherProbe_airTemp,
        _WeatherProbe_airPressure,
        _WeatherProbe_rainRates,
        WeatherProbe,
        _WeatherReport_isRaining,
        _WeatherReport_rainRate,
        _WeatherReport_precipSituation,
        _WeatherReport_solarRadiation,
        _WeatherReport_friction,
        _WeatherReport_roadFriction,
        WeatherReport,
        IsDolly,
        ObstacleDirection,
        PivotingAllowed,
        SpeedProfileMeasurement,
        TrailerMass,
        VertOffset_B07,
    ]

class Common:

    _name_  = 'Common'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 38, 1, 1]
    
    _obj_ = [
        'REG-EXT-ID-AND-TYPE',
        'RegionalExtension',
        'AccelerationSet4Way',
        'AntennaOffsetSet',
        'BrakeSystemStatus',
        'BSMcoreData',
        'BumperHeights',
        'ComputedLane',
        'DDate',
        'DDateTime',
        'DFullTime',
        'DMonthDay',
        'DTime',
        'DYearMonth',
        'EmergencyDetails',
        'FullPositionVector',
        'Header',
        'IntersectionAccessPoint',
        'IntersectionReferenceID',
        'LaneDataAttribute',
        'LaneDataAttributeList',
        'Node-LLmD-64b',
        'Node-XY-20b',
        'Node-XY-22b',
        'Node-XY-24b',
        'Node-XY-26b',
        'Node-XY-28b',
        'Node-XY-32b',
        'NodeAttributeSetXY',
        'NodeAttributeXYList',
        'NodeListXY',
        'NodeOffsetPointXY',
        'NodeSetXY',
        'NodeXY',
        'PathHistory',
        'PathHistoryPointList',
        'PathHistoryPoint',
        'PathPrediction',
        'Position3D',
        'PositionalAccuracy',
        'PositionConfidenceSet',
        'PrivilegedEvents',
        'RegulatorySpeedLimit',
        'RequestorType',
        'RoadSegmentReferenceID',
        'RTCMheader',
        'RTCMmessageList',
        'SegmentAttributeXYList',
        'SpeedandHeadingandThrottleConfidence',
        'SpeedLimitList',
        'SchoolBusJ2945Slash1C',
        'TrailersJ2945Slash1B',
        'TrailerUnitDescJ2945Slash1B',
        'Axles',
        'TransmissionAndSpeed',
        'VehicleClassification',
        'VehicleID',
        'VehicleSafetyExtensions',
        'VehicleSize',
        'VerticalOffset',
        'WiperSet',
        'Acceleration',
        'AmbientAirPressure',
        'AmbientAirTemperature',
        'Angle',
        'AntiLockBrakeStatus',
        'ApproachID',
        'AuxiliaryBrakeStatus',
        'BasicVehicleClass',
        'unknownVehicleClass',
        'specialVehicleClass',
        'passenger-Vehicle-TypeUnknown',
        'passenger-Vehicle-TypeOther',
        'lightTruck-Vehicle-TypeUnknown',
        'lightTruck-Vehicle-TypeOther',
        'truck-Vehicle-TypeUnknown',
        'truck-Vehicle-TypeOther',
        'truck-axleCnt2',
        'truck-axleCnt3',
        'truck-axleCnt4',
        'truck-axleCnt4Trailer',
        'truck-axleCnt5Trailer',
        'truck-axleCnt6Trailer',
        'truck-axleCnt5MultiTrailer',
        'truck-axleCnt6MultiTrailer',
        'truck-axleCnt7MultiTrailer',
        'motorcycle-TypeUnknown',
        'motorcycle-TypeOther',
        'motorcycle-Cruiser-Standard',
        'motorcycle-SportUnclad',
        'motorcycle-SportTouring',
        'motorcycle-SuperSport',
        'motorcycle-Touring',
        'motorcycle-Trike',
        'motorcycle-wPassengers',
        'transit-TypeUnknown',
        'transit-TypeOther',
        'transit-BRT',
        'transit-ExpressBus',
        'transit-LocalBus',
        'transit-SchoolBus',
        'transit-FixedGuideway',
        'transit-Paratransit',
        'transit-Paratransit-Ambulance',
        'emergency-TypeUnknown',
        'emergency-TypeOther',
        'emergency-Fire-Light-Vehicle',
        'emergency-Fire-Heavy-Vehicle',
        'emergency-Fire-Paramedic-Vehicle',
        'emergency-Fire-Ambulance-Vehicle',
        'emergency-Police-Light-Vehicle',
        'emergency-Police-Heavy-Vehicle',
        'emergency-Other-Responder',
        'emergency-Other-Ambulance',
        'otherTraveler-TypeUnknown',
        'otherTraveler-TypeOther',
        'otherTraveler-Pedestrian',
        'otherTraveler-Visually-Disabled',
        'otherTraveler-Physically-Disabled',
        'otherTraveler-Bicycle',
        'otherTraveler-Vulnerable-Roadworker',
        'infrastructure-TypeUnknown',
        'infrastructure-Fixed',
        'infrastructure-Movable',
        'equipped-CargoTrailer',
        'BasicVehicleRole',
        'BrakeAppliedStatus',
        'BrakeBoostApplied',
        'BumperHeight',
        'CoarseHeading',
        'CodeWord',
        'CoefficientOfFriction',
        'Confidence',
        'Count',
        'DDay',
        'DeltaAngle',
        'DescriptiveName',
        'DHour',
        'DMinute',
        'DMonth',
        'DOffset',
        'DrivenLineOffsetLg',
        'DrivenLineOffsetSm',
        'DSecond',
        'reservedMessageId-D',
        'alaCarteMessage-D',
        'basicSafetyMessage-D',
        'basicSafetyMessageVerbose-D',
        'commonSafetyRequest-D',
        'emergencyVehicleAlert-D',
        'intersectionCollision-D',
        'mapData-D',
        'nmeaCorrections-D',
        'probeDataManagement-D',
        'probeVehicleData-D',
        'roadSideAlert-D',
        'rtcmCorrections-D',
        'signalPhaseAndTimingMessage-D',
        'signalRequestMessage-D',
        'signalStatusMessage-D',
        'travelerInformation-D',
        'uperFrame-D',
        'Duration',
        'DYear',
        'ElevationConfidence',
        'Elevation',
        'Extent',
        'ExteriorLights',
        'FrictionInformation',
        'DescriptionOfRoadSurface',
        'PortlandCement',
        'PortlandCementType',
        'AsphaltOrTar',
        'AsphaltOrTarType',
        'Gravel',
        'GravelType',
        'Grass',
        'GrassType',
        'Cinders',
        'CindersType',
        'Rock',
        'RockType',
        'Ice',
        'IceType',
        'Snow',
        'SnowType',
        'RoadSurfaceCondition',
        'RoadRoughness',
        'MeanVariation',
        'VariationStdDev',
        'FuelType',
        'unknownFuel',
        'gasoline',
        'ethanol',
        'diesel',
        'electric',
        'hybrid',
        'hydrogen',
        'natGasLiquid',
        'natGasComp',
        'propane',
        'FurtherInfoID',
        'GNSSstatus',
        'GrossSpeed',
        'HeadingConfidence',
        'Heading',
        'HeadingSlice',
        'IntersectionID',
        'Iso3833VehicleType',
        'TrailerWeight',
        'LaneConnectionID',
        'LaneID',
        'LaneWidth',
        'Latitude',
        'LightbarInUse',
        'Longitude',
        'Location-quality',
        'Location-tech',
        'MergeDivergeNodeAngle',
        'MessageBLOB',
        'MinuteOfTheYear',
        'MsgCount',
        'MultiVehicleResponse',
        'NodeAttributeXY',
        'ObstacleDistance',
        'Offset-B09',
        'Offset-B10',
        'Offset-B11',
        'Offset-B12',
        'Offset-B13',
        'Offset-B14',
        'Offset-B16',
        'OffsetLL-B18',
        'PayloadData',
        'PositionConfidence',
        'PrioritizationResponseStatus',
        'Priority',
        'PrivilegedEventFlags',
        'RadiusOfCurvature',
        'RegionId',
        'noRegion',
        'addGrpA',
        'addGrpB',
        'addGrpC',
        'addGrpD',
        'RequestID',
        'RequestImportanceLevel',
        'RequestSubRole',
        'ResponseType',
        'RestrictionClassID',
        'RoadAuthorityID',
        'FullRoadAuthorityID',
        'RelativeRoadAuthorityID',
        'RoadRegulatorID',
        'RoadSegmentID',
        'RoadwayCrownAngle',
        'RTCMmessage',
        'Scale-B12',
        'SegmentAttributeXY',
        'SemiMajorAxisAccuracy',
        'SemiMajorAxisOrientation',
        'SemiMinorAxisAccuracy',
        'SignalGroupID',
        'SignalReqScheme',
        'SirenInUse',
        'SpeedConfidence',
        'SpeedLimitType',
        'Speed',
        'SSPindex',
        'StabilityControlStatus',
        'StationID',
        'SteeringWheelAngle',
        'TemporaryID',
        'ThrottleConfidence',
        'TimeConfidence',
        'TimeOffset',
        'TractionControlStatus',
        'TransitStatus',
        'TransmissionState',
        'URL-Link',
        'VehicleEventFlags',
        'VehicleHeight',
        'VehicleLength',
        'VehicleMass',
        'VehicleType',
        'VehicleWidth',
        'Velocity',
        'VerticalAccelerationThreshold',
        'VerticalAcceleration',
        'VertOffset-B08',
        'VertOffset-B09',
        'VertOffset-B10',
        'VertOffset-B11',
        'VertOffset-B12',
        'WiperRate',
        'WiperStatus',
        'YawRate',
        ]
    _type_ = [
        'REG-EXT-ID-AND-TYPE',
        'RegionalExtension',
        'AccelerationSet4Way',
        'AntennaOffsetSet',
        'BrakeSystemStatus',
        'BSMcoreData',
        'BumperHeights',
        'ComputedLane',
        'DDate',
        'DDateTime',
        'DFullTime',
        'DMonthDay',
        'DTime',
        'DYearMonth',
        'EmergencyDetails',
        'FullPositionVector',
        'Header',
        'IntersectionAccessPoint',
        'IntersectionReferenceID',
        'LaneDataAttribute',
        'LaneDataAttributeList',
        'Node-LLmD-64b',
        'Node-XY-20b',
        'Node-XY-22b',
        'Node-XY-24b',
        'Node-XY-26b',
        'Node-XY-28b',
        'Node-XY-32b',
        'NodeAttributeSetXY',
        'NodeAttributeXYList',
        'NodeListXY',
        'NodeOffsetPointXY',
        'NodeSetXY',
        'NodeXY',
        'PathHistory',
        'PathHistoryPointList',
        'PathHistoryPoint',
        'PathPrediction',
        'Position3D',
        'PositionalAccuracy',
        'PositionConfidenceSet',
        'PrivilegedEvents',
        'RegulatorySpeedLimit',
        'RequestorType',
        'RoadSegmentReferenceID',
        'RTCMheader',
        'RTCMmessageList',
        'SegmentAttributeXYList',
        'SpeedandHeadingandThrottleConfidence',
        'SpeedLimitList',
        'SchoolBusJ2945Slash1C',
        'TrailersJ2945Slash1B',
        'TrailerUnitDescJ2945Slash1B',
        'Axles',
        'TransmissionAndSpeed',
        'VehicleClassification',
        'VehicleID',
        'VehicleSafetyExtensions',
        'VehicleSize',
        'VerticalOffset',
        'WiperSet',
        'Acceleration',
        'AmbientAirPressure',
        'AmbientAirTemperature',
        'Angle',
        'AntiLockBrakeStatus',
        'ApproachID',
        'AuxiliaryBrakeStatus',
        'BasicVehicleClass',
        'BasicVehicleRole',
        'BrakeAppliedStatus',
        'BrakeBoostApplied',
        'BumperHeight',
        'CoarseHeading',
        'CodeWord',
        'CoefficientOfFriction',
        'Confidence',
        'Count',
        'DDay',
        'DeltaAngle',
        'DescriptiveName',
        'DHour',
        'DMinute',
        'DMonth',
        'DOffset',
        'DrivenLineOffsetLg',
        'DrivenLineOffsetSm',
        'DSecond',
        'Duration',
        'DYear',
        'ElevationConfidence',
        'Elevation',
        'Extent',
        'ExteriorLights',
        'FrictionInformation',
        'DescriptionOfRoadSurface',
        'PortlandCement',
        'PortlandCementType',
        'AsphaltOrTar',
        'AsphaltOrTarType',
        'Gravel',
        'GravelType',
        'Grass',
        'GrassType',
        'Cinders',
        'CindersType',
        'Rock',
        'RockType',
        'Ice',
        'IceType',
        'Snow',
        'SnowType',
        'RoadSurfaceCondition',
        'RoadRoughness',
        'MeanVariation',
        'VariationStdDev',
        'FuelType',
        'FurtherInfoID',
        'GNSSstatus',
        'GrossSpeed',
        'HeadingConfidence',
        'Heading',
        'HeadingSlice',
        'IntersectionID',
        'Iso3833VehicleType',
        'TrailerWeight',
        'LaneConnectionID',
        'LaneID',
        'LaneWidth',
        'Latitude',
        'LightbarInUse',
        'Longitude',
        'Location-quality',
        'Location-tech',
        'MergeDivergeNodeAngle',
        'MessageBLOB',
        'MinuteOfTheYear',
        'MsgCount',
        'MultiVehicleResponse',
        'NodeAttributeXY',
        'ObstacleDistance',
        'Offset-B09',
        'Offset-B10',
        'Offset-B11',
        'Offset-B12',
        'Offset-B13',
        'Offset-B14',
        'Offset-B16',
        'OffsetLL-B18',
        'PayloadData',
        'PositionConfidence',
        'PrioritizationResponseStatus',
        'Priority',
        'PrivilegedEventFlags',
        'RadiusOfCurvature',
        'RegionId',
        'RequestID',
        'RequestImportanceLevel',
        'RequestSubRole',
        'ResponseType',
        'RestrictionClassID',
        'RoadAuthorityID',
        'FullRoadAuthorityID',
        'RelativeRoadAuthorityID',
        'RoadRegulatorID',
        'RoadSegmentID',
        'RoadwayCrownAngle',
        'RTCMmessage',
        'Scale-B12',
        'SegmentAttributeXY',
        'SemiMajorAxisAccuracy',
        'SemiMajorAxisOrientation',
        'SemiMinorAxisAccuracy',
        'SignalGroupID',
        'SignalReqScheme',
        'SirenInUse',
        'SpeedConfidence',
        'SpeedLimitType',
        'Speed',
        'SSPindex',
        'StabilityControlStatus',
        'StationID',
        'SteeringWheelAngle',
        'TemporaryID',
        'ThrottleConfidence',
        'TimeConfidence',
        'TimeOffset',
        'TractionControlStatus',
        'TransitStatus',
        'TransmissionState',
        'URL-Link',
        'VehicleEventFlags',
        'VehicleHeight',
        'VehicleLength',
        'VehicleMass',
        'VehicleType',
        'VehicleWidth',
        'Velocity',
        'VerticalAccelerationThreshold',
        'VerticalAcceleration',
        'VertOffset-B08',
        'VertOffset-B09',
        'VertOffset-B10',
        'VertOffset-B11',
        'VertOffset-B12',
        'WiperRate',
        'WiperStatus',
        'YawRate',
        ]
    _set_ = [
        ]
    _val_ = [
        'unknownVehicleClass',
        'specialVehicleClass',
        'passenger-Vehicle-TypeUnknown',
        'passenger-Vehicle-TypeOther',
        'lightTruck-Vehicle-TypeUnknown',
        'lightTruck-Vehicle-TypeOther',
        'truck-Vehicle-TypeUnknown',
        'truck-Vehicle-TypeOther',
        'truck-axleCnt2',
        'truck-axleCnt3',
        'truck-axleCnt4',
        'truck-axleCnt4Trailer',
        'truck-axleCnt5Trailer',
        'truck-axleCnt6Trailer',
        'truck-axleCnt5MultiTrailer',
        'truck-axleCnt6MultiTrailer',
        'truck-axleCnt7MultiTrailer',
        'motorcycle-TypeUnknown',
        'motorcycle-TypeOther',
        'motorcycle-Cruiser-Standard',
        'motorcycle-SportUnclad',
        'motorcycle-SportTouring',
        'motorcycle-SuperSport',
        'motorcycle-Touring',
        'motorcycle-Trike',
        'motorcycle-wPassengers',
        'transit-TypeUnknown',
        'transit-TypeOther',
        'transit-BRT',
        'transit-ExpressBus',
        'transit-LocalBus',
        'transit-SchoolBus',
        'transit-FixedGuideway',
        'transit-Paratransit',
        'transit-Paratransit-Ambulance',
        'emergency-TypeUnknown',
        'emergency-TypeOther',
        'emergency-Fire-Light-Vehicle',
        'emergency-Fire-Heavy-Vehicle',
        'emergency-Fire-Paramedic-Vehicle',
        'emergency-Fire-Ambulance-Vehicle',
        'emergency-Police-Light-Vehicle',
        'emergency-Police-Heavy-Vehicle',
        'emergency-Other-Responder',
        'emergency-Other-Ambulance',
        'otherTraveler-TypeUnknown',
        'otherTraveler-TypeOther',
        'otherTraveler-Pedestrian',
        'otherTraveler-Visually-Disabled',
        'otherTraveler-Physically-Disabled',
        'otherTraveler-Bicycle',
        'otherTraveler-Vulnerable-Roadworker',
        'infrastructure-TypeUnknown',
        'infrastructure-Fixed',
        'infrastructure-Movable',
        'equipped-CargoTrailer',
        'reservedMessageId-D',
        'alaCarteMessage-D',
        'basicSafetyMessage-D',
        'basicSafetyMessageVerbose-D',
        'commonSafetyRequest-D',
        'emergencyVehicleAlert-D',
        'intersectionCollision-D',
        'mapData-D',
        'nmeaCorrections-D',
        'probeDataManagement-D',
        'probeVehicleData-D',
        'roadSideAlert-D',
        'rtcmCorrections-D',
        'signalPhaseAndTimingMessage-D',
        'signalRequestMessage-D',
        'signalStatusMessage-D',
        'travelerInformation-D',
        'uperFrame-D',
        'unknownFuel',
        'gasoline',
        'ethanol',
        'diesel',
        'electric',
        'hybrid',
        'hydrogen',
        'natGasLiquid',
        'natGasComp',
        'propane',
        'noRegion',
        'addGrpA',
        'addGrpB',
        'addGrpC',
        'addGrpD',
        ]
    _class_ = [
        'REG-EXT-ID-AND-TYPE',
        ]
    _param_ = [
        'RegionalExtension',
        ]
    
    #-----< REG-EXT-ID-AND-TYPE >-----#
    REG_EXT_ID_AND_TYPE = CLASS(name='REG-EXT-ID-AND-TYPE', mode=MODE_TYPE)
    _REG_EXT_ID_AND_TYPE_id = INT(name='id', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'RegionId')), uniq=True)
    _REG_EXT_ID_AND_TYPE_Type = OPEN(name='Type', mode=MODE_TYPE)
    REG_EXT_ID_AND_TYPE._cont = ASN1Dict([
        ('id', _REG_EXT_ID_AND_TYPE_id),
        ('Type', _REG_EXT_ID_AND_TYPE_Type),
        ])
    
    #-----< RegionalExtension >-----#
    RegionalExtension = SEQ(name='RegionalExtension', mode=MODE_TYPE, param=True)
    
    #-----< AccelerationSet4Way >-----#
    AccelerationSet4Way = SEQ(name='AccelerationSet4Way', mode=MODE_TYPE)
    _AccelerationSet4Way_long = INT(name='long', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Acceleration')))
    _AccelerationSet4Way_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Acceleration')))
    _AccelerationSet4Way_vert = INT(name='vert', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VerticalAcceleration')))
    _AccelerationSet4Way_yaw = INT(name='yaw', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'YawRate')))
    AccelerationSet4Way._cont = ASN1Dict([
        ('long', _AccelerationSet4Way_long),
        ('lat', _AccelerationSet4Way_lat),
        ('vert', _AccelerationSet4Way_vert),
        ('yaw', _AccelerationSet4Way_yaw),
        ])
    AccelerationSet4Way._ext = None
    
    #-----< AntennaOffsetSet >-----#
    AntennaOffsetSet = SEQ(name='AntennaOffsetSet', mode=MODE_TYPE)
    _AntennaOffsetSet_antOffsetX = INT(name='antOffsetX', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B12')))
    _AntennaOffsetSet_antOffsetY = INT(name='antOffsetY', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B09')))
    _AntennaOffsetSet_antOffsetZ = INT(name='antOffsetZ', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B10')))
    AntennaOffsetSet._cont = ASN1Dict([
        ('antOffsetX', _AntennaOffsetSet_antOffsetX),
        ('antOffsetY', _AntennaOffsetSet_antOffsetY),
        ('antOffsetZ', _AntennaOffsetSet_antOffsetZ),
        ])
    AntennaOffsetSet._ext = None
    
    #-----< BrakeSystemStatus >-----#
    BrakeSystemStatus = SEQ(name='BrakeSystemStatus', mode=MODE_TYPE)
    _BrakeSystemStatus_wheelBrakes = BIT_STR(name='wheelBrakes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BrakeAppliedStatus')))
    _BrakeSystemStatus_traction = ENUM(name='traction', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TractionControlStatus')))
    _BrakeSystemStatus_abs = ENUM(name='abs', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AntiLockBrakeStatus')))
    _BrakeSystemStatus_scs = ENUM(name='scs', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'StabilityControlStatus')))
    _BrakeSystemStatus_brakeBoost = ENUM(name='brakeBoost', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BrakeBoostApplied')))
    _BrakeSystemStatus_auxBrakes = ENUM(name='auxBrakes', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AuxiliaryBrakeStatus')))
    BrakeSystemStatus._cont = ASN1Dict([
        ('wheelBrakes', _BrakeSystemStatus_wheelBrakes),
        ('traction', _BrakeSystemStatus_traction),
        ('abs', _BrakeSystemStatus_abs),
        ('scs', _BrakeSystemStatus_scs),
        ('brakeBoost', _BrakeSystemStatus_brakeBoost),
        ('auxBrakes', _BrakeSystemStatus_auxBrakes),
        ])
    BrakeSystemStatus._ext = None
    
    #-----< BSMcoreData >-----#
    BSMcoreData = SEQ(name='BSMcoreData', mode=MODE_TYPE)
    _BSMcoreData_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _BSMcoreData_id = OCT_STR(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _BSMcoreData_secMark = INT(name='secMark', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')))
    _BSMcoreData_lat = INT(name='lat', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Latitude')))
    _BSMcoreData_long = INT(name='long', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Longitude')))
    _BSMcoreData_elev = INT(name='elev', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Elevation')))
    _BSMcoreData_accuracy = SEQ(name='accuracy', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _BSMcoreData_transmission = ENUM(name='transmission', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TransmissionState')))
    _BSMcoreData_speed = INT(name='speed', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')))
    _BSMcoreData_heading = INT(name='heading', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Heading')))
    _BSMcoreData_angle = INT(name='angle', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SteeringWheelAngle')))
    _BSMcoreData_accelSet = SEQ(name='accelSet', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AccelerationSet4Way')))
    _BSMcoreData_brakes = SEQ(name='brakes', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BrakeSystemStatus')))
    _BSMcoreData_size = SEQ(name='size', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleSize')))
    BSMcoreData._cont = ASN1Dict([
        ('msgCnt', _BSMcoreData_msgCnt),
        ('id', _BSMcoreData_id),
        ('secMark', _BSMcoreData_secMark),
        ('lat', _BSMcoreData_lat),
        ('long', _BSMcoreData_long),
        ('elev', _BSMcoreData_elev),
        ('accuracy', _BSMcoreData_accuracy),
        ('transmission', _BSMcoreData_transmission),
        ('speed', _BSMcoreData_speed),
        ('heading', _BSMcoreData_heading),
        ('angle', _BSMcoreData_angle),
        ('accelSet', _BSMcoreData_accelSet),
        ('brakes', _BSMcoreData_brakes),
        ('size', _BSMcoreData_size),
        ])
    BSMcoreData._ext = None
    
    #-----< BumperHeights >-----#
    BumperHeights = SEQ(name='BumperHeights', mode=MODE_TYPE)
    _BumperHeights_front = INT(name='front', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BumperHeight')))
    _BumperHeights_rear = INT(name='rear', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BumperHeight')))
    BumperHeights._cont = ASN1Dict([
        ('front', _BumperHeights_front),
        ('rear', _BumperHeights_rear),
        ])
    BumperHeights._ext = None
    
    #-----< ComputedLane >-----#
    ComputedLane = SEQ(name='ComputedLane', mode=MODE_TYPE)
    _ComputedLane_referenceLaneId = INT(name='referenceLaneId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')))
    _ComputedLane_offsetXaxis = CHOICE(name='offsetXaxis', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ComputedLane_offsetXaxis_small = INT(name='small', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DrivenLineOffsetSm')))
    __ComputedLane_offsetXaxis_large = INT(name='large', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DrivenLineOffsetLg')))
    _ComputedLane_offsetXaxis._cont = ASN1Dict([
        ('small', __ComputedLane_offsetXaxis_small),
        ('large', __ComputedLane_offsetXaxis_large),
        ])
    _ComputedLane_offsetXaxis._ext = None
    _ComputedLane_offsetYaxis = CHOICE(name='offsetYaxis', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ComputedLane_offsetYaxis_small = INT(name='small', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DrivenLineOffsetSm')))
    __ComputedLane_offsetYaxis_large = INT(name='large', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DrivenLineOffsetLg')))
    _ComputedLane_offsetYaxis._cont = ASN1Dict([
        ('small', __ComputedLane_offsetYaxis_small),
        ('large', __ComputedLane_offsetYaxis_large),
        ])
    _ComputedLane_offsetYaxis._ext = None
    _ComputedLane_rotateXY = INT(name='rotateXY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Angle')), opt=True)
    _ComputedLane_scaleXaxis = INT(name='scaleXaxis', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Scale-B12')), opt=True)
    _ComputedLane_scaleYaxis = INT(name='scaleYaxis', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Scale-B12')), opt=True)
    _ComputedLane_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ComputedLane_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___ComputedLane_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____ComputedLane_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____ComputedLane_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ComputedLane_regional__item__regionId._const_tab = ____ComputedLane_regional__item__regionId_tab
    ___ComputedLane_regional__item__regionId._const_tab_at = None
    ___ComputedLane_regional__item__regionId._const_tab_id = 'id'
    ___ComputedLane_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____ComputedLane_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____ComputedLane_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ComputedLane_regional__item__regExtValue._const_tab = ____ComputedLane_regional__item__regExtValue_tab
    ___ComputedLane_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___ComputedLane_regional__item__regExtValue._const_tab_id = 'Type'
    __ComputedLane_regional__item_._cont = ASN1Dict([
        ('regionId', ___ComputedLane_regional__item__regionId),
        ('regExtValue', ___ComputedLane_regional__item__regExtValue),
        ])
    __ComputedLane_regional__item_._ext = None
    _ComputedLane_regional._cont = __ComputedLane_regional__item_
    _ComputedLane_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ComputedLane._cont = ASN1Dict([
        ('referenceLaneId', _ComputedLane_referenceLaneId),
        ('offsetXaxis', _ComputedLane_offsetXaxis),
        ('offsetYaxis', _ComputedLane_offsetYaxis),
        ('rotateXY', _ComputedLane_rotateXY),
        ('scaleXaxis', _ComputedLane_scaleXaxis),
        ('scaleYaxis', _ComputedLane_scaleYaxis),
        ('regional', _ComputedLane_regional),
        ])
    ComputedLane._ext = []
    
    #-----< DDate >-----#
    DDate = SEQ(name='DDate', mode=MODE_TYPE)
    _DDate_year = INT(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DYear')))
    _DDate_month = INT(name='month', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMonth')))
    _DDate_day = INT(name='day', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDay')))
    DDate._cont = ASN1Dict([
        ('year', _DDate_year),
        ('month', _DDate_month),
        ('day', _DDate_day),
        ])
    DDate._ext = None
    
    #-----< DDateTime >-----#
    DDateTime = SEQ(name='DDateTime', mode=MODE_TYPE)
    _DDateTime_year = INT(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DYear')), opt=True)
    _DDateTime_month = INT(name='month', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMonth')), opt=True)
    _DDateTime_day = INT(name='day', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDay')), opt=True)
    _DDateTime_hour = INT(name='hour', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DHour')), opt=True)
    _DDateTime_minute = INT(name='minute', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMinute')), opt=True)
    _DDateTime_second = INT(name='second', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')), opt=True)
    _DDateTime_offset = INT(name='offset', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DOffset')), opt=True)
    DDateTime._cont = ASN1Dict([
        ('year', _DDateTime_year),
        ('month', _DDateTime_month),
        ('day', _DDateTime_day),
        ('hour', _DDateTime_hour),
        ('minute', _DDateTime_minute),
        ('second', _DDateTime_second),
        ('offset', _DDateTime_offset),
        ])
    DDateTime._ext = None
    
    #-----< DFullTime >-----#
    DFullTime = SEQ(name='DFullTime', mode=MODE_TYPE)
    _DFullTime_year = INT(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DYear')))
    _DFullTime_month = INT(name='month', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMonth')))
    _DFullTime_day = INT(name='day', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDay')))
    _DFullTime_hour = INT(name='hour', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DHour')))
    _DFullTime_minute = INT(name='minute', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMinute')))
    DFullTime._cont = ASN1Dict([
        ('year', _DFullTime_year),
        ('month', _DFullTime_month),
        ('day', _DFullTime_day),
        ('hour', _DFullTime_hour),
        ('minute', _DFullTime_minute),
        ])
    DFullTime._ext = None
    
    #-----< DMonthDay >-----#
    DMonthDay = SEQ(name='DMonthDay', mode=MODE_TYPE)
    _DMonthDay_month = INT(name='month', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMonth')))
    _DMonthDay_day = INT(name='day', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDay')))
    DMonthDay._cont = ASN1Dict([
        ('month', _DMonthDay_month),
        ('day', _DMonthDay_day),
        ])
    DMonthDay._ext = None
    
    #-----< DTime >-----#
    DTime = SEQ(name='DTime', mode=MODE_TYPE)
    _DTime_hour = INT(name='hour', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DHour')))
    _DTime_minute = INT(name='minute', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMinute')))
    _DTime_second = INT(name='second', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')))
    _DTime_offset = INT(name='offset', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DOffset')), opt=True)
    DTime._cont = ASN1Dict([
        ('hour', _DTime_hour),
        ('minute', _DTime_minute),
        ('second', _DTime_second),
        ('offset', _DTime_offset),
        ])
    DTime._ext = None
    
    #-----< DYearMonth >-----#
    DYearMonth = SEQ(name='DYearMonth', mode=MODE_TYPE)
    _DYearMonth_year = INT(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DYear')))
    _DYearMonth_month = INT(name='month', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DMonth')))
    DYearMonth._cont = ASN1Dict([
        ('year', _DYearMonth_year),
        ('month', _DYearMonth_month),
        ])
    DYearMonth._ext = None
    
    #-----< EmergencyDetails >-----#
    EmergencyDetails = SEQ(name='EmergencyDetails', mode=MODE_TYPE)
    _EmergencyDetails_doNotUse = INT(name='doNotUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SSPindex')))
    _EmergencyDetails_sirenUse = ENUM(name='sirenUse', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SirenInUse')))
    _EmergencyDetails_lightsUse = ENUM(name='lightsUse', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LightbarInUse')))
    _EmergencyDetails_multi = ENUM(name='multi', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MultiVehicleResponse')))
    _EmergencyDetails_events = SEQ(name='events', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PrivilegedEvents')), opt=True)
    _EmergencyDetails_responseType = ENUM(name='responseType', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ResponseType')), opt=True)
    EmergencyDetails._cont = ASN1Dict([
        ('doNotUse', _EmergencyDetails_doNotUse),
        ('sirenUse', _EmergencyDetails_sirenUse),
        ('lightsUse', _EmergencyDetails_lightsUse),
        ('multi', _EmergencyDetails_multi),
        ('events', _EmergencyDetails_events),
        ('responseType', _EmergencyDetails_responseType),
        ])
    EmergencyDetails._ext = []
    
    #-----< FullPositionVector >-----#
    FullPositionVector = SEQ(name='FullPositionVector', mode=MODE_TYPE)
    _FullPositionVector_utcTime = SEQ(name='utcTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')), opt=True)
    _FullPositionVector_long = INT(name='long', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Longitude')))
    _FullPositionVector_lat = INT(name='lat', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Latitude')))
    _FullPositionVector_elevation = INT(name='elevation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Elevation')), opt=True)
    _FullPositionVector_heading = INT(name='heading', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Heading')), opt=True)
    _FullPositionVector_speed = SEQ(name='speed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TransmissionAndSpeed')), opt=True)
    _FullPositionVector_posAccuracy = SEQ(name='posAccuracy', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')), opt=True)
    _FullPositionVector_timeConfidence = ENUM(name='timeConfidence', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TimeConfidence')), opt=True)
    _FullPositionVector_posConfidence = SEQ(name='posConfidence', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionConfidenceSet')), opt=True)
    _FullPositionVector_speedConfidence = SEQ(name='speedConfidence', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedandHeadingandThrottleConfidence')), opt=True)
    FullPositionVector._cont = ASN1Dict([
        ('utcTime', _FullPositionVector_utcTime),
        ('long', _FullPositionVector_long),
        ('lat', _FullPositionVector_lat),
        ('elevation', _FullPositionVector_elevation),
        ('heading', _FullPositionVector_heading),
        ('speed', _FullPositionVector_speed),
        ('posAccuracy', _FullPositionVector_posAccuracy),
        ('timeConfidence', _FullPositionVector_timeConfidence),
        ('posConfidence', _FullPositionVector_posConfidence),
        ('speedConfidence', _FullPositionVector_speedConfidence),
        ])
    FullPositionVector._ext = []
    
    #-----< Header >-----#
    Header = SEQ(name='Header', mode=MODE_TYPE)
    _Header_year = INT(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DYear')), opt=True)
    _Header_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _Header_secMark = INT(name='secMark', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')), opt=True)
    _Header_msgIssueRevision = INT(name='msgIssueRevision', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')), opt=True)
    Header._cont = ASN1Dict([
        ('year', _Header_year),
        ('timeStamp', _Header_timeStamp),
        ('secMark', _Header_secMark),
        ('msgIssueRevision', _Header_msgIssueRevision),
        ])
    Header._ext = []
    
    #-----< IntersectionAccessPoint >-----#
    IntersectionAccessPoint = CHOICE(name='IntersectionAccessPoint', mode=MODE_TYPE)
    _IntersectionAccessPoint_lane = INT(name='lane', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')))
    _IntersectionAccessPoint_approach = INT(name='approach', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ApproachID')))
    _IntersectionAccessPoint_connection = INT(name='connection', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneConnectionID')))
    IntersectionAccessPoint._cont = ASN1Dict([
        ('lane', _IntersectionAccessPoint_lane),
        ('approach', _IntersectionAccessPoint_approach),
        ('connection', _IntersectionAccessPoint_connection),
        ])
    IntersectionAccessPoint._ext = []
    
    #-----< IntersectionReferenceID >-----#
    IntersectionReferenceID = SEQ(name='IntersectionReferenceID', mode=MODE_TYPE)
    _IntersectionReferenceID_region = INT(name='region', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadRegulatorID')), opt=True)
    _IntersectionReferenceID_id = INT(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionID')))
    IntersectionReferenceID._cont = ASN1Dict([
        ('region', _IntersectionReferenceID_region),
        ('id', _IntersectionReferenceID_id),
        ])
    IntersectionReferenceID._ext = None
    
    #-----< LaneDataAttribute >-----#
    LaneDataAttribute = CHOICE(name='LaneDataAttribute', mode=MODE_TYPE)
    _LaneDataAttribute_pathEndPointAngle = INT(name='pathEndPointAngle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DeltaAngle')))
    _LaneDataAttribute_laneCrownPointCenter = INT(name='laneCrownPointCenter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadwayCrownAngle')))
    _LaneDataAttribute_laneCrownPointLeft = INT(name='laneCrownPointLeft', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadwayCrownAngle')))
    _LaneDataAttribute_laneCrownPointRight = INT(name='laneCrownPointRight', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadwayCrownAngle')))
    _LaneDataAttribute_laneAngle = INT(name='laneAngle', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MergeDivergeNodeAngle')))
    _LaneDataAttribute_speedLimits = SEQ_OF(name='speedLimits', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedLimitList')))
    _LaneDataAttribute_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LaneDataAttribute_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___LaneDataAttribute_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____LaneDataAttribute_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _____LaneDataAttribute_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'LaneDataAttribute-addGrpB')))
    ____LaneDataAttribute_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____LaneDataAttribute_regional__item__regionId_tab_val_Type_0), ('id', 2)])], rr=[], ev=None, er=[])
    ___LaneDataAttribute_regional__item__regionId._const_tab = ____LaneDataAttribute_regional__item__regionId_tab
    ___LaneDataAttribute_regional__item__regionId._const_tab_at = None
    ___LaneDataAttribute_regional__item__regionId._const_tab_id = 'id'
    ___LaneDataAttribute_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___LaneDataAttribute_regional__item__regExtValue._const_tab = ____LaneDataAttribute_regional__item__regionId_tab
    ___LaneDataAttribute_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___LaneDataAttribute_regional__item__regExtValue._const_tab_id = 'Type'
    __LaneDataAttribute_regional__item_._cont = ASN1Dict([
        ('regionId', ___LaneDataAttribute_regional__item__regionId),
        ('regExtValue', ___LaneDataAttribute_regional__item__regExtValue),
        ])
    __LaneDataAttribute_regional__item_._ext = None
    _LaneDataAttribute_regional._cont = __LaneDataAttribute_regional__item_
    _LaneDataAttribute_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    LaneDataAttribute._cont = ASN1Dict([
        ('pathEndPointAngle', _LaneDataAttribute_pathEndPointAngle),
        ('laneCrownPointCenter', _LaneDataAttribute_laneCrownPointCenter),
        ('laneCrownPointLeft', _LaneDataAttribute_laneCrownPointLeft),
        ('laneCrownPointRight', _LaneDataAttribute_laneCrownPointRight),
        ('laneAngle', _LaneDataAttribute_laneAngle),
        ('speedLimits', _LaneDataAttribute_speedLimits),
        ('regional', _LaneDataAttribute_regional),
        ])
    LaneDataAttribute._ext = []
    
    #-----< LaneDataAttributeList >-----#
    LaneDataAttributeList = SEQ_OF(name='LaneDataAttributeList', mode=MODE_TYPE)
    _LaneDataAttributeList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'LaneDataAttribute')))
    LaneDataAttributeList._cont = _LaneDataAttributeList__item_
    LaneDataAttributeList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< Node-LLmD-64b >-----#
    Node_LLmD_64b = SEQ(name='Node-LLmD-64b', mode=MODE_TYPE)
    _Node_LLmD_64b_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Longitude')))
    _Node_LLmD_64b_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Latitude')))
    Node_LLmD_64b._cont = ASN1Dict([
        ('lon', _Node_LLmD_64b_lon),
        ('lat', _Node_LLmD_64b_lat),
        ])
    Node_LLmD_64b._ext = None
    
    #-----< Node-XY-20b >-----#
    Node_XY_20b = SEQ(name='Node-XY-20b', mode=MODE_TYPE)
    _Node_XY_20b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B10')))
    _Node_XY_20b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B10')))
    Node_XY_20b._cont = ASN1Dict([
        ('x', _Node_XY_20b_x),
        ('y', _Node_XY_20b_y),
        ])
    Node_XY_20b._ext = None
    
    #-----< Node-XY-22b >-----#
    Node_XY_22b = SEQ(name='Node-XY-22b', mode=MODE_TYPE)
    _Node_XY_22b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B11')))
    _Node_XY_22b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B11')))
    Node_XY_22b._cont = ASN1Dict([
        ('x', _Node_XY_22b_x),
        ('y', _Node_XY_22b_y),
        ])
    Node_XY_22b._ext = None
    
    #-----< Node-XY-24b >-----#
    Node_XY_24b = SEQ(name='Node-XY-24b', mode=MODE_TYPE)
    _Node_XY_24b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B12')))
    _Node_XY_24b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B12')))
    Node_XY_24b._cont = ASN1Dict([
        ('x', _Node_XY_24b_x),
        ('y', _Node_XY_24b_y),
        ])
    Node_XY_24b._ext = None
    
    #-----< Node-XY-26b >-----#
    Node_XY_26b = SEQ(name='Node-XY-26b', mode=MODE_TYPE)
    _Node_XY_26b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B13')))
    _Node_XY_26b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B13')))
    Node_XY_26b._cont = ASN1Dict([
        ('x', _Node_XY_26b_x),
        ('y', _Node_XY_26b_y),
        ])
    Node_XY_26b._ext = None
    
    #-----< Node-XY-28b >-----#
    Node_XY_28b = SEQ(name='Node-XY-28b', mode=MODE_TYPE)
    _Node_XY_28b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B14')))
    _Node_XY_28b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B14')))
    Node_XY_28b._cont = ASN1Dict([
        ('x', _Node_XY_28b_x),
        ('y', _Node_XY_28b_y),
        ])
    Node_XY_28b._ext = None
    
    #-----< Node-XY-32b >-----#
    Node_XY_32b = SEQ(name='Node-XY-32b', mode=MODE_TYPE)
    _Node_XY_32b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B16')))
    _Node_XY_32b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B16')))
    Node_XY_32b._cont = ASN1Dict([
        ('x', _Node_XY_32b_x),
        ('y', _Node_XY_32b_y),
        ])
    Node_XY_32b._ext = None
    
    #-----< NodeAttributeSetXY >-----#
    NodeAttributeSetXY = SEQ(name='NodeAttributeSetXY', mode=MODE_TYPE)
    _NodeAttributeSetXY_localNode = SEQ_OF(name='localNode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'NodeAttributeXYList')), opt=True)
    _NodeAttributeSetXY_disabled = SEQ_OF(name='disabled', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SegmentAttributeXYList')), opt=True)
    _NodeAttributeSetXY_enabled = SEQ_OF(name='enabled', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SegmentAttributeXYList')), opt=True)
    _NodeAttributeSetXY_data = SEQ_OF(name='data', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneDataAttributeList')), opt=True)
    _NodeAttributeSetXY_dWidth = INT(name='dWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B10')), opt=True)
    _NodeAttributeSetXY_dElevation = INT(name='dElevation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B10')), opt=True)
    _NodeAttributeSetXY_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __NodeAttributeSetXY_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___NodeAttributeSetXY_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____NodeAttributeSetXY_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____NodeAttributeSetXY_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___NodeAttributeSetXY_regional__item__regionId._const_tab = ____NodeAttributeSetXY_regional__item__regionId_tab
    ___NodeAttributeSetXY_regional__item__regionId._const_tab_at = None
    ___NodeAttributeSetXY_regional__item__regionId._const_tab_id = 'id'
    ___NodeAttributeSetXY_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____NodeAttributeSetXY_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____NodeAttributeSetXY_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___NodeAttributeSetXY_regional__item__regExtValue._const_tab = ____NodeAttributeSetXY_regional__item__regExtValue_tab
    ___NodeAttributeSetXY_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___NodeAttributeSetXY_regional__item__regExtValue._const_tab_id = 'Type'
    __NodeAttributeSetXY_regional__item_._cont = ASN1Dict([
        ('regionId', ___NodeAttributeSetXY_regional__item__regionId),
        ('regExtValue', ___NodeAttributeSetXY_regional__item__regExtValue),
        ])
    __NodeAttributeSetXY_regional__item_._ext = None
    _NodeAttributeSetXY_regional._cont = __NodeAttributeSetXY_regional__item_
    _NodeAttributeSetXY_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    NodeAttributeSetXY._cont = ASN1Dict([
        ('localNode', _NodeAttributeSetXY_localNode),
        ('disabled', _NodeAttributeSetXY_disabled),
        ('enabled', _NodeAttributeSetXY_enabled),
        ('data', _NodeAttributeSetXY_data),
        ('dWidth', _NodeAttributeSetXY_dWidth),
        ('dElevation', _NodeAttributeSetXY_dElevation),
        ('regional', _NodeAttributeSetXY_regional),
        ])
    NodeAttributeSetXY._ext = []
    
    #-----< NodeAttributeXYList >-----#
    NodeAttributeXYList = SEQ_OF(name='NodeAttributeXYList', mode=MODE_TYPE)
    _NodeAttributeXYList__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'NodeAttributeXY')))
    NodeAttributeXYList._cont = _NodeAttributeXYList__item_
    NodeAttributeXYList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< NodeListXY >-----#
    NodeListXY = CHOICE(name='NodeListXY', mode=MODE_TYPE)
    _NodeListXY_nodes = SEQ_OF(name='nodes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'NodeSetXY')))
    _NodeListXY_computed = SEQ(name='computed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ComputedLane')))
    NodeListXY._cont = ASN1Dict([
        ('nodes', _NodeListXY_nodes),
        ('computed', _NodeListXY_computed),
        ])
    NodeListXY._ext = []
    
    #-----< NodeOffsetPointXY >-----#
    NodeOffsetPointXY = CHOICE(name='NodeOffsetPointXY', mode=MODE_TYPE)
    _NodeOffsetPointXY_node_XY1 = SEQ(name='node-XY1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-20b')))
    _NodeOffsetPointXY_node_XY2 = SEQ(name='node-XY2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-22b')))
    _NodeOffsetPointXY_node_XY3 = SEQ(name='node-XY3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-24b')))
    _NodeOffsetPointXY_node_XY4 = SEQ(name='node-XY4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-26b')))
    _NodeOffsetPointXY_node_XY5 = SEQ(name='node-XY5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-28b')))
    _NodeOffsetPointXY_node_XY6 = SEQ(name='node-XY6', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-XY-32b')))
    _NodeOffsetPointXY_node_LatLon = SEQ(name='node-LatLon', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-LLmD-64b')))
    _NodeOffsetPointXY_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')))
    __NodeOffsetPointXY_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___NodeOffsetPointXY_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____NodeOffsetPointXY_regional_regionId_tab_val_Type_0 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'NodeOffsetPointXY-addGrpB')))
    ___NodeOffsetPointXY_regional_regionId_tab._val = ASN1Set(rv=[dict([('Type', ____NodeOffsetPointXY_regional_regionId_tab_val_Type_0), ('id', 2)])], rr=[], ev=None, er=[])
    __NodeOffsetPointXY_regional_regionId._const_tab = ___NodeOffsetPointXY_regional_regionId_tab
    __NodeOffsetPointXY_regional_regionId._const_tab_at = None
    __NodeOffsetPointXY_regional_regionId._const_tab_id = 'id'
    __NodeOffsetPointXY_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    __NodeOffsetPointXY_regional_regExtValue._const_tab = ___NodeOffsetPointXY_regional_regionId_tab
    __NodeOffsetPointXY_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __NodeOffsetPointXY_regional_regExtValue._const_tab_id = 'Type'
    _NodeOffsetPointXY_regional._cont = ASN1Dict([
        ('regionId', __NodeOffsetPointXY_regional_regionId),
        ('regExtValue', __NodeOffsetPointXY_regional_regExtValue),
        ])
    _NodeOffsetPointXY_regional._ext = None
    NodeOffsetPointXY._cont = ASN1Dict([
        ('node-XY1', _NodeOffsetPointXY_node_XY1),
        ('node-XY2', _NodeOffsetPointXY_node_XY2),
        ('node-XY3', _NodeOffsetPointXY_node_XY3),
        ('node-XY4', _NodeOffsetPointXY_node_XY4),
        ('node-XY5', _NodeOffsetPointXY_node_XY5),
        ('node-XY6', _NodeOffsetPointXY_node_XY6),
        ('node-LatLon', _NodeOffsetPointXY_node_LatLon),
        ('regional', _NodeOffsetPointXY_regional),
        ])
    NodeOffsetPointXY._ext = None
    
    #-----< NodeSetXY >-----#
    NodeSetXY = SEQ_OF(name='NodeSetXY', mode=MODE_TYPE)
    _NodeSetXY__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'NodeXY')))
    NodeSetXY._cont = _NodeSetXY__item_
    NodeSetXY._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=63)], ev=None, er=[])
    
    #-----< NodeXY >-----#
    NodeXY = SEQ(name='NodeXY', mode=MODE_TYPE)
    _NodeXY_delta = CHOICE(name='delta', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'NodeOffsetPointXY')))
    _NodeXY_attributes = SEQ(name='attributes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'NodeAttributeSetXY')), opt=True)
    NodeXY._cont = ASN1Dict([
        ('delta', _NodeXY_delta),
        ('attributes', _NodeXY_attributes),
        ])
    NodeXY._ext = []
    
    #-----< PathHistory >-----#
    PathHistory = SEQ(name='PathHistory', mode=MODE_TYPE)
    _PathHistory_initialPosition = SEQ(name='initialPosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullPositionVector')), opt=True)
    _PathHistory_currGNSSstatus = BIT_STR(name='currGNSSstatus', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GNSSstatus')), opt=True)
    _PathHistory_crumbData = SEQ_OF(name='crumbData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PathHistoryPointList')))
    PathHistory._cont = ASN1Dict([
        ('initialPosition', _PathHistory_initialPosition),
        ('currGNSSstatus', _PathHistory_currGNSSstatus),
        ('crumbData', _PathHistory_crumbData),
        ])
    PathHistory._ext = []
    
    #-----< PathHistoryPointList >-----#
    PathHistoryPointList = SEQ_OF(name='PathHistoryPointList', mode=MODE_TYPE)
    _PathHistoryPointList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'PathHistoryPoint')))
    PathHistoryPointList._cont = _PathHistoryPointList__item_
    PathHistoryPointList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=23)], ev=None, er=[])
    
    #-----< PathHistoryPoint >-----#
    PathHistoryPoint = SEQ(name='PathHistoryPoint', mode=MODE_TYPE)
    _PathHistoryPoint_latOffset = INT(name='latOffset', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'OffsetLL-B18')))
    _PathHistoryPoint_lonOffset = INT(name='lonOffset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'OffsetLL-B18')))
    _PathHistoryPoint_elevationOffset = INT(name='elevationOffset', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VertOffset-B12')))
    _PathHistoryPoint_timeOffset = INT(name='timeOffset', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TimeOffset')))
    _PathHistoryPoint_speed = INT(name='speed', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')), opt=True)
    _PathHistoryPoint_posAccuracy = SEQ(name='posAccuracy', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')), opt=True)
    _PathHistoryPoint_heading = INT(name='heading', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'CoarseHeading')), opt=True)
    PathHistoryPoint._cont = ASN1Dict([
        ('latOffset', _PathHistoryPoint_latOffset),
        ('lonOffset', _PathHistoryPoint_lonOffset),
        ('elevationOffset', _PathHistoryPoint_elevationOffset),
        ('timeOffset', _PathHistoryPoint_timeOffset),
        ('speed', _PathHistoryPoint_speed),
        ('posAccuracy', _PathHistoryPoint_posAccuracy),
        ('heading', _PathHistoryPoint_heading),
        ])
    PathHistoryPoint._ext = []
    
    #-----< PathPrediction >-----#
    PathPrediction = SEQ(name='PathPrediction', mode=MODE_TYPE)
    _PathPrediction_radiusOfCurve = INT(name='radiusOfCurve', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RadiusOfCurvature')))
    _PathPrediction_confidence = INT(name='confidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Confidence')))
    PathPrediction._cont = ASN1Dict([
        ('radiusOfCurve', _PathPrediction_radiusOfCurve),
        ('confidence', _PathPrediction_confidence),
        ])
    PathPrediction._ext = []
    
    #-----< Position3D >-----#
    Position3D = SEQ(name='Position3D', mode=MODE_TYPE)
    _Position3D_lat = INT(name='lat', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Latitude')))
    _Position3D_long = INT(name='long', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Longitude')))
    _Position3D_elevation = INT(name='elevation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Elevation')), opt=True)
    _Position3D_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Position3D_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___Position3D_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____Position3D_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _____Position3D_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'Position3D-addGrpB')))
    _____Position3D_regional__item__regionId_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'Position3D-addGrpC')))
    ____Position3D_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____Position3D_regional__item__regionId_tab_val_Type_0), ('id', 2)]), dict([('Type', _____Position3D_regional__item__regionId_tab_val_Type_1), ('id', 3)])], rr=[], ev=None, er=[])
    ___Position3D_regional__item__regionId._const_tab = ____Position3D_regional__item__regionId_tab
    ___Position3D_regional__item__regionId._const_tab_at = None
    ___Position3D_regional__item__regionId._const_tab_id = 'id'
    ___Position3D_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___Position3D_regional__item__regExtValue._const_tab = ____Position3D_regional__item__regionId_tab
    ___Position3D_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___Position3D_regional__item__regExtValue._const_tab_id = 'Type'
    __Position3D_regional__item_._cont = ASN1Dict([
        ('regionId', ___Position3D_regional__item__regionId),
        ('regExtValue', ___Position3D_regional__item__regExtValue),
        ])
    __Position3D_regional__item_._ext = None
    _Position3D_regional._cont = __Position3D_regional__item_
    _Position3D_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    Position3D._cont = ASN1Dict([
        ('lat', _Position3D_lat),
        ('long', _Position3D_long),
        ('elevation', _Position3D_elevation),
        ('regional', _Position3D_regional),
        ])
    Position3D._ext = []
    
    #-----< PositionalAccuracy >-----#
    PositionalAccuracy = SEQ(name='PositionalAccuracy', mode=MODE_TYPE)
    _PositionalAccuracy_semiMajor = INT(name='semiMajor', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SemiMajorAxisAccuracy')))
    _PositionalAccuracy_semiMinor = INT(name='semiMinor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SemiMinorAxisAccuracy')))
    _PositionalAccuracy_orientation = INT(name='orientation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SemiMajorAxisOrientation')))
    PositionalAccuracy._cont = ASN1Dict([
        ('semiMajor', _PositionalAccuracy_semiMajor),
        ('semiMinor', _PositionalAccuracy_semiMinor),
        ('orientation', _PositionalAccuracy_orientation),
        ])
    PositionalAccuracy._ext = None
    
    #-----< PositionConfidenceSet >-----#
    PositionConfidenceSet = SEQ(name='PositionConfidenceSet', mode=MODE_TYPE)
    _PositionConfidenceSet_pos = ENUM(name='pos', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionConfidence')))
    _PositionConfidenceSet_elevation = ENUM(name='elevation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ElevationConfidence')))
    PositionConfidenceSet._cont = ASN1Dict([
        ('pos', _PositionConfidenceSet_pos),
        ('elevation', _PositionConfidenceSet_elevation),
        ])
    PositionConfidenceSet._ext = None
    
    #-----< PrivilegedEvents >-----#
    PrivilegedEvents = SEQ(name='PrivilegedEvents', mode=MODE_TYPE)
    _PrivilegedEvents_doNotUse = INT(name='doNotUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SSPindex')))
    _PrivilegedEvents_event = BIT_STR(name='event', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PrivilegedEventFlags')))
    PrivilegedEvents._cont = ASN1Dict([
        ('doNotUse', _PrivilegedEvents_doNotUse),
        ('event', _PrivilegedEvents_event),
        ])
    PrivilegedEvents._ext = []
    
    #-----< RegulatorySpeedLimit >-----#
    RegulatorySpeedLimit = SEQ(name='RegulatorySpeedLimit', mode=MODE_TYPE)
    _RegulatorySpeedLimit_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedLimitType')))
    _RegulatorySpeedLimit_speed = INT(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Velocity')))
    RegulatorySpeedLimit._cont = ASN1Dict([
        ('type', _RegulatorySpeedLimit_type),
        ('speed', _RegulatorySpeedLimit_speed),
        ])
    RegulatorySpeedLimit._ext = None
    
    #-----< RequestorType >-----#
    RequestorType = SEQ(name='RequestorType', mode=MODE_TYPE)
    _RequestorType_role = ENUM(name='role', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BasicVehicleRole')))
    _RequestorType_subrole = ENUM(name='subrole', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RequestSubRole')), opt=True)
    _RequestorType_request = ENUM(name='request', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RequestImportanceLevel')), opt=True)
    _RequestorType_iso3883 = INT(name='iso3883', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Iso3833VehicleType')), opt=True)
    _RequestorType_hpmsType = ENUM(name='hpmsType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleType')), opt=True)
    _RequestorType_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __RequestorType_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___RequestorType_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___RequestorType_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __RequestorType_regional_regionId._const_tab = ___RequestorType_regional_regionId_tab
    __RequestorType_regional_regionId._const_tab_at = None
    __RequestorType_regional_regionId._const_tab_id = 'id'
    __RequestorType_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___RequestorType_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___RequestorType_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __RequestorType_regional_regExtValue._const_tab = ___RequestorType_regional_regExtValue_tab
    __RequestorType_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __RequestorType_regional_regExtValue._const_tab_id = 'Type'
    _RequestorType_regional._cont = ASN1Dict([
        ('regionId', __RequestorType_regional_regionId),
        ('regExtValue', __RequestorType_regional_regExtValue),
        ])
    _RequestorType_regional._ext = None
    RequestorType._cont = ASN1Dict([
        ('role', _RequestorType_role),
        ('subrole', _RequestorType_subrole),
        ('request', _RequestorType_request),
        ('iso3883', _RequestorType_iso3883),
        ('hpmsType', _RequestorType_hpmsType),
        ('regional', _RequestorType_regional),
        ])
    RequestorType._ext = []
    
    #-----< RoadSegmentReferenceID >-----#
    RoadSegmentReferenceID = SEQ(name='RoadSegmentReferenceID', mode=MODE_TYPE)
    _RoadSegmentReferenceID_region = INT(name='region', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadRegulatorID')), opt=True)
    _RoadSegmentReferenceID_id = INT(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadSegmentID')))
    RoadSegmentReferenceID._cont = ASN1Dict([
        ('region', _RoadSegmentReferenceID_region),
        ('id', _RoadSegmentReferenceID_id),
        ])
    RoadSegmentReferenceID._ext = None
    
    #-----< RTCMheader >-----#
    RTCMheader = SEQ(name='RTCMheader', mode=MODE_TYPE)
    _RTCMheader_status = BIT_STR(name='status', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GNSSstatus')))
    _RTCMheader_offsetSet = SEQ(name='offsetSet', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AntennaOffsetSet')))
    RTCMheader._cont = ASN1Dict([
        ('status', _RTCMheader_status),
        ('offsetSet', _RTCMheader_offsetSet),
        ])
    RTCMheader._ext = None
    
    #-----< RTCMmessageList >-----#
    RTCMmessageList = SEQ_OF(name='RTCMmessageList', mode=MODE_TYPE)
    _RTCMmessageList__item_ = OCT_STR(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RTCMmessage')))
    RTCMmessageList._cont = _RTCMmessageList__item_
    RTCMmessageList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    
    #-----< SegmentAttributeXYList >-----#
    SegmentAttributeXYList = SEQ_OF(name='SegmentAttributeXYList', mode=MODE_TYPE)
    _SegmentAttributeXYList__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'SegmentAttributeXY')))
    SegmentAttributeXYList._cont = _SegmentAttributeXYList__item_
    SegmentAttributeXYList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< SpeedandHeadingandThrottleConfidence >-----#
    SpeedandHeadingandThrottleConfidence = SEQ(name='SpeedandHeadingandThrottleConfidence', mode=MODE_TYPE)
    _SpeedandHeadingandThrottleConfidence_heading = ENUM(name='heading', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingConfidence')))
    _SpeedandHeadingandThrottleConfidence_speed = ENUM(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedConfidence')))
    _SpeedandHeadingandThrottleConfidence_throttle = ENUM(name='throttle', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ThrottleConfidence')))
    SpeedandHeadingandThrottleConfidence._cont = ASN1Dict([
        ('heading', _SpeedandHeadingandThrottleConfidence_heading),
        ('speed', _SpeedandHeadingandThrottleConfidence_speed),
        ('throttle', _SpeedandHeadingandThrottleConfidence_throttle),
        ])
    SpeedandHeadingandThrottleConfidence._ext = None
    
    #-----< SpeedLimitList >-----#
    SpeedLimitList = SEQ_OF(name='SpeedLimitList', mode=MODE_TYPE)
    _SpeedLimitList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegulatorySpeedLimit')))
    SpeedLimitList._cont = _SpeedLimitList__item_
    SpeedLimitList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9)], ev=None, er=[])
    
    #-----< SchoolBusJ2945Slash1C >-----#
    SchoolBusJ2945Slash1C = SEQ(name='SchoolBusJ2945Slash1C', mode=MODE_TYPE)
    _SchoolBusJ2945Slash1C_flashingAmberLights = BOOL(name='flashingAmberLights', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SchoolBusJ2945Slash1C_flashingRedLights = BOOL(name='flashingRedLights', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SchoolBusJ2945Slash1C_studentsCrossingFront = BOOL(name='studentsCrossingFront', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_studentsCrossingBehind = BOOL(name='studentsCrossingBehind', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_studentsLoading = BOOL(name='studentsLoading', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_studentsUnloading = BOOL(name='studentsUnloading', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_wheelchairLiftInUse = BOOL(name='wheelchairLiftInUse', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_emergencyExitOpen = BOOL(name='emergencyExitOpen', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_emergencyRequestMedical = BOOL(name='emergencyRequestMedical', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_emergencyRequestFire = BOOL(name='emergencyRequestFire', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SchoolBusJ2945Slash1C_emergencyRequestPolice = BOOL(name='emergencyRequestPolice', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    SchoolBusJ2945Slash1C._cont = ASN1Dict([
        ('flashingAmberLights', _SchoolBusJ2945Slash1C_flashingAmberLights),
        ('flashingRedLights', _SchoolBusJ2945Slash1C_flashingRedLights),
        ('studentsCrossingFront', _SchoolBusJ2945Slash1C_studentsCrossingFront),
        ('studentsCrossingBehind', _SchoolBusJ2945Slash1C_studentsCrossingBehind),
        ('studentsLoading', _SchoolBusJ2945Slash1C_studentsLoading),
        ('studentsUnloading', _SchoolBusJ2945Slash1C_studentsUnloading),
        ('wheelchairLiftInUse', _SchoolBusJ2945Slash1C_wheelchairLiftInUse),
        ('emergencyExitOpen', _SchoolBusJ2945Slash1C_emergencyExitOpen),
        ('emergencyRequestMedical', _SchoolBusJ2945Slash1C_emergencyRequestMedical),
        ('emergencyRequestFire', _SchoolBusJ2945Slash1C_emergencyRequestFire),
        ('emergencyRequestPolice', _SchoolBusJ2945Slash1C_emergencyRequestPolice),
        ])
    SchoolBusJ2945Slash1C._ext = []
    
    #-----< TrailersJ2945Slash1B >-----#
    TrailersJ2945Slash1B = SEQ_OF(name='TrailersJ2945Slash1B', mode=MODE_TYPE)
    _TrailersJ2945Slash1B__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'TrailerUnitDescJ2945Slash1B')))
    TrailersJ2945Slash1B._cont = _TrailersJ2945Slash1B__item_
    TrailersJ2945Slash1B._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    
    #-----< TrailerUnitDescJ2945Slash1B >-----#
    TrailerUnitDescJ2945Slash1B = SEQ(name='TrailerUnitDescJ2945Slash1B', mode=MODE_TYPE)
    _TrailerUnitDescJ2945Slash1B_width = INT(name='width', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleWidth')))
    _TrailerUnitDescJ2945Slash1B_length = INT(name='length', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleLength')))
    _TrailerUnitDescJ2945Slash1B_height = INT(name='height', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleHeight')), opt=True)
    _TrailerUnitDescJ2945Slash1B_weight = INT(name='weight', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TrailerWeight')), opt=True)
    _TrailerUnitDescJ2945Slash1B_frontPivot = SEQ(name='frontPivot', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'PivotPointDescription')))
    _TrailerUnitDescJ2945Slash1B_rearPivot = SEQ(name='rearPivot', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'PivotPointDescription')), opt=True)
    _TrailerUnitDescJ2945Slash1B_bumpers = SEQ(name='bumpers', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BumperHeights')), opt=True)
    _TrailerUnitDescJ2945Slash1B_axles = SEQ(name='axles', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Axles')), opt=True)
    TrailerUnitDescJ2945Slash1B._cont = ASN1Dict([
        ('width', _TrailerUnitDescJ2945Slash1B_width),
        ('length', _TrailerUnitDescJ2945Slash1B_length),
        ('height', _TrailerUnitDescJ2945Slash1B_height),
        ('weight', _TrailerUnitDescJ2945Slash1B_weight),
        ('frontPivot', _TrailerUnitDescJ2945Slash1B_frontPivot),
        ('rearPivot', _TrailerUnitDescJ2945Slash1B_rearPivot),
        ('bumpers', _TrailerUnitDescJ2945Slash1B_bumpers),
        ('axles', _TrailerUnitDescJ2945Slash1B_axles),
        ])
    TrailerUnitDescJ2945Slash1B._ext = []
    
    #-----< Axles >-----#
    Axles = SEQ(name='Axles', mode=MODE_TYPE)
    _Axles_totalAxles = INT(name='totalAxles', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Axles_totalAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    _Axles_frontAxles = INT(name='frontAxles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Axles_frontAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10)], ev=[], er=[])
    _Axles_rearAxles = INT(name='rearAxles', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Axles_rearAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10)], ev=[], er=[])
    Axles._cont = ASN1Dict([
        ('totalAxles', _Axles_totalAxles),
        ('frontAxles', _Axles_frontAxles),
        ('rearAxles', _Axles_rearAxles),
        ])
    Axles._ext = []
    
    #-----< TransmissionAndSpeed >-----#
    TransmissionAndSpeed = SEQ(name='TransmissionAndSpeed', mode=MODE_TYPE)
    _TransmissionAndSpeed_transmisson = ENUM(name='transmisson', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TransmissionState')))
    _TransmissionAndSpeed_speed = INT(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Velocity')))
    TransmissionAndSpeed._cont = ASN1Dict([
        ('transmisson', _TransmissionAndSpeed_transmisson),
        ('speed', _TransmissionAndSpeed_speed),
        ])
    TransmissionAndSpeed._ext = None
    
    #-----< VehicleClassification >-----#
    VehicleClassification = SEQ(name='VehicleClassification', mode=MODE_TYPE)
    _VehicleClassification_keyType = INT(name='keyType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BasicVehicleClass')), opt=True)
    _VehicleClassification_role = ENUM(name='role', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BasicVehicleRole')), opt=True)
    _VehicleClassification_iso3883 = INT(name='iso3883', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Iso3833VehicleType')), opt=True)
    _VehicleClassification_hpmsType = ENUM(name='hpmsType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleType')), opt=True)
    _VehicleClassification_vehicleType = ENUM(name='vehicleType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'VehicleGroupAffected')), opt=True)
    _VehicleClassification_responseEquip = ENUM(name='responseEquip', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'IncidentResponseEquipment')), opt=True)
    _VehicleClassification_responderType = ENUM(name='responderType', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ResponderGroupAffected')), opt=True)
    _VehicleClassification_fuelType = INT(name='fuelType', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FuelType')), opt=True)
    _VehicleClassification_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VehicleClassification_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___VehicleClassification_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____VehicleClassification_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____VehicleClassification_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___VehicleClassification_regional__item__regionId._const_tab = ____VehicleClassification_regional__item__regionId_tab
    ___VehicleClassification_regional__item__regionId._const_tab_at = None
    ___VehicleClassification_regional__item__regionId._const_tab_id = 'id'
    ___VehicleClassification_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____VehicleClassification_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____VehicleClassification_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___VehicleClassification_regional__item__regExtValue._const_tab = ____VehicleClassification_regional__item__regExtValue_tab
    ___VehicleClassification_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___VehicleClassification_regional__item__regExtValue._const_tab_id = 'Type'
    __VehicleClassification_regional__item_._cont = ASN1Dict([
        ('regionId', ___VehicleClassification_regional__item__regionId),
        ('regExtValue', ___VehicleClassification_regional__item__regExtValue),
        ])
    __VehicleClassification_regional__item_._ext = None
    _VehicleClassification_regional._cont = __VehicleClassification_regional__item_
    _VehicleClassification_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    VehicleClassification._cont = ASN1Dict([
        ('keyType', _VehicleClassification_keyType),
        ('role', _VehicleClassification_role),
        ('iso3883', _VehicleClassification_iso3883),
        ('hpmsType', _VehicleClassification_hpmsType),
        ('vehicleType', _VehicleClassification_vehicleType),
        ('responseEquip', _VehicleClassification_responseEquip),
        ('responderType', _VehicleClassification_responderType),
        ('fuelType', _VehicleClassification_fuelType),
        ('regional', _VehicleClassification_regional),
        ])
    VehicleClassification._ext = []
    
    #-----< VehicleID >-----#
    VehicleID = CHOICE(name='VehicleID', mode=MODE_TYPE)
    _VehicleID_entityID = OCT_STR(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _VehicleID_stationID = INT(name='stationID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'StationID')))
    VehicleID._cont = ASN1Dict([
        ('entityID', _VehicleID_entityID),
        ('stationID', _VehicleID_stationID),
        ])
    VehicleID._ext = None
    
    #-----< VehicleSafetyExtensions >-----#
    VehicleSafetyExtensions = SEQ(name='VehicleSafetyExtensions', mode=MODE_TYPE)
    _VehicleSafetyExtensions_events = BIT_STR(name='events', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleEventFlags')), opt=True)
    _VehicleSafetyExtensions_pathHistory = SEQ(name='pathHistory', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PathHistory')), opt=True)
    _VehicleSafetyExtensions_pathPrediction = SEQ(name='pathPrediction', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PathPrediction')), opt=True)
    _VehicleSafetyExtensions_lights = BIT_STR(name='lights', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ExteriorLights')), opt=True)
    VehicleSafetyExtensions._cont = ASN1Dict([
        ('events', _VehicleSafetyExtensions_events),
        ('pathHistory', _VehicleSafetyExtensions_pathHistory),
        ('pathPrediction', _VehicleSafetyExtensions_pathPrediction),
        ('lights', _VehicleSafetyExtensions_lights),
        ])
    VehicleSafetyExtensions._ext = []
    
    #-----< VehicleSize >-----#
    VehicleSize = SEQ(name='VehicleSize', mode=MODE_TYPE)
    _VehicleSize_width = INT(name='width', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleWidth')))
    _VehicleSize_length = INT(name='length', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleLength')))
    VehicleSize._cont = ASN1Dict([
        ('width', _VehicleSize_width),
        ('length', _VehicleSize_length),
        ])
    VehicleSize._ext = None
    
    #-----< VerticalOffset >-----#
    VerticalOffset = CHOICE(name='VerticalOffset', mode=MODE_TYPE)
    _VerticalOffset_offset1 = INT(name='offset1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('BasicSafetyMessage', 'VertOffset-B07')))
    _VerticalOffset_offset2 = INT(name='offset2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VertOffset-B08')))
    _VerticalOffset_offset3 = INT(name='offset3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VertOffset-B09')))
    _VerticalOffset_offset4 = INT(name='offset4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VertOffset-B10')))
    _VerticalOffset_offset5 = INT(name='offset5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VertOffset-B11')))
    _VerticalOffset_offset6 = INT(name='offset6', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VertOffset-B12')))
    _VerticalOffset_elevation = INT(name='elevation', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Elevation')))
    _VerticalOffset_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')))
    __VerticalOffset_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___VerticalOffset_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___VerticalOffset_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __VerticalOffset_regional_regionId._const_tab = ___VerticalOffset_regional_regionId_tab
    __VerticalOffset_regional_regionId._const_tab_at = None
    __VerticalOffset_regional_regionId._const_tab_id = 'id'
    __VerticalOffset_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___VerticalOffset_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___VerticalOffset_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __VerticalOffset_regional_regExtValue._const_tab = ___VerticalOffset_regional_regExtValue_tab
    __VerticalOffset_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __VerticalOffset_regional_regExtValue._const_tab_id = 'Type'
    _VerticalOffset_regional._cont = ASN1Dict([
        ('regionId', __VerticalOffset_regional_regionId),
        ('regExtValue', __VerticalOffset_regional_regExtValue),
        ])
    _VerticalOffset_regional._ext = None
    VerticalOffset._cont = ASN1Dict([
        ('offset1', _VerticalOffset_offset1),
        ('offset2', _VerticalOffset_offset2),
        ('offset3', _VerticalOffset_offset3),
        ('offset4', _VerticalOffset_offset4),
        ('offset5', _VerticalOffset_offset5),
        ('offset6', _VerticalOffset_offset6),
        ('elevation', _VerticalOffset_elevation),
        ('regional', _VerticalOffset_regional),
        ])
    VerticalOffset._ext = None
    
    #-----< WiperSet >-----#
    WiperSet = SEQ(name='WiperSet', mode=MODE_TYPE)
    _WiperSet_statusFront = ENUM(name='statusFront', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'WiperStatus')))
    _WiperSet_rateFront = INT(name='rateFront', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'WiperRate')))
    _WiperSet_statusRear = ENUM(name='statusRear', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'WiperStatus')), opt=True)
    _WiperSet_rateRear = INT(name='rateRear', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'WiperRate')), opt=True)
    WiperSet._cont = ASN1Dict([
        ('statusFront', _WiperSet_statusFront),
        ('rateFront', _WiperSet_rateFront),
        ('statusRear', _WiperSet_statusRear),
        ('rateRear', _WiperSet_rateRear),
        ])
    WiperSet._ext = None
    
    #-----< Acceleration >-----#
    Acceleration = INT(name='Acceleration', mode=MODE_TYPE)
    Acceleration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2000, ub=2001)], ev=None, er=[])
    
    #-----< AmbientAirPressure >-----#
    AmbientAirPressure = INT(name='AmbientAirPressure', mode=MODE_TYPE)
    AmbientAirPressure._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AmbientAirTemperature >-----#
    AmbientAirTemperature = INT(name='AmbientAirTemperature', mode=MODE_TYPE)
    AmbientAirTemperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=191)], ev=None, er=[])
    
    #-----< Angle >-----#
    Angle = INT(name='Angle', mode=MODE_TYPE)
    Angle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=28800)], ev=None, er=[])
    
    #-----< AntiLockBrakeStatus >-----#
    AntiLockBrakeStatus = ENUM(name='AntiLockBrakeStatus', mode=MODE_TYPE)
    AntiLockBrakeStatus._cont = ASN1Dict([('unavailable', 0), ('off', 1), ('on', 2), ('engaged', 3)])
    AntiLockBrakeStatus._ext = None
    
    #-----< ApproachID >-----#
    ApproachID = INT(name='ApproachID', mode=MODE_TYPE)
    ApproachID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< AuxiliaryBrakeStatus >-----#
    AuxiliaryBrakeStatus = ENUM(name='AuxiliaryBrakeStatus', mode=MODE_TYPE)
    AuxiliaryBrakeStatus._cont = ASN1Dict([('unavailable', 0), ('off', 1), ('on', 2), ('reserved', 3)])
    AuxiliaryBrakeStatus._ext = None
    
    #-----< BasicVehicleClass >-----#
    BasicVehicleClass = INT(name='BasicVehicleClass', mode=MODE_TYPE)
    BasicVehicleClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< unknownVehicleClass >-----#
    unknownVehicleClass = INT(name='unknownVehicleClass', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    unknownVehicleClass._val = 0
    
    #-----< specialVehicleClass >-----#
    specialVehicleClass = INT(name='specialVehicleClass', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    specialVehicleClass._val = 1
    
    #-----< passenger-Vehicle-TypeUnknown >-----#
    passenger_Vehicle_TypeUnknown = INT(name='passenger-Vehicle-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    passenger_Vehicle_TypeUnknown._val = 10
    
    #-----< passenger-Vehicle-TypeOther >-----#
    passenger_Vehicle_TypeOther = INT(name='passenger-Vehicle-TypeOther', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    passenger_Vehicle_TypeOther._val = 11
    
    #-----< lightTruck-Vehicle-TypeUnknown >-----#
    lightTruck_Vehicle_TypeUnknown = INT(name='lightTruck-Vehicle-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    lightTruck_Vehicle_TypeUnknown._val = 20
    
    #-----< lightTruck-Vehicle-TypeOther >-----#
    lightTruck_Vehicle_TypeOther = INT(name='lightTruck-Vehicle-TypeOther', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    lightTruck_Vehicle_TypeOther._val = 21
    
    #-----< truck-Vehicle-TypeUnknown >-----#
    truck_Vehicle_TypeUnknown = INT(name='truck-Vehicle-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_Vehicle_TypeUnknown._val = 25
    
    #-----< truck-Vehicle-TypeOther >-----#
    truck_Vehicle_TypeOther = INT(name='truck-Vehicle-TypeOther', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_Vehicle_TypeOther._val = 26
    
    #-----< truck-axleCnt2 >-----#
    truck_axleCnt2 = INT(name='truck-axleCnt2', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt2._val = 27
    
    #-----< truck-axleCnt3 >-----#
    truck_axleCnt3 = INT(name='truck-axleCnt3', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt3._val = 28
    
    #-----< truck-axleCnt4 >-----#
    truck_axleCnt4 = INT(name='truck-axleCnt4', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt4._val = 29
    
    #-----< truck-axleCnt4Trailer >-----#
    truck_axleCnt4Trailer = INT(name='truck-axleCnt4Trailer', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt4Trailer._val = 30
    
    #-----< truck-axleCnt5Trailer >-----#
    truck_axleCnt5Trailer = INT(name='truck-axleCnt5Trailer', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt5Trailer._val = 31
    
    #-----< truck-axleCnt6Trailer >-----#
    truck_axleCnt6Trailer = INT(name='truck-axleCnt6Trailer', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt6Trailer._val = 32
    
    #-----< truck-axleCnt5MultiTrailer >-----#
    truck_axleCnt5MultiTrailer = INT(name='truck-axleCnt5MultiTrailer', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt5MultiTrailer._val = 33
    
    #-----< truck-axleCnt6MultiTrailer >-----#
    truck_axleCnt6MultiTrailer = INT(name='truck-axleCnt6MultiTrailer', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt6MultiTrailer._val = 34
    
    #-----< truck-axleCnt7MultiTrailer >-----#
    truck_axleCnt7MultiTrailer = INT(name='truck-axleCnt7MultiTrailer', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    truck_axleCnt7MultiTrailer._val = 35
    
    #-----< motorcycle-TypeUnknown >-----#
    motorcycle_TypeUnknown = INT(name='motorcycle-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_TypeUnknown._val = 40
    
    #-----< motorcycle-TypeOther >-----#
    motorcycle_TypeOther = INT(name='motorcycle-TypeOther', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_TypeOther._val = 41
    
    #-----< motorcycle-Cruiser-Standard >-----#
    motorcycle_Cruiser_Standard = INT(name='motorcycle-Cruiser-Standard', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_Cruiser_Standard._val = 42
    
    #-----< motorcycle-SportUnclad >-----#
    motorcycle_SportUnclad = INT(name='motorcycle-SportUnclad', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_SportUnclad._val = 43
    
    #-----< motorcycle-SportTouring >-----#
    motorcycle_SportTouring = INT(name='motorcycle-SportTouring', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_SportTouring._val = 44
    
    #-----< motorcycle-SuperSport >-----#
    motorcycle_SuperSport = INT(name='motorcycle-SuperSport', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_SuperSport._val = 45
    
    #-----< motorcycle-Touring >-----#
    motorcycle_Touring = INT(name='motorcycle-Touring', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_Touring._val = 46
    
    #-----< motorcycle-Trike >-----#
    motorcycle_Trike = INT(name='motorcycle-Trike', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_Trike._val = 47
    
    #-----< motorcycle-wPassengers >-----#
    motorcycle_wPassengers = INT(name='motorcycle-wPassengers', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    motorcycle_wPassengers._val = 48
    
    #-----< transit-TypeUnknown >-----#
    transit_TypeUnknown = INT(name='transit-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_TypeUnknown._val = 50
    
    #-----< transit-TypeOther >-----#
    transit_TypeOther = INT(name='transit-TypeOther', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_TypeOther._val = 51
    
    #-----< transit-BRT >-----#
    transit_BRT = INT(name='transit-BRT', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_BRT._val = 52
    
    #-----< transit-ExpressBus >-----#
    transit_ExpressBus = INT(name='transit-ExpressBus', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_ExpressBus._val = 53
    
    #-----< transit-LocalBus >-----#
    transit_LocalBus = INT(name='transit-LocalBus', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_LocalBus._val = 54
    
    #-----< transit-SchoolBus >-----#
    transit_SchoolBus = INT(name='transit-SchoolBus', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_SchoolBus._val = 55
    
    #-----< transit-FixedGuideway >-----#
    transit_FixedGuideway = INT(name='transit-FixedGuideway', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_FixedGuideway._val = 56
    
    #-----< transit-Paratransit >-----#
    transit_Paratransit = INT(name='transit-Paratransit', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_Paratransit._val = 57
    
    #-----< transit-Paratransit-Ambulance >-----#
    transit_Paratransit_Ambulance = INT(name='transit-Paratransit-Ambulance', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    transit_Paratransit_Ambulance._val = 58
    
    #-----< emergency-TypeUnknown >-----#
    emergency_TypeUnknown = INT(name='emergency-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_TypeUnknown._val = 60
    
    #-----< emergency-TypeOther >-----#
    emergency_TypeOther = INT(name='emergency-TypeOther', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_TypeOther._val = 61
    
    #-----< emergency-Fire-Light-Vehicle >-----#
    emergency_Fire_Light_Vehicle = INT(name='emergency-Fire-Light-Vehicle', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Fire_Light_Vehicle._val = 62
    
    #-----< emergency-Fire-Heavy-Vehicle >-----#
    emergency_Fire_Heavy_Vehicle = INT(name='emergency-Fire-Heavy-Vehicle', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Fire_Heavy_Vehicle._val = 63
    
    #-----< emergency-Fire-Paramedic-Vehicle >-----#
    emergency_Fire_Paramedic_Vehicle = INT(name='emergency-Fire-Paramedic-Vehicle', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Fire_Paramedic_Vehicle._val = 64
    
    #-----< emergency-Fire-Ambulance-Vehicle >-----#
    emergency_Fire_Ambulance_Vehicle = INT(name='emergency-Fire-Ambulance-Vehicle', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Fire_Ambulance_Vehicle._val = 65
    
    #-----< emergency-Police-Light-Vehicle >-----#
    emergency_Police_Light_Vehicle = INT(name='emergency-Police-Light-Vehicle', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Police_Light_Vehicle._val = 66
    
    #-----< emergency-Police-Heavy-Vehicle >-----#
    emergency_Police_Heavy_Vehicle = INT(name='emergency-Police-Heavy-Vehicle', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Police_Heavy_Vehicle._val = 67
    
    #-----< emergency-Other-Responder >-----#
    emergency_Other_Responder = INT(name='emergency-Other-Responder', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Other_Responder._val = 68
    
    #-----< emergency-Other-Ambulance >-----#
    emergency_Other_Ambulance = INT(name='emergency-Other-Ambulance', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    emergency_Other_Ambulance._val = 69
    
    #-----< otherTraveler-TypeUnknown >-----#
    otherTraveler_TypeUnknown = INT(name='otherTraveler-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    otherTraveler_TypeUnknown._val = 80
    
    #-----< otherTraveler-TypeOther >-----#
    otherTraveler_TypeOther = INT(name='otherTraveler-TypeOther', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    otherTraveler_TypeOther._val = 81
    
    #-----< otherTraveler-Pedestrian >-----#
    otherTraveler_Pedestrian = INT(name='otherTraveler-Pedestrian', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    otherTraveler_Pedestrian._val = 82
    
    #-----< otherTraveler-Visually-Disabled >-----#
    otherTraveler_Visually_Disabled = INT(name='otherTraveler-Visually-Disabled', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    otherTraveler_Visually_Disabled._val = 83
    
    #-----< otherTraveler-Physically-Disabled >-----#
    otherTraveler_Physically_Disabled = INT(name='otherTraveler-Physically-Disabled', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    otherTraveler_Physically_Disabled._val = 84
    
    #-----< otherTraveler-Bicycle >-----#
    otherTraveler_Bicycle = INT(name='otherTraveler-Bicycle', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    otherTraveler_Bicycle._val = 85
    
    #-----< otherTraveler-Vulnerable-Roadworker >-----#
    otherTraveler_Vulnerable_Roadworker = INT(name='otherTraveler-Vulnerable-Roadworker', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    otherTraveler_Vulnerable_Roadworker._val = 86
    
    #-----< infrastructure-TypeUnknown >-----#
    infrastructure_TypeUnknown = INT(name='infrastructure-TypeUnknown', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    infrastructure_TypeUnknown._val = 90
    
    #-----< infrastructure-Fixed >-----#
    infrastructure_Fixed = INT(name='infrastructure-Fixed', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    infrastructure_Fixed._val = 91
    
    #-----< infrastructure-Movable >-----#
    infrastructure_Movable = INT(name='infrastructure-Movable', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    infrastructure_Movable._val = 92
    
    #-----< equipped-CargoTrailer >-----#
    equipped_CargoTrailer = INT(name='equipped-CargoTrailer', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'BasicVehicleClass')))
    equipped_CargoTrailer._val = 93
    
    #-----< BasicVehicleRole >-----#
    BasicVehicleRole = ENUM(name='BasicVehicleRole', mode=MODE_TYPE)
    BasicVehicleRole._cont = ASN1Dict([('basicVehicle', 0), ('publicTransport', 1), ('specialTransport', 2), ('dangerousGoods', 3), ('roadWork', 4), ('roadRescue', 5), ('emergency', 6), ('safetyCar', 7), ('none-unknown', 8), ('truck', 9), ('motorcycle', 10), ('roadSideSource', 11), ('police', 12), ('fire', 13), ('ambulance', 14), ('dot', 15), ('transit', 16), ('slowMoving', 17), ('stopNgo', 18), ('cyclist', 19), ('pedestrian', 20), ('nonMotorized', 21), ('military', 22)])
    BasicVehicleRole._ext = []
    
    #-----< BrakeAppliedStatus >-----#
    BrakeAppliedStatus = BIT_STR(name='BrakeAppliedStatus', mode=MODE_TYPE)
    BrakeAppliedStatus._cont = ASN1Dict([('unavailable', 0), ('leftFront', 1), ('leftRear', 2), ('rightFront', 3), ('rightRear', 4)])
    BrakeAppliedStatus._const_sz = ASN1Set(rv=[5], rr=[], ev=None, er=[])
    
    #-----< BrakeBoostApplied >-----#
    BrakeBoostApplied = ENUM(name='BrakeBoostApplied', mode=MODE_TYPE)
    BrakeBoostApplied._cont = ASN1Dict([('unavailable', 0), ('off', 1), ('on', 2)])
    BrakeBoostApplied._ext = None
    
    #-----< BumperHeight >-----#
    BumperHeight = INT(name='BumperHeight', mode=MODE_TYPE)
    BumperHeight._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    
    #-----< CoarseHeading >-----#
    CoarseHeading = INT(name='CoarseHeading', mode=MODE_TYPE)
    CoarseHeading._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=240)], ev=None, er=[])
    
    #-----< CodeWord >-----#
    CodeWord = OCT_STR(name='CodeWord', mode=MODE_TYPE)
    CodeWord._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< CoefficientOfFriction >-----#
    CoefficientOfFriction = INT(name='CoefficientOfFriction', mode=MODE_TYPE)
    CoefficientOfFriction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=50)], ev=None, er=[])
    
    #-----< Confidence >-----#
    Confidence = INT(name='Confidence', mode=MODE_TYPE)
    Confidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=200)], ev=None, er=[])
    
    #-----< Count >-----#
    Count = INT(name='Count', mode=MODE_TYPE)
    Count._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32)], ev=None, er=[])
    
    #-----< DDay >-----#
    DDay = INT(name='DDay', mode=MODE_TYPE)
    DDay._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< DeltaAngle >-----#
    DeltaAngle = INT(name='DeltaAngle', mode=MODE_TYPE)
    DeltaAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-150, ub=150)], ev=None, er=[])
    
    #-----< DescriptiveName >-----#
    DescriptiveName = STR_IA5(name='DescriptiveName', mode=MODE_TYPE)
    DescriptiveName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=63)], ev=None, er=[])
    
    #-----< DHour >-----#
    DHour = INT(name='DHour', mode=MODE_TYPE)
    DHour._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< DMinute >-----#
    DMinute = INT(name='DMinute', mode=MODE_TYPE)
    DMinute._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=60)], ev=None, er=[])
    
    #-----< DMonth >-----#
    DMonth = INT(name='DMonth', mode=MODE_TYPE)
    DMonth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=12)], ev=None, er=[])
    
    #-----< DOffset >-----#
    DOffset = INT(name='DOffset', mode=MODE_TYPE)
    DOffset._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-840, ub=840)], ev=None, er=[])
    
    #-----< DrivenLineOffsetLg >-----#
    DrivenLineOffsetLg = INT(name='DrivenLineOffsetLg', mode=MODE_TYPE)
    DrivenLineOffsetLg._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    #-----< DrivenLineOffsetSm >-----#
    DrivenLineOffsetSm = INT(name='DrivenLineOffsetSm', mode=MODE_TYPE)
    DrivenLineOffsetSm._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2047, ub=2047)], ev=None, er=[])
    
    #-----< DSecond >-----#
    DSecond = INT(name='DSecond', mode=MODE_TYPE)
    DSecond._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< reservedMessageId-D >-----#
    reservedMessageId_D = INT(name='reservedMessageId-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    reservedMessageId_D._val = 0
    
    #-----< alaCarteMessage-D >-----#
    alaCarteMessage_D = INT(name='alaCarteMessage-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    alaCarteMessage_D._val = 1
    
    #-----< basicSafetyMessage-D >-----#
    basicSafetyMessage_D = INT(name='basicSafetyMessage-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    basicSafetyMessage_D._val = 2
    
    #-----< basicSafetyMessageVerbose-D >-----#
    basicSafetyMessageVerbose_D = INT(name='basicSafetyMessageVerbose-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    basicSafetyMessageVerbose_D._val = 3
    
    #-----< commonSafetyRequest-D >-----#
    commonSafetyRequest_D = INT(name='commonSafetyRequest-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    commonSafetyRequest_D._val = 4
    
    #-----< emergencyVehicleAlert-D >-----#
    emergencyVehicleAlert_D = INT(name='emergencyVehicleAlert-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    emergencyVehicleAlert_D._val = 5
    
    #-----< intersectionCollision-D >-----#
    intersectionCollision_D = INT(name='intersectionCollision-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    intersectionCollision_D._val = 6
    
    #-----< mapData-D >-----#
    mapData_D = INT(name='mapData-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    mapData_D._val = 7
    
    #-----< nmeaCorrections-D >-----#
    nmeaCorrections_D = INT(name='nmeaCorrections-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    nmeaCorrections_D._val = 8
    
    #-----< probeDataManagement-D >-----#
    probeDataManagement_D = INT(name='probeDataManagement-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    probeDataManagement_D._val = 9
    
    #-----< probeVehicleData-D >-----#
    probeVehicleData_D = INT(name='probeVehicleData-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    probeVehicleData_D._val = 10
    
    #-----< roadSideAlert-D >-----#
    roadSideAlert_D = INT(name='roadSideAlert-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    roadSideAlert_D._val = 11
    
    #-----< rtcmCorrections-D >-----#
    rtcmCorrections_D = INT(name='rtcmCorrections-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    rtcmCorrections_D._val = 12
    
    #-----< signalPhaseAndTimingMessage-D >-----#
    signalPhaseAndTimingMessage_D = INT(name='signalPhaseAndTimingMessage-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalPhaseAndTimingMessage_D._val = 13
    
    #-----< signalRequestMessage-D >-----#
    signalRequestMessage_D = INT(name='signalRequestMessage-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalRequestMessage_D._val = 14
    
    #-----< signalStatusMessage-D >-----#
    signalStatusMessage_D = INT(name='signalStatusMessage-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalStatusMessage_D._val = 15
    
    #-----< travelerInformation-D >-----#
    travelerInformation_D = INT(name='travelerInformation-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    travelerInformation_D._val = 16
    
    #-----< uperFrame-D >-----#
    uperFrame_D = INT(name='uperFrame-D', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    uperFrame_D._val = 17
    
    #-----< Duration >-----#
    Duration = INT(name='Duration', mode=MODE_TYPE)
    Duration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3600)], ev=None, er=[])
    
    #-----< DYear >-----#
    DYear = INT(name='DYear', mode=MODE_TYPE)
    DYear._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    
    #-----< ElevationConfidence >-----#
    ElevationConfidence = ENUM(name='ElevationConfidence', mode=MODE_TYPE)
    ElevationConfidence._cont = ASN1Dict([('unavailable', 0), ('elev-500-00', 1), ('elev-200-00', 2), ('elev-100-00', 3), ('elev-050-00', 4), ('elev-020-00', 5), ('elev-010-00', 6), ('elev-005-00', 7), ('elev-002-00', 8), ('elev-001-00', 9), ('elev-000-50', 10), ('elev-000-20', 11), ('elev-000-10', 12), ('elev-000-05', 13), ('elev-000-02', 14), ('elev-000-01', 15)])
    ElevationConfidence._ext = None
    
    #-----< Elevation >-----#
    Elevation = INT(name='Elevation', mode=MODE_TYPE)
    Elevation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-4096, ub=61439)], ev=None, er=[])
    
    #-----< Extent >-----#
    Extent = ENUM(name='Extent', mode=MODE_TYPE)
    Extent._cont = ASN1Dict([('useInstantlyOnly', 0), ('useFor3meters', 1), ('useFor10meters', 2), ('useFor50meters', 3), ('useFor100meters', 4), ('useFor500meters', 5), ('useFor1000meters', 6), ('useFor5000meters', 7), ('useFor10000meters', 8), ('useFor50000meters', 9), ('useFor100000meters', 10), ('useFor500000meters', 11), ('useFor1000000meters', 12), ('useFor5000000meters', 13), ('useFor10000000meters', 14), ('forever', 15)])
    Extent._ext = None
    
    #-----< ExteriorLights >-----#
    ExteriorLights = BIT_STR(name='ExteriorLights', mode=MODE_TYPE)
    ExteriorLights._cont = ASN1Dict([('lowBeamHeadlightsOn', 0), ('highBeamHeadlightsOn', 1), ('leftTurnSignalOn', 2), ('rightTurnSignalOn', 3), ('hazardSignalOn', 4), ('automaticLightControlOn', 5), ('daytimeRunningLightsOn', 6), ('fogLightOn', 7), ('parkingLightsOn', 8)])
    ExteriorLights._const_sz = ASN1Set(rv=[9], rr=[], ev=[], er=[])
    
    #-----< FrictionInformation >-----#
    FrictionInformation = SEQ(name='FrictionInformation', mode=MODE_TYPE)
    _FrictionInformation_roadSurfaceDescription = CHOICE(name='roadSurfaceDescription', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'DescriptionOfRoadSurface')))
    _FrictionInformation_dryOrWet = ENUM(name='dryOrWet', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadSurfaceCondition')), opt=True)
    _FrictionInformation_roadRoughness = SEQ(name='roadRoughness', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadRoughness')), opt=True)
    FrictionInformation._cont = ASN1Dict([
        ('roadSurfaceDescription', _FrictionInformation_roadSurfaceDescription),
        ('dryOrWet', _FrictionInformation_dryOrWet),
        ('roadRoughness', _FrictionInformation_roadRoughness),
        ])
    FrictionInformation._ext = []
    
    #-----< DescriptionOfRoadSurface >-----#
    DescriptionOfRoadSurface = CHOICE(name='DescriptionOfRoadSurface', mode=MODE_TYPE)
    _DescriptionOfRoadSurface_portlandCement = SEQ(name='portlandCement', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PortlandCement')))
    _DescriptionOfRoadSurface_asphaltOrTar = SEQ(name='asphaltOrTar', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AsphaltOrTar')))
    _DescriptionOfRoadSurface_gravel = SEQ(name='gravel', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Gravel')))
    _DescriptionOfRoadSurface_grass = SEQ(name='grass', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Grass')))
    _DescriptionOfRoadSurface_cinders = SEQ(name='cinders', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Cinders')))
    _DescriptionOfRoadSurface_rock = SEQ(name='rock', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Rock')))
    _DescriptionOfRoadSurface_ice = SEQ(name='ice', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Ice')))
    _DescriptionOfRoadSurface_snow = SEQ(name='snow', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Snow')))
    DescriptionOfRoadSurface._cont = ASN1Dict([
        ('portlandCement', _DescriptionOfRoadSurface_portlandCement),
        ('asphaltOrTar', _DescriptionOfRoadSurface_asphaltOrTar),
        ('gravel', _DescriptionOfRoadSurface_gravel),
        ('grass', _DescriptionOfRoadSurface_grass),
        ('cinders', _DescriptionOfRoadSurface_cinders),
        ('rock', _DescriptionOfRoadSurface_rock),
        ('ice', _DescriptionOfRoadSurface_ice),
        ('snow', _DescriptionOfRoadSurface_snow),
        ])
    DescriptionOfRoadSurface._ext = []
    
    #-----< PortlandCement >-----#
    PortlandCement = SEQ(name='PortlandCement', mode=MODE_TYPE)
    _PortlandCement_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PortlandCementType')))
    PortlandCement._cont = ASN1Dict([
        ('type', _PortlandCement_type),
        ])
    PortlandCement._ext = []
    
    #-----< PortlandCementType >-----#
    PortlandCementType = ENUM(name='PortlandCementType', mode=MODE_TYPE)
    PortlandCementType._cont = ASN1Dict([('newSharp', 0), ('traveled', 1), ('trafficPolished', 2)])
    PortlandCementType._ext = []
    
    #-----< AsphaltOrTar >-----#
    AsphaltOrTar = SEQ(name='AsphaltOrTar', mode=MODE_TYPE)
    _AsphaltOrTar_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AsphaltOrTarType')))
    AsphaltOrTar._cont = ASN1Dict([
        ('type', _AsphaltOrTar_type),
        ])
    AsphaltOrTar._ext = []
    
    #-----< AsphaltOrTarType >-----#
    AsphaltOrTarType = ENUM(name='AsphaltOrTarType', mode=MODE_TYPE)
    AsphaltOrTarType._cont = ASN1Dict([('newSharp', 0), ('traveled', 1), ('trafficPolished', 2), ('excessTar', 3)])
    AsphaltOrTarType._ext = []
    
    #-----< Gravel >-----#
    Gravel = SEQ(name='Gravel', mode=MODE_TYPE)
    _Gravel_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GravelType')))
    Gravel._cont = ASN1Dict([
        ('type', _Gravel_type),
        ])
    Gravel._ext = []
    
    #-----< GravelType >-----#
    GravelType = ENUM(name='GravelType', mode=MODE_TYPE)
    GravelType._cont = ASN1Dict([('packedOiled', 0), ('loose', 1)])
    GravelType._ext = []
    
    #-----< Grass >-----#
    Grass = SEQ(name='Grass', mode=MODE_TYPE)
    _Grass_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GrassType')))
    Grass._cont = ASN1Dict([
        ('type', _Grass_type),
        ])
    Grass._ext = []
    
    #-----< GrassType >-----#
    GrassType = ENUM(name='GrassType', mode=MODE_TYPE)
    GrassType._cont = ASN1Dict([('lessThan30Mph', 0)])
    GrassType._ext = []
    
    #-----< Cinders >-----#
    Cinders = SEQ(name='Cinders', mode=MODE_TYPE)
    _Cinders_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'CindersType')))
    Cinders._cont = ASN1Dict([
        ('type', _Cinders_type),
        ])
    Cinders._ext = []
    
    #-----< CindersType >-----#
    CindersType = ENUM(name='CindersType', mode=MODE_TYPE)
    CindersType._cont = ASN1Dict([('packed', 0)])
    CindersType._ext = []
    
    #-----< Rock >-----#
    Rock = SEQ(name='Rock', mode=MODE_TYPE)
    _Rock_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RockType')))
    Rock._cont = ASN1Dict([
        ('type', _Rock_type),
        ])
    Rock._ext = []
    
    #-----< RockType >-----#
    RockType = ENUM(name='RockType', mode=MODE_TYPE)
    RockType._cont = ASN1Dict([('crushed', 0)])
    RockType._ext = []
    
    #-----< Ice >-----#
    Ice = SEQ(name='Ice', mode=MODE_TYPE)
    _Ice_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IceType')))
    Ice._cont = ASN1Dict([
        ('type', _Ice_type),
        ])
    Ice._ext = []
    
    #-----< IceType >-----#
    IceType = ENUM(name='IceType', mode=MODE_TYPE)
    IceType._cont = ASN1Dict([('smooth', 0)])
    IceType._ext = []
    
    #-----< Snow >-----#
    Snow = SEQ(name='Snow', mode=MODE_TYPE)
    _Snow_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SnowType')))
    Snow._cont = ASN1Dict([
        ('type', _Snow_type),
        ])
    Snow._ext = []
    
    #-----< SnowType >-----#
    SnowType = ENUM(name='SnowType', mode=MODE_TYPE)
    SnowType._cont = ASN1Dict([('packed', 0), ('loose', 1)])
    SnowType._ext = []
    
    #-----< RoadSurfaceCondition >-----#
    RoadSurfaceCondition = ENUM(name='RoadSurfaceCondition', mode=MODE_TYPE)
    RoadSurfaceCondition._cont = ASN1Dict([('dry', 0), ('wet', 1)])
    RoadSurfaceCondition._ext = []
    
    #-----< RoadRoughness >-----#
    RoadRoughness = SEQ(name='RoadRoughness', mode=MODE_TYPE)
    _RoadRoughness_meanVerticalVariation = INT(name='meanVerticalVariation', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MeanVariation')))
    _RoadRoughness_verticalVariationStdDev = INT(name='verticalVariationStdDev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VariationStdDev')), opt=True)
    _RoadRoughness_meanHorizontalVariation = INT(name='meanHorizontalVariation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MeanVariation')), opt=True)
    _RoadRoughness_horizontalVariationStdDev = INT(name='horizontalVariationStdDev', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VariationStdDev')), opt=True)
    RoadRoughness._cont = ASN1Dict([
        ('meanVerticalVariation', _RoadRoughness_meanVerticalVariation),
        ('verticalVariationStdDev', _RoadRoughness_verticalVariationStdDev),
        ('meanHorizontalVariation', _RoadRoughness_meanHorizontalVariation),
        ('horizontalVariationStdDev', _RoadRoughness_horizontalVariationStdDev),
        ])
    RoadRoughness._ext = []
    
    #-----< MeanVariation >-----#
    MeanVariation = INT(name='MeanVariation', mode=MODE_TYPE)
    MeanVariation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=25000)], ev=None, er=[])
    
    #-----< VariationStdDev >-----#
    VariationStdDev = INT(name='VariationStdDev', mode=MODE_TYPE)
    VariationStdDev._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2500)], ev=None, er=[])
    
    #-----< FuelType >-----#
    FuelType = INT(name='FuelType', mode=MODE_TYPE)
    FuelType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< unknownFuel >-----#
    unknownFuel = INT(name='unknownFuel', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    unknownFuel._val = 0
    
    #-----< gasoline >-----#
    gasoline = INT(name='gasoline', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    gasoline._val = 1
    
    #-----< ethanol >-----#
    ethanol = INT(name='ethanol', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    ethanol._val = 2
    
    #-----< diesel >-----#
    diesel = INT(name='diesel', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    diesel._val = 3
    
    #-----< electric >-----#
    electric = INT(name='electric', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    electric._val = 4
    
    #-----< hybrid >-----#
    hybrid = INT(name='hybrid', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    hybrid._val = 5
    
    #-----< hydrogen >-----#
    hydrogen = INT(name='hydrogen', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    hydrogen._val = 6
    
    #-----< natGasLiquid >-----#
    natGasLiquid = INT(name='natGasLiquid', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    natGasLiquid._val = 7
    
    #-----< natGasComp >-----#
    natGasComp = INT(name='natGasComp', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    natGasComp._val = 8
    
    #-----< propane >-----#
    propane = INT(name='propane', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'FuelType')))
    propane._val = 9
    
    #-----< FurtherInfoID >-----#
    FurtherInfoID = OCT_STR(name='FurtherInfoID', mode=MODE_TYPE)
    FurtherInfoID._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< GNSSstatus >-----#
    GNSSstatus = BIT_STR(name='GNSSstatus', mode=MODE_TYPE)
    GNSSstatus._cont = ASN1Dict([('unavailable', 0), ('isHealthy', 1), ('isMonitored', 2), ('baseStationType', 3), ('aPDOPofUnder5', 4), ('inViewOfUnder5', 5), ('localCorrectionsPresent', 6), ('networkCorrectionsPresent', 7)])
    GNSSstatus._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< GrossSpeed >-----#
    GrossSpeed = INT(name='GrossSpeed', mode=MODE_TYPE)
    GrossSpeed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< HeadingConfidence >-----#
    HeadingConfidence = ENUM(name='HeadingConfidence', mode=MODE_TYPE)
    HeadingConfidence._cont = ASN1Dict([('unavailable', 0), ('prec10deg', 1), ('prec05deg', 2), ('prec01deg', 3), ('prec0-1deg', 4), ('prec0-05deg', 5), ('prec0-01deg', 6), ('prec0-0125deg', 7)])
    HeadingConfidence._ext = None
    
    #-----< Heading >-----#
    Heading = INT(name='Heading', mode=MODE_TYPE)
    Heading._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=28800)], ev=None, er=[])
    
    #-----< HeadingSlice >-----#
    HeadingSlice = BIT_STR(name='HeadingSlice', mode=MODE_TYPE)
    HeadingSlice._cont = ASN1Dict([('from000-0to022-5degrees', 0), ('from022-5to045-0degrees', 1), ('from045-0to067-5degrees', 2), ('from067-5to090-0degrees', 3), ('from090-0to112-5degrees', 4), ('from112-5to135-0degrees', 5), ('from135-0to157-5degrees', 6), ('from157-5to180-0degrees', 7), ('from180-0to202-5degrees', 8), ('from202-5to225-0degrees', 9), ('from225-0to247-5degrees', 10), ('from247-5to270-0degrees', 11), ('from270-0to292-5degrees', 12), ('from292-5to315-0degrees', 13), ('from315-0to337-5degrees', 14), ('from337-5to360-0degrees', 15)])
    HeadingSlice._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< IntersectionID >-----#
    IntersectionID = INT(name='IntersectionID', mode=MODE_TYPE)
    IntersectionID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Iso3833VehicleType >-----#
    Iso3833VehicleType = INT(name='Iso3833VehicleType', mode=MODE_TYPE)
    Iso3833VehicleType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=100)], ev=None, er=[])
    
    #-----< TrailerWeight >-----#
    TrailerWeight = INT(name='TrailerWeight', mode=MODE_TYPE)
    TrailerWeight._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64255)], ev=None, er=[])
    
    #-----< LaneConnectionID >-----#
    LaneConnectionID = INT(name='LaneConnectionID', mode=MODE_TYPE)
    LaneConnectionID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LaneID >-----#
    LaneID = INT(name='LaneID', mode=MODE_TYPE)
    LaneID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LaneWidth >-----#
    LaneWidth = INT(name='LaneWidth', mode=MODE_TYPE)
    LaneWidth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    
    #-----< Latitude >-----#
    Latitude = INT(name='Latitude', mode=MODE_TYPE)
    Latitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-900000000, ub=900000001)], ev=None, er=[])
    
    #-----< LightbarInUse >-----#
    LightbarInUse = ENUM(name='LightbarInUse', mode=MODE_TYPE)
    LightbarInUse._cont = ASN1Dict([('unavailable', 0), ('notInUse', 1), ('inUse', 2), ('yellowCautionLights', 3), ('schooldBusLights', 4), ('arrowSignsActive', 5), ('slowMovingVehicle', 6), ('freqStops', 7)])
    LightbarInUse._ext = None
    
    #-----< Longitude >-----#
    Longitude = INT(name='Longitude', mode=MODE_TYPE)
    Longitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1799999999, ub=1800000001)], ev=None, er=[])
    
    #-----< Location-quality >-----#
    Location_quality = ENUM(name='Location-quality', mode=MODE_TYPE)
    Location_quality._cont = ASN1Dict([('loc-qual-bt1m', 0), ('loc-qual-bt5m', 1), ('loc-qual-bt12m', 2), ('loc-qual-bt50m', 3), ('loc-qual-bt125m', 4), ('loc-qual-bt500m', 5), ('loc-qual-bt1250m', 6), ('loc-qual-unknown', 7)])
    Location_quality._ext = None
    
    #-----< Location-tech >-----#
    Location_tech = ENUM(name='Location-tech', mode=MODE_TYPE)
    Location_tech._cont = ASN1Dict([('loc-tech-unknown', 0), ('loc-tech-GNSS', 1), ('loc-tech-DGPS', 2), ('loc-tech-RTK', 3), ('loc-tech-PPP', 4), ('loc-tech-drGPS', 5), ('loc-tech-drDGPS', 6), ('loc-tech-dr', 7), ('loc-tech-nav', 8), ('loc-tech-fault', 9)])
    Location_tech._ext = []
    
    #-----< MergeDivergeNodeAngle >-----#
    MergeDivergeNodeAngle = INT(name='MergeDivergeNodeAngle', mode=MODE_TYPE)
    MergeDivergeNodeAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-180, ub=180)], ev=None, er=[])
    
    #-----< MessageBLOB >-----#
    MessageBLOB = OCT_STR(name='MessageBLOB', mode=MODE_TYPE)
    MessageBLOB._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=2000)], ev=None, er=[])
    
    #-----< MinuteOfTheYear >-----#
    MinuteOfTheYear = INT(name='MinuteOfTheYear', mode=MODE_TYPE)
    MinuteOfTheYear._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=527040)], ev=None, er=[])
    
    #-----< MsgCount >-----#
    MsgCount = INT(name='MsgCount', mode=MODE_TYPE)
    MsgCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    
    #-----< MultiVehicleResponse >-----#
    MultiVehicleResponse = ENUM(name='MultiVehicleResponse', mode=MODE_TYPE)
    MultiVehicleResponse._cont = ASN1Dict([('unavailable', 0), ('singleVehicle', 1), ('multiVehicle', 2), ('reserved', 3)])
    MultiVehicleResponse._ext = None
    
    #-----< NodeAttributeXY >-----#
    NodeAttributeXY = ENUM(name='NodeAttributeXY', mode=MODE_TYPE)
    NodeAttributeXY._cont = ASN1Dict([('reserved', 0), ('stopLine', 1), ('roundedCapStyleA', 2), ('roundedCapStyleB', 3), ('mergePoint', 4), ('divergePoint', 5), ('downstreamStopLine', 6), ('downstreamStartNode', 7), ('closedToTraffic', 8), ('safeIsland', 9), ('curbPresentAtStepOff', 10), ('hydrantPresent', 11)])
    NodeAttributeXY._ext = []
    
    #-----< ObstacleDistance >-----#
    ObstacleDistance = INT(name='ObstacleDistance', mode=MODE_TYPE)
    ObstacleDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    
    #-----< Offset-B09 >-----#
    Offset_B09 = INT(name='Offset-B09', mode=MODE_TYPE)
    Offset_B09._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-256, ub=255)], ev=None, er=[])
    
    #-----< Offset-B10 >-----#
    Offset_B10 = INT(name='Offset-B10', mode=MODE_TYPE)
    Offset_B10._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-512, ub=511)], ev=None, er=[])
    
    #-----< Offset-B11 >-----#
    Offset_B11 = INT(name='Offset-B11', mode=MODE_TYPE)
    Offset_B11._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1024, ub=1023)], ev=None, er=[])
    
    #-----< Offset-B12 >-----#
    Offset_B12 = INT(name='Offset-B12', mode=MODE_TYPE)
    Offset_B12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2048, ub=2047)], ev=None, er=[])
    
    #-----< Offset-B13 >-----#
    Offset_B13 = INT(name='Offset-B13', mode=MODE_TYPE)
    Offset_B13._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-4096, ub=4095)], ev=None, er=[])
    
    #-----< Offset-B14 >-----#
    Offset_B14 = INT(name='Offset-B14', mode=MODE_TYPE)
    Offset_B14._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8192, ub=8191)], ev=None, er=[])
    
    #-----< Offset-B16 >-----#
    Offset_B16 = INT(name='Offset-B16', mode=MODE_TYPE)
    Offset_B16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    
    #-----< OffsetLL-B18 >-----#
    OffsetLL_B18 = INT(name='OffsetLL-B18', mode=MODE_TYPE)
    OffsetLL_B18._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-131072, ub=131071)], ev=None, er=[])
    
    #-----< PayloadData >-----#
    PayloadData = OCT_STR(name='PayloadData', mode=MODE_TYPE)
    PayloadData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=2048)], ev=None, er=[])
    
    #-----< PositionConfidence >-----#
    PositionConfidence = ENUM(name='PositionConfidence', mode=MODE_TYPE)
    PositionConfidence._cont = ASN1Dict([('unavailable', 0), ('a500m', 1), ('a200m', 2), ('a100m', 3), ('a50m', 4), ('a20m', 5), ('a10m', 6), ('a5m', 7), ('a2m', 8), ('a1m', 9), ('a50cm', 10), ('a20cm', 11), ('a10cm', 12), ('a5cm', 13), ('a2cm', 14), ('a1cm', 15)])
    PositionConfidence._ext = None
    
    #-----< PrioritizationResponseStatus >-----#
    PrioritizationResponseStatus = ENUM(name='PrioritizationResponseStatus', mode=MODE_TYPE)
    PrioritizationResponseStatus._cont = ASN1Dict([('unknown', 0), ('requested', 1), ('processing', 2), ('watchOtherTraffic', 3), ('granted', 4), ('rejected', 5), ('maxPresence', 6), ('reserviceLocked', 7)])
    PrioritizationResponseStatus._ext = []
    
    #-----< Priority >-----#
    Priority = OCT_STR(name='Priority', mode=MODE_TYPE)
    Priority._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    
    #-----< PrivilegedEventFlags >-----#
    PrivilegedEventFlags = BIT_STR(name='PrivilegedEventFlags', mode=MODE_TYPE)
    PrivilegedEventFlags._cont = ASN1Dict([('peUnavailable', 0), ('peEmergencyResponse', 1), ('peEmergencyLightsActive', 2), ('peEmergencySoundActive', 3), ('peNonEmergencyLightsActive', 4), ('peNonEmergencySoundActive', 5)])
    PrivilegedEventFlags._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< RadiusOfCurvature >-----#
    RadiusOfCurvature = INT(name='RadiusOfCurvature', mode=MODE_TYPE)
    RadiusOfCurvature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    #-----< RegionId >-----#
    RegionId = INT(name='RegionId', mode=MODE_TYPE)
    RegionId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< noRegion >-----#
    noRegion = INT(name='noRegion', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'RegionId')))
    noRegion._val = 0
    
    #-----< addGrpA >-----#
    addGrpA = INT(name='addGrpA', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'RegionId')))
    addGrpA._val = 1
    
    #-----< addGrpB >-----#
    addGrpB = INT(name='addGrpB', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'RegionId')))
    addGrpB._val = 2
    
    #-----< addGrpC >-----#
    addGrpC = INT(name='addGrpC', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'RegionId')))
    addGrpC._val = 3
    
    #-----< addGrpD >-----#
    addGrpD = INT(name='addGrpD', mode=MODE_VALUE, typeref=ASN1RefType(('Common', 'RegionId')))
    addGrpD._val = 4
    
    #-----< RequestID >-----#
    RequestID = INT(name='RequestID', mode=MODE_TYPE)
    RequestID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RequestImportanceLevel >-----#
    RequestImportanceLevel = ENUM(name='RequestImportanceLevel', mode=MODE_TYPE)
    RequestImportanceLevel._cont = ASN1Dict([('requestImportanceLevelUnKnown', 0), ('requestImportanceLevel1', 1), ('requestImportanceLevel2', 2), ('requestImportanceLevel3', 3), ('requestImportanceLevel4', 4), ('requestImportanceLevel5', 5), ('requestImportanceLevel6', 6), ('requestImportanceLevel7', 7), ('requestImportanceLevel8', 8), ('requestImportanceLevel9', 9), ('requestImportanceLevel10', 10), ('requestImportanceLevel11', 11), ('requestImportanceLevel12', 12), ('requestImportanceLevel13', 13), ('requestImportanceLevel14', 14), ('requestImportanceReserved', 15)])
    RequestImportanceLevel._ext = None
    
    #-----< RequestSubRole >-----#
    RequestSubRole = ENUM(name='RequestSubRole', mode=MODE_TYPE)
    RequestSubRole._cont = ASN1Dict([('requestSubRoleUnKnown', 0), ('requestSubRole1', 1), ('requestSubRole2', 2), ('requestSubRole3', 3), ('requestSubRole4', 4), ('requestSubRole5', 5), ('requestSubRole6', 6), ('requestSubRole7', 7), ('requestSubRole8', 8), ('requestSubRole9', 9), ('requestSubRole10', 10), ('requestSubRole11', 11), ('requestSubRole12', 12), ('requestSubRole13', 13), ('requestSubRole14', 14), ('requestSubRoleReserved', 15)])
    RequestSubRole._ext = None
    
    #-----< ResponseType >-----#
    ResponseType = ENUM(name='ResponseType', mode=MODE_TYPE)
    ResponseType._cont = ASN1Dict([('notInUseOrNotEquipped', 0), ('emergency', 1), ('nonEmergency', 2), ('pursuit', 3), ('stationary', 4), ('slowMoving', 5), ('stopAndGoMovement', 6)])
    ResponseType._ext = []
    
    #-----< RestrictionClassID >-----#
    RestrictionClassID = INT(name='RestrictionClassID', mode=MODE_TYPE)
    RestrictionClassID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RoadAuthorityID >-----#
    RoadAuthorityID = CHOICE(name='RoadAuthorityID', mode=MODE_TYPE)
    _RoadAuthorityID_fullRdAuthID = OID(name='fullRdAuthID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullRoadAuthorityID')))
    _RoadAuthorityID_relRdAuthID = REL_OID(name='relRdAuthID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RelativeRoadAuthorityID')))
    RoadAuthorityID._cont = ASN1Dict([
        ('fullRdAuthID', _RoadAuthorityID_fullRdAuthID),
        ('relRdAuthID', _RoadAuthorityID_relRdAuthID),
        ])
    RoadAuthorityID._ext = []
    
    #-----< FullRoadAuthorityID >-----#
    FullRoadAuthorityID = OID(name='FullRoadAuthorityID', mode=MODE_TYPE)
    
    #-----< RelativeRoadAuthorityID >-----#
    RelativeRoadAuthorityID = REL_OID(name='RelativeRoadAuthorityID', mode=MODE_TYPE)
    
    #-----< RoadRegulatorID >-----#
    RoadRegulatorID = INT(name='RoadRegulatorID', mode=MODE_TYPE)
    RoadRegulatorID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RoadSegmentID >-----#
    RoadSegmentID = INT(name='RoadSegmentID', mode=MODE_TYPE)
    RoadSegmentID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RoadwayCrownAngle >-----#
    RoadwayCrownAngle = INT(name='RoadwayCrownAngle', mode=MODE_TYPE)
    RoadwayCrownAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-128, ub=127)], ev=None, er=[])
    
    #-----< RTCMmessage >-----#
    RTCMmessage = OCT_STR(name='RTCMmessage', mode=MODE_TYPE)
    RTCMmessage._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1023)], ev=None, er=[])
    
    #-----< Scale-B12 >-----#
    Scale_B12 = INT(name='Scale-B12', mode=MODE_TYPE)
    Scale_B12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2048, ub=2047)], ev=None, er=[])
    
    #-----< SegmentAttributeXY >-----#
    SegmentAttributeXY = ENUM(name='SegmentAttributeXY', mode=MODE_TYPE)
    SegmentAttributeXY._cont = ASN1Dict([('reserved', 0), ('doNotBlock', 1), ('whiteLine', 2), ('mergingLaneLeft', 3), ('mergingLaneRight', 4), ('curbOnLeft', 5), ('curbOnRight', 6), ('loadingzoneOnLeft', 7), ('loadingzoneOnRight', 8), ('turnOutPointOnLeft', 9), ('turnOutPointOnRight', 10), ('adjacentParkingOnLeft', 11), ('adjacentParkingOnRight', 12), ('adjacentBikeLaneOnLeft', 13), ('adjacentBikeLaneOnRight', 14), ('sharedBikeLane', 15), ('bikeBoxInFront', 16), ('transitStopOnLeft', 17), ('transitStopOnRight', 18), ('transitStopInLane', 19), ('sharedWithTrackedVehicle', 20), ('safeIsland', 21), ('lowCurbsPresent', 22), ('rumbleStripPresent', 23), ('audibleSignalingPresent', 24), ('adaptiveTimingPresent', 25), ('rfSignalRequestPresent', 26), ('partialCurbIntrusion', 27), ('taperToLeft', 28), ('taperToRight', 29), ('taperToCenterLine', 30), ('parallelParking', 31), ('headInParking', 32), ('freeParking', 33), ('timeRestrictionsOnParking', 34), ('costToPark', 35), ('midBlockCurbPresent', 36), ('unEvenPavementPresent', 37)])
    SegmentAttributeXY._ext = []
    
    #-----< SemiMajorAxisAccuracy >-----#
    SemiMajorAxisAccuracy = INT(name='SemiMajorAxisAccuracy', mode=MODE_TYPE)
    SemiMajorAxisAccuracy._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SemiMajorAxisOrientation >-----#
    SemiMajorAxisOrientation = INT(name='SemiMajorAxisOrientation', mode=MODE_TYPE)
    SemiMajorAxisOrientation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< SemiMinorAxisAccuracy >-----#
    SemiMinorAxisAccuracy = INT(name='SemiMinorAxisAccuracy', mode=MODE_TYPE)
    SemiMinorAxisAccuracy._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SignalGroupID >-----#
    SignalGroupID = INT(name='SignalGroupID', mode=MODE_TYPE)
    SignalGroupID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SignalReqScheme >-----#
    SignalReqScheme = OCT_STR(name='SignalReqScheme', mode=MODE_TYPE)
    SignalReqScheme._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    
    #-----< SirenInUse >-----#
    SirenInUse = ENUM(name='SirenInUse', mode=MODE_TYPE)
    SirenInUse._cont = ASN1Dict([('unavailable', 0), ('notInUse', 1), ('inUse', 2), ('reserved', 3)])
    SirenInUse._ext = None
    
    #-----< SpeedConfidence >-----#
    SpeedConfidence = ENUM(name='SpeedConfidence', mode=MODE_TYPE)
    SpeedConfidence._cont = ASN1Dict([('unavailable', 0), ('prec100ms', 1), ('prec10ms', 2), ('prec5ms', 3), ('prec1ms', 4), ('prec0-1ms', 5), ('prec0-05ms', 6), ('prec0-01ms', 7)])
    SpeedConfidence._ext = None
    
    #-----< SpeedLimitType >-----#
    SpeedLimitType = ENUM(name='SpeedLimitType', mode=MODE_TYPE)
    SpeedLimitType._cont = ASN1Dict([('unknown', 0), ('maxSpeedInSchoolZone', 1), ('maxSpeedInSchoolZoneWhenChildrenArePresent', 2), ('maxSpeedInConstructionZone', 3), ('vehicleMinSpeed', 4), ('vehicleMaxSpeed', 5), ('vehicleNightMaxSpeed', 6), ('truckMinSpeed', 7), ('truckMaxSpeed', 8), ('truckNightMaxSpeed', 9), ('vehiclesWithTrailersMinSpeed', 10), ('vehiclesWithTrailersMaxSpeed', 11), ('vehiclesWithTrailersNightMaxSpeed', 12)])
    SpeedLimitType._ext = []
    
    #-----< Speed >-----#
    Speed = INT(name='Speed', mode=MODE_TYPE)
    Speed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8191)], ev=None, er=[])
    
    #-----< SSPindex >-----#
    SSPindex = INT(name='SSPindex', mode=MODE_TYPE)
    SSPindex._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< StabilityControlStatus >-----#
    StabilityControlStatus = ENUM(name='StabilityControlStatus', mode=MODE_TYPE)
    StabilityControlStatus._cont = ASN1Dict([('unavailable', 0), ('off', 1), ('on', 2), ('engaged', 3)])
    StabilityControlStatus._ext = None
    
    #-----< StationID >-----#
    StationID = INT(name='StationID', mode=MODE_TYPE)
    StationID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< SteeringWheelAngle >-----#
    SteeringWheelAngle = INT(name='SteeringWheelAngle', mode=MODE_TYPE)
    SteeringWheelAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-126, ub=127)], ev=None, er=[])
    
    #-----< TemporaryID >-----#
    TemporaryID = OCT_STR(name='TemporaryID', mode=MODE_TYPE)
    TemporaryID._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    
    #-----< ThrottleConfidence >-----#
    ThrottleConfidence = ENUM(name='ThrottleConfidence', mode=MODE_TYPE)
    ThrottleConfidence._cont = ASN1Dict([('unavailable', 0), ('prec10percent', 1), ('prec1percent', 2), ('prec0-5percent', 3)])
    ThrottleConfidence._ext = None
    
    #-----< TimeConfidence >-----#
    TimeConfidence = ENUM(name='TimeConfidence', mode=MODE_TYPE)
    TimeConfidence._cont = ASN1Dict([('unavailable', 0), ('time-100-000', 1), ('time-050-000', 2), ('time-020-000', 3), ('time-010-000', 4), ('time-002-000', 5), ('time-001-000', 6), ('time-000-500', 7), ('time-000-200', 8), ('time-000-100', 9), ('time-000-050', 10), ('time-000-020', 11), ('time-000-010', 12), ('time-000-005', 13), ('time-000-002', 14), ('time-000-001', 15), ('time-000-000-5', 16), ('time-000-000-2', 17), ('time-000-000-1', 18), ('time-000-000-05', 19), ('time-000-000-02', 20), ('time-000-000-01', 21), ('time-000-000-005', 22), ('time-000-000-002', 23), ('time-000-000-001', 24), ('time-000-000-000-5', 25), ('time-000-000-000-2', 26), ('time-000-000-000-1', 27), ('time-000-000-000-05', 28), ('time-000-000-000-02', 29), ('time-000-000-000-01', 30), ('time-000-000-000-005', 31), ('time-000-000-000-002', 32), ('time-000-000-000-001', 33), ('time-000-000-000-000-5', 34), ('time-000-000-000-000-2', 35), ('time-000-000-000-000-1', 36), ('time-000-000-000-000-05', 37), ('time-000-000-000-000-02', 38), ('time-000-000-000-000-01', 39)])
    TimeConfidence._ext = None
    
    #-----< TimeOffset >-----#
    TimeOffset = INT(name='TimeOffset', mode=MODE_TYPE)
    TimeOffset._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65535)], ev=None, er=[])
    
    #-----< TractionControlStatus >-----#
    TractionControlStatus = ENUM(name='TractionControlStatus', mode=MODE_TYPE)
    TractionControlStatus._cont = ASN1Dict([('unavailable', 0), ('off', 1), ('on', 2), ('engaged', 3)])
    TractionControlStatus._ext = None
    
    #-----< TransitStatus >-----#
    TransitStatus = BIT_STR(name='TransitStatus', mode=MODE_TYPE)
    TransitStatus._cont = ASN1Dict([('none', 0), ('anADAuse', 1), ('aBikeLoad', 2), ('doorOpen', 3), ('occM', 4), ('occL', 5)])
    TransitStatus._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    
    #-----< TransmissionState >-----#
    TransmissionState = ENUM(name='TransmissionState', mode=MODE_TYPE)
    TransmissionState._cont = ASN1Dict([('neutral', 0), ('park', 1), ('forwardGears', 2), ('reverseGears', 3), ('reserved1', 4), ('reserved2', 5), ('reserved3', 6), ('unavailable', 7)])
    TransmissionState._ext = None
    
    #-----< URL-Link >-----#
    URL_Link = STR_IA5(name='URL-Link', mode=MODE_TYPE)
    URL_Link._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< VehicleEventFlags >-----#
    VehicleEventFlags = BIT_STR(name='VehicleEventFlags', mode=MODE_TYPE)
    VehicleEventFlags._cont = ASN1Dict([('eventHazardLights', 0), ('eventStopLineViolation', 1), ('eventABSactivated', 2), ('eventTractionControlLoss', 3), ('eventStabilityControlactivated', 4), ('eventHazardousMaterials', 5), ('eventReserved1', 6), ('eventHardBraking', 7), ('eventLightsChanged', 8), ('eventWipersChanged', 9), ('eventFlatTire', 10), ('eventDisabledVehicle', 11), ('eventAirBagDeployment', 12), ('eventJackKnife', 13)])
    VehicleEventFlags._const_sz = ASN1Set(rv=[13], rr=[], ev=[14], er=[])
    
    #-----< VehicleHeight >-----#
    VehicleHeight = INT(name='VehicleHeight', mode=MODE_TYPE)
    VehicleHeight._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    
    #-----< VehicleLength >-----#
    VehicleLength = INT(name='VehicleLength', mode=MODE_TYPE)
    VehicleLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    
    #-----< VehicleMass >-----#
    VehicleMass = INT(name='VehicleMass', mode=MODE_TYPE)
    VehicleMass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VehicleType >-----#
    VehicleType = ENUM(name='VehicleType', mode=MODE_TYPE)
    VehicleType._cont = ASN1Dict([('none', 0), ('unknown', 1), ('special', 2), ('moto', 3), ('car', 4), ('carOther', 5), ('bus', 6), ('axleCnt2', 7), ('axleCnt3', 8), ('axleCnt4', 9), ('axleCnt4Trailer', 10), ('axleCnt5Trailer', 11), ('axleCnt6Trailer', 12), ('axleCnt5MultiTrailer', 13), ('axleCnt6MultiTrailer', 14), ('axleCnt7MultiTrailer', 15)])
    VehicleType._ext = []
    
    #-----< VehicleWidth >-----#
    VehicleWidth = INT(name='VehicleWidth', mode=MODE_TYPE)
    VehicleWidth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    
    #-----< Velocity >-----#
    Velocity = INT(name='Velocity', mode=MODE_TYPE)
    Velocity._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8191)], ev=None, er=[])
    
    #-----< VerticalAccelerationThreshold >-----#
    VerticalAccelerationThreshold = BIT_STR(name='VerticalAccelerationThreshold', mode=MODE_TYPE)
    VerticalAccelerationThreshold._cont = ASN1Dict([('notEquipped', 0), ('leftFront', 1), ('leftRear', 2), ('rightFront', 3), ('rightRear', 4)])
    VerticalAccelerationThreshold._const_sz = ASN1Set(rv=[5], rr=[], ev=None, er=[])
    
    #-----< VerticalAcceleration >-----#
    VerticalAcceleration = INT(name='VerticalAcceleration', mode=MODE_TYPE)
    VerticalAcceleration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-127, ub=127)], ev=None, er=[])
    
    #-----< VertOffset-B08 >-----#
    VertOffset_B08 = INT(name='VertOffset-B08', mode=MODE_TYPE)
    VertOffset_B08._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-128, ub=127)], ev=None, er=[])
    
    #-----< VertOffset-B09 >-----#
    VertOffset_B09 = INT(name='VertOffset-B09', mode=MODE_TYPE)
    VertOffset_B09._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-256, ub=255)], ev=None, er=[])
    
    #-----< VertOffset-B10 >-----#
    VertOffset_B10 = INT(name='VertOffset-B10', mode=MODE_TYPE)
    VertOffset_B10._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-512, ub=511)], ev=None, er=[])
    
    #-----< VertOffset-B11 >-----#
    VertOffset_B11 = INT(name='VertOffset-B11', mode=MODE_TYPE)
    VertOffset_B11._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1024, ub=1023)], ev=None, er=[])
    
    #-----< VertOffset-B12 >-----#
    VertOffset_B12 = INT(name='VertOffset-B12', mode=MODE_TYPE)
    VertOffset_B12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2048, ub=2047)], ev=None, er=[])
    
    #-----< WiperRate >-----#
    WiperRate = INT(name='WiperRate', mode=MODE_TYPE)
    WiperRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    
    #-----< WiperStatus >-----#
    WiperStatus = ENUM(name='WiperStatus', mode=MODE_TYPE)
    WiperStatus._cont = ASN1Dict([('unavailable', 0), ('off', 1), ('intermittent', 2), ('low', 3), ('high', 4), ('washerInUse', 5), ('automaticPresent', 6)])
    WiperStatus._ext = []
    
    #-----< YawRate >-----#
    YawRate = INT(name='YawRate', mode=MODE_TYPE)
    YawRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    _all_ = [
        _REG_EXT_ID_AND_TYPE_id,
        _REG_EXT_ID_AND_TYPE_Type,
        REG_EXT_ID_AND_TYPE,
        _AccelerationSet4Way_long,
        _AccelerationSet4Way_lat,
        _AccelerationSet4Way_vert,
        _AccelerationSet4Way_yaw,
        AccelerationSet4Way,
        _AntennaOffsetSet_antOffsetX,
        _AntennaOffsetSet_antOffsetY,
        _AntennaOffsetSet_antOffsetZ,
        AntennaOffsetSet,
        _BrakeSystemStatus_wheelBrakes,
        _BrakeSystemStatus_traction,
        _BrakeSystemStatus_abs,
        _BrakeSystemStatus_scs,
        _BrakeSystemStatus_brakeBoost,
        _BrakeSystemStatus_auxBrakes,
        BrakeSystemStatus,
        _BSMcoreData_msgCnt,
        _BSMcoreData_id,
        _BSMcoreData_secMark,
        _BSMcoreData_lat,
        _BSMcoreData_long,
        _BSMcoreData_elev,
        _BSMcoreData_accuracy,
        _BSMcoreData_transmission,
        _BSMcoreData_speed,
        _BSMcoreData_heading,
        _BSMcoreData_angle,
        _BSMcoreData_accelSet,
        _BSMcoreData_brakes,
        _BSMcoreData_size,
        BSMcoreData,
        _BumperHeights_front,
        _BumperHeights_rear,
        BumperHeights,
        _ComputedLane_referenceLaneId,
        __ComputedLane_offsetXaxis_small,
        __ComputedLane_offsetXaxis_large,
        _ComputedLane_offsetXaxis,
        __ComputedLane_offsetYaxis_small,
        __ComputedLane_offsetYaxis_large,
        _ComputedLane_offsetYaxis,
        _ComputedLane_rotateXY,
        _ComputedLane_scaleXaxis,
        _ComputedLane_scaleYaxis,
        ____ComputedLane_regional__item__regionId_tab,
        ___ComputedLane_regional__item__regionId,
        ____ComputedLane_regional__item__regExtValue_tab,
        ___ComputedLane_regional__item__regExtValue,
        __ComputedLane_regional__item_,
        _ComputedLane_regional,
        ComputedLane,
        _DDate_year,
        _DDate_month,
        _DDate_day,
        DDate,
        _DDateTime_year,
        _DDateTime_month,
        _DDateTime_day,
        _DDateTime_hour,
        _DDateTime_minute,
        _DDateTime_second,
        _DDateTime_offset,
        DDateTime,
        _DFullTime_year,
        _DFullTime_month,
        _DFullTime_day,
        _DFullTime_hour,
        _DFullTime_minute,
        DFullTime,
        _DMonthDay_month,
        _DMonthDay_day,
        DMonthDay,
        _DTime_hour,
        _DTime_minute,
        _DTime_second,
        _DTime_offset,
        DTime,
        _DYearMonth_year,
        _DYearMonth_month,
        DYearMonth,
        _EmergencyDetails_doNotUse,
        _EmergencyDetails_sirenUse,
        _EmergencyDetails_lightsUse,
        _EmergencyDetails_multi,
        _EmergencyDetails_events,
        _EmergencyDetails_responseType,
        EmergencyDetails,
        _FullPositionVector_utcTime,
        _FullPositionVector_long,
        _FullPositionVector_lat,
        _FullPositionVector_elevation,
        _FullPositionVector_heading,
        _FullPositionVector_speed,
        _FullPositionVector_posAccuracy,
        _FullPositionVector_timeConfidence,
        _FullPositionVector_posConfidence,
        _FullPositionVector_speedConfidence,
        FullPositionVector,
        _Header_year,
        _Header_timeStamp,
        _Header_secMark,
        _Header_msgIssueRevision,
        Header,
        _IntersectionAccessPoint_lane,
        _IntersectionAccessPoint_approach,
        _IntersectionAccessPoint_connection,
        IntersectionAccessPoint,
        _IntersectionReferenceID_region,
        _IntersectionReferenceID_id,
        IntersectionReferenceID,
        _LaneDataAttribute_pathEndPointAngle,
        _LaneDataAttribute_laneCrownPointCenter,
        _LaneDataAttribute_laneCrownPointLeft,
        _LaneDataAttribute_laneCrownPointRight,
        _LaneDataAttribute_laneAngle,
        _LaneDataAttribute_speedLimits,
        ____LaneDataAttribute_regional__item__regionId_tab,
        _____LaneDataAttribute_regional__item__regionId_tab_val_Type_0,
        ___LaneDataAttribute_regional__item__regionId,
        ___LaneDataAttribute_regional__item__regExtValue,
        __LaneDataAttribute_regional__item_,
        _LaneDataAttribute_regional,
        LaneDataAttribute,
        _LaneDataAttributeList__item_,
        LaneDataAttributeList,
        _Node_LLmD_64b_lon,
        _Node_LLmD_64b_lat,
        Node_LLmD_64b,
        _Node_XY_20b_x,
        _Node_XY_20b_y,
        Node_XY_20b,
        _Node_XY_22b_x,
        _Node_XY_22b_y,
        Node_XY_22b,
        _Node_XY_24b_x,
        _Node_XY_24b_y,
        Node_XY_24b,
        _Node_XY_26b_x,
        _Node_XY_26b_y,
        Node_XY_26b,
        _Node_XY_28b_x,
        _Node_XY_28b_y,
        Node_XY_28b,
        _Node_XY_32b_x,
        _Node_XY_32b_y,
        Node_XY_32b,
        _NodeAttributeSetXY_localNode,
        _NodeAttributeSetXY_disabled,
        _NodeAttributeSetXY_enabled,
        _NodeAttributeSetXY_data,
        _NodeAttributeSetXY_dWidth,
        _NodeAttributeSetXY_dElevation,
        ____NodeAttributeSetXY_regional__item__regionId_tab,
        ___NodeAttributeSetXY_regional__item__regionId,
        ____NodeAttributeSetXY_regional__item__regExtValue_tab,
        ___NodeAttributeSetXY_regional__item__regExtValue,
        __NodeAttributeSetXY_regional__item_,
        _NodeAttributeSetXY_regional,
        NodeAttributeSetXY,
        _NodeAttributeXYList__item_,
        NodeAttributeXYList,
        _NodeListXY_nodes,
        _NodeListXY_computed,
        NodeListXY,
        _NodeOffsetPointXY_node_XY1,
        _NodeOffsetPointXY_node_XY2,
        _NodeOffsetPointXY_node_XY3,
        _NodeOffsetPointXY_node_XY4,
        _NodeOffsetPointXY_node_XY5,
        _NodeOffsetPointXY_node_XY6,
        _NodeOffsetPointXY_node_LatLon,
        ___NodeOffsetPointXY_regional_regionId_tab,
        ____NodeOffsetPointXY_regional_regionId_tab_val_Type_0,
        __NodeOffsetPointXY_regional_regionId,
        __NodeOffsetPointXY_regional_regExtValue,
        _NodeOffsetPointXY_regional,
        NodeOffsetPointXY,
        _NodeSetXY__item_,
        NodeSetXY,
        _NodeXY_delta,
        _NodeXY_attributes,
        NodeXY,
        _PathHistory_initialPosition,
        _PathHistory_currGNSSstatus,
        _PathHistory_crumbData,
        PathHistory,
        _PathHistoryPointList__item_,
        PathHistoryPointList,
        _PathHistoryPoint_latOffset,
        _PathHistoryPoint_lonOffset,
        _PathHistoryPoint_elevationOffset,
        _PathHistoryPoint_timeOffset,
        _PathHistoryPoint_speed,
        _PathHistoryPoint_posAccuracy,
        _PathHistoryPoint_heading,
        PathHistoryPoint,
        _PathPrediction_radiusOfCurve,
        _PathPrediction_confidence,
        PathPrediction,
        _Position3D_lat,
        _Position3D_long,
        _Position3D_elevation,
        ____Position3D_regional__item__regionId_tab,
        _____Position3D_regional__item__regionId_tab_val_Type_0,
        _____Position3D_regional__item__regionId_tab_val_Type_1,
        ___Position3D_regional__item__regionId,
        ___Position3D_regional__item__regExtValue,
        __Position3D_regional__item_,
        _Position3D_regional,
        Position3D,
        _PositionalAccuracy_semiMajor,
        _PositionalAccuracy_semiMinor,
        _PositionalAccuracy_orientation,
        PositionalAccuracy,
        _PositionConfidenceSet_pos,
        _PositionConfidenceSet_elevation,
        PositionConfidenceSet,
        _PrivilegedEvents_doNotUse,
        _PrivilegedEvents_event,
        PrivilegedEvents,
        _RegulatorySpeedLimit_type,
        _RegulatorySpeedLimit_speed,
        RegulatorySpeedLimit,
        _RequestorType_role,
        _RequestorType_subrole,
        _RequestorType_request,
        _RequestorType_iso3883,
        _RequestorType_hpmsType,
        ___RequestorType_regional_regionId_tab,
        __RequestorType_regional_regionId,
        ___RequestorType_regional_regExtValue_tab,
        __RequestorType_regional_regExtValue,
        _RequestorType_regional,
        RequestorType,
        _RoadSegmentReferenceID_region,
        _RoadSegmentReferenceID_id,
        RoadSegmentReferenceID,
        _RTCMheader_status,
        _RTCMheader_offsetSet,
        RTCMheader,
        _RTCMmessageList__item_,
        RTCMmessageList,
        _SegmentAttributeXYList__item_,
        SegmentAttributeXYList,
        _SpeedandHeadingandThrottleConfidence_heading,
        _SpeedandHeadingandThrottleConfidence_speed,
        _SpeedandHeadingandThrottleConfidence_throttle,
        SpeedandHeadingandThrottleConfidence,
        _SpeedLimitList__item_,
        SpeedLimitList,
        _SchoolBusJ2945Slash1C_flashingAmberLights,
        _SchoolBusJ2945Slash1C_flashingRedLights,
        _SchoolBusJ2945Slash1C_studentsCrossingFront,
        _SchoolBusJ2945Slash1C_studentsCrossingBehind,
        _SchoolBusJ2945Slash1C_studentsLoading,
        _SchoolBusJ2945Slash1C_studentsUnloading,
        _SchoolBusJ2945Slash1C_wheelchairLiftInUse,
        _SchoolBusJ2945Slash1C_emergencyExitOpen,
        _SchoolBusJ2945Slash1C_emergencyRequestMedical,
        _SchoolBusJ2945Slash1C_emergencyRequestFire,
        _SchoolBusJ2945Slash1C_emergencyRequestPolice,
        SchoolBusJ2945Slash1C,
        _TrailersJ2945Slash1B__item_,
        TrailersJ2945Slash1B,
        _TrailerUnitDescJ2945Slash1B_width,
        _TrailerUnitDescJ2945Slash1B_length,
        _TrailerUnitDescJ2945Slash1B_height,
        _TrailerUnitDescJ2945Slash1B_weight,
        _TrailerUnitDescJ2945Slash1B_frontPivot,
        _TrailerUnitDescJ2945Slash1B_rearPivot,
        _TrailerUnitDescJ2945Slash1B_bumpers,
        _TrailerUnitDescJ2945Slash1B_axles,
        TrailerUnitDescJ2945Slash1B,
        _Axles_totalAxles,
        _Axles_frontAxles,
        _Axles_rearAxles,
        Axles,
        _TransmissionAndSpeed_transmisson,
        _TransmissionAndSpeed_speed,
        TransmissionAndSpeed,
        _VehicleClassification_keyType,
        _VehicleClassification_role,
        _VehicleClassification_iso3883,
        _VehicleClassification_hpmsType,
        _VehicleClassification_vehicleType,
        _VehicleClassification_responseEquip,
        _VehicleClassification_responderType,
        _VehicleClassification_fuelType,
        ____VehicleClassification_regional__item__regionId_tab,
        ___VehicleClassification_regional__item__regionId,
        ____VehicleClassification_regional__item__regExtValue_tab,
        ___VehicleClassification_regional__item__regExtValue,
        __VehicleClassification_regional__item_,
        _VehicleClassification_regional,
        VehicleClassification,
        _VehicleID_entityID,
        _VehicleID_stationID,
        VehicleID,
        _VehicleSafetyExtensions_events,
        _VehicleSafetyExtensions_pathHistory,
        _VehicleSafetyExtensions_pathPrediction,
        _VehicleSafetyExtensions_lights,
        VehicleSafetyExtensions,
        _VehicleSize_width,
        _VehicleSize_length,
        VehicleSize,
        _VerticalOffset_offset1,
        _VerticalOffset_offset2,
        _VerticalOffset_offset3,
        _VerticalOffset_offset4,
        _VerticalOffset_offset5,
        _VerticalOffset_offset6,
        _VerticalOffset_elevation,
        ___VerticalOffset_regional_regionId_tab,
        __VerticalOffset_regional_regionId,
        ___VerticalOffset_regional_regExtValue_tab,
        __VerticalOffset_regional_regExtValue,
        _VerticalOffset_regional,
        VerticalOffset,
        _WiperSet_statusFront,
        _WiperSet_rateFront,
        _WiperSet_statusRear,
        _WiperSet_rateRear,
        WiperSet,
        Acceleration,
        AmbientAirPressure,
        AmbientAirTemperature,
        Angle,
        AntiLockBrakeStatus,
        ApproachID,
        AuxiliaryBrakeStatus,
        BasicVehicleClass,
        unknownVehicleClass,
        specialVehicleClass,
        passenger_Vehicle_TypeUnknown,
        passenger_Vehicle_TypeOther,
        lightTruck_Vehicle_TypeUnknown,
        lightTruck_Vehicle_TypeOther,
        truck_Vehicle_TypeUnknown,
        truck_Vehicle_TypeOther,
        truck_axleCnt2,
        truck_axleCnt3,
        truck_axleCnt4,
        truck_axleCnt4Trailer,
        truck_axleCnt5Trailer,
        truck_axleCnt6Trailer,
        truck_axleCnt5MultiTrailer,
        truck_axleCnt6MultiTrailer,
        truck_axleCnt7MultiTrailer,
        motorcycle_TypeUnknown,
        motorcycle_TypeOther,
        motorcycle_Cruiser_Standard,
        motorcycle_SportUnclad,
        motorcycle_SportTouring,
        motorcycle_SuperSport,
        motorcycle_Touring,
        motorcycle_Trike,
        motorcycle_wPassengers,
        transit_TypeUnknown,
        transit_TypeOther,
        transit_BRT,
        transit_ExpressBus,
        transit_LocalBus,
        transit_SchoolBus,
        transit_FixedGuideway,
        transit_Paratransit,
        transit_Paratransit_Ambulance,
        emergency_TypeUnknown,
        emergency_TypeOther,
        emergency_Fire_Light_Vehicle,
        emergency_Fire_Heavy_Vehicle,
        emergency_Fire_Paramedic_Vehicle,
        emergency_Fire_Ambulance_Vehicle,
        emergency_Police_Light_Vehicle,
        emergency_Police_Heavy_Vehicle,
        emergency_Other_Responder,
        emergency_Other_Ambulance,
        otherTraveler_TypeUnknown,
        otherTraveler_TypeOther,
        otherTraveler_Pedestrian,
        otherTraveler_Visually_Disabled,
        otherTraveler_Physically_Disabled,
        otherTraveler_Bicycle,
        otherTraveler_Vulnerable_Roadworker,
        infrastructure_TypeUnknown,
        infrastructure_Fixed,
        infrastructure_Movable,
        equipped_CargoTrailer,
        BasicVehicleRole,
        BrakeAppliedStatus,
        BrakeBoostApplied,
        BumperHeight,
        CoarseHeading,
        CodeWord,
        CoefficientOfFriction,
        Confidence,
        Count,
        DDay,
        DeltaAngle,
        DescriptiveName,
        DHour,
        DMinute,
        DMonth,
        DOffset,
        DrivenLineOffsetLg,
        DrivenLineOffsetSm,
        DSecond,
        reservedMessageId_D,
        alaCarteMessage_D,
        basicSafetyMessage_D,
        basicSafetyMessageVerbose_D,
        commonSafetyRequest_D,
        emergencyVehicleAlert_D,
        intersectionCollision_D,
        mapData_D,
        nmeaCorrections_D,
        probeDataManagement_D,
        probeVehicleData_D,
        roadSideAlert_D,
        rtcmCorrections_D,
        signalPhaseAndTimingMessage_D,
        signalRequestMessage_D,
        signalStatusMessage_D,
        travelerInformation_D,
        uperFrame_D,
        Duration,
        DYear,
        ElevationConfidence,
        Elevation,
        Extent,
        ExteriorLights,
        _FrictionInformation_roadSurfaceDescription,
        _FrictionInformation_dryOrWet,
        _FrictionInformation_roadRoughness,
        FrictionInformation,
        _DescriptionOfRoadSurface_portlandCement,
        _DescriptionOfRoadSurface_asphaltOrTar,
        _DescriptionOfRoadSurface_gravel,
        _DescriptionOfRoadSurface_grass,
        _DescriptionOfRoadSurface_cinders,
        _DescriptionOfRoadSurface_rock,
        _DescriptionOfRoadSurface_ice,
        _DescriptionOfRoadSurface_snow,
        DescriptionOfRoadSurface,
        _PortlandCement_type,
        PortlandCement,
        PortlandCementType,
        _AsphaltOrTar_type,
        AsphaltOrTar,
        AsphaltOrTarType,
        _Gravel_type,
        Gravel,
        GravelType,
        _Grass_type,
        Grass,
        GrassType,
        _Cinders_type,
        Cinders,
        CindersType,
        _Rock_type,
        Rock,
        RockType,
        _Ice_type,
        Ice,
        IceType,
        _Snow_type,
        Snow,
        SnowType,
        RoadSurfaceCondition,
        _RoadRoughness_meanVerticalVariation,
        _RoadRoughness_verticalVariationStdDev,
        _RoadRoughness_meanHorizontalVariation,
        _RoadRoughness_horizontalVariationStdDev,
        RoadRoughness,
        MeanVariation,
        VariationStdDev,
        FuelType,
        unknownFuel,
        gasoline,
        ethanol,
        diesel,
        electric,
        hybrid,
        hydrogen,
        natGasLiquid,
        natGasComp,
        propane,
        FurtherInfoID,
        GNSSstatus,
        GrossSpeed,
        HeadingConfidence,
        Heading,
        HeadingSlice,
        IntersectionID,
        Iso3833VehicleType,
        TrailerWeight,
        LaneConnectionID,
        LaneID,
        LaneWidth,
        Latitude,
        LightbarInUse,
        Longitude,
        Location_quality,
        Location_tech,
        MergeDivergeNodeAngle,
        MessageBLOB,
        MinuteOfTheYear,
        MsgCount,
        MultiVehicleResponse,
        NodeAttributeXY,
        ObstacleDistance,
        Offset_B09,
        Offset_B10,
        Offset_B11,
        Offset_B12,
        Offset_B13,
        Offset_B14,
        Offset_B16,
        OffsetLL_B18,
        PayloadData,
        PositionConfidence,
        PrioritizationResponseStatus,
        Priority,
        PrivilegedEventFlags,
        RadiusOfCurvature,
        RegionId,
        noRegion,
        addGrpA,
        addGrpB,
        addGrpC,
        addGrpD,
        RequestID,
        RequestImportanceLevel,
        RequestSubRole,
        ResponseType,
        RestrictionClassID,
        _RoadAuthorityID_fullRdAuthID,
        _RoadAuthorityID_relRdAuthID,
        RoadAuthorityID,
        FullRoadAuthorityID,
        RelativeRoadAuthorityID,
        RoadRegulatorID,
        RoadSegmentID,
        RoadwayCrownAngle,
        RTCMmessage,
        Scale_B12,
        SegmentAttributeXY,
        SemiMajorAxisAccuracy,
        SemiMajorAxisOrientation,
        SemiMinorAxisAccuracy,
        SignalGroupID,
        SignalReqScheme,
        SirenInUse,
        SpeedConfidence,
        SpeedLimitType,
        Speed,
        SSPindex,
        StabilityControlStatus,
        StationID,
        SteeringWheelAngle,
        TemporaryID,
        ThrottleConfidence,
        TimeConfidence,
        TimeOffset,
        TractionControlStatus,
        TransitStatus,
        TransmissionState,
        URL_Link,
        VehicleEventFlags,
        VehicleHeight,
        VehicleLength,
        VehicleMass,
        VehicleType,
        VehicleWidth,
        Velocity,
        VerticalAccelerationThreshold,
        VerticalAcceleration,
        VertOffset_B08,
        VertOffset_B09,
        VertOffset_B10,
        VertOffset_B11,
        VertOffset_B12,
        WiperRate,
        WiperStatus,
        YawRate,
    ]

class CommonSafetyRequest:

    _name_  = 'CommonSafetyRequest'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 10, 1, 1]
    
    _obj_ = [
        'CommonSafetyRequest',
        'RequestedItemList',
        'RequestedItem',
        ]
    _type_ = [
        'CommonSafetyRequest',
        'RequestedItemList',
        'RequestedItem',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< CommonSafetyRequest >-----#
    CommonSafetyRequest = SEQ(name='CommonSafetyRequest', mode=MODE_TYPE)
    _CommonSafetyRequest_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _CommonSafetyRequest_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')), opt=True)
    _CommonSafetyRequest_id = OCT_STR(name='id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')), opt=True)
    _CommonSafetyRequest_requests = SEQ_OF(name='requests', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CommonSafetyRequest', 'RequestedItemList')))
    _CommonSafetyRequest_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CommonSafetyRequest_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___CommonSafetyRequest_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____CommonSafetyRequest_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____CommonSafetyRequest_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___CommonSafetyRequest_regional__item__regionId._const_tab = ____CommonSafetyRequest_regional__item__regionId_tab
    ___CommonSafetyRequest_regional__item__regionId._const_tab_at = None
    ___CommonSafetyRequest_regional__item__regionId._const_tab_id = 'id'
    ___CommonSafetyRequest_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____CommonSafetyRequest_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____CommonSafetyRequest_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___CommonSafetyRequest_regional__item__regExtValue._const_tab = ____CommonSafetyRequest_regional__item__regExtValue_tab
    ___CommonSafetyRequest_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___CommonSafetyRequest_regional__item__regExtValue._const_tab_id = 'Type'
    __CommonSafetyRequest_regional__item_._cont = ASN1Dict([
        ('regionId', ___CommonSafetyRequest_regional__item__regionId),
        ('regExtValue', ___CommonSafetyRequest_regional__item__regExtValue),
        ])
    __CommonSafetyRequest_regional__item_._ext = None
    _CommonSafetyRequest_regional._cont = __CommonSafetyRequest_regional__item_
    _CommonSafetyRequest_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    CommonSafetyRequest._cont = ASN1Dict([
        ('timeStamp', _CommonSafetyRequest_timeStamp),
        ('msgCnt', _CommonSafetyRequest_msgCnt),
        ('id', _CommonSafetyRequest_id),
        ('requests', _CommonSafetyRequest_requests),
        ('regional', _CommonSafetyRequest_regional),
        ])
    CommonSafetyRequest._ext = []
    
    #-----< RequestedItemList >-----#
    RequestedItemList = SEQ_OF(name='RequestedItemList', mode=MODE_TYPE)
    _RequestedItemList__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CommonSafetyRequest', 'RequestedItem')))
    RequestedItemList._cont = _RequestedItemList__item_
    RequestedItemList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< RequestedItem >-----#
    RequestedItem = ENUM(name='RequestedItem', mode=MODE_TYPE)
    RequestedItem._cont = ASN1Dict([('reserved', 0), ('itemA', 1), ('itemB', 2), ('itemC', 3), ('itemD', 4), ('itemE', 5), ('itemF', 6), ('itemG', 7), ('itemI', 8), ('itemJ', 9), ('itemK', 10), ('itemL', 11), ('itemM', 12), ('itemN', 13), ('itemO', 14), ('itemP', 15), ('itemQ', 16)])
    RequestedItem._ext = []
    
    _all_ = [
        _CommonSafetyRequest_timeStamp,
        _CommonSafetyRequest_msgCnt,
        _CommonSafetyRequest_id,
        _CommonSafetyRequest_requests,
        ____CommonSafetyRequest_regional__item__regionId_tab,
        ___CommonSafetyRequest_regional__item__regionId,
        ____CommonSafetyRequest_regional__item__regExtValue_tab,
        ___CommonSafetyRequest_regional__item__regExtValue,
        __CommonSafetyRequest_regional__item_,
        _CommonSafetyRequest_regional,
        CommonSafetyRequest,
        _RequestedItemList__item_,
        RequestedItemList,
        RequestedItem,
    ]

class EmergencyVehicleAlert:

    _name_  = 'EmergencyVehicleAlert'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 11, 1, 1]
    
    _obj_ = [
        'EmergencyVehicleAlert',
        ]
    _type_ = [
        'EmergencyVehicleAlert',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< EmergencyVehicleAlert >-----#
    EmergencyVehicleAlert = SEQ(name='EmergencyVehicleAlert', mode=MODE_TYPE)
    _EmergencyVehicleAlert_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _EmergencyVehicleAlert_id = OCT_STR(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')), opt=True)
    _EmergencyVehicleAlert_rsaMsg = SEQ(name='rsaMsg', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSideAlert', 'RoadSideAlert')))
    _EmergencyVehicleAlert_responseType = ENUM(name='responseType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ResponseType')), opt=True)
    _EmergencyVehicleAlert_details = SEQ(name='details', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'EmergencyDetails')), opt=True)
    _EmergencyVehicleAlert_mass = INT(name='mass', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleMass')), opt=True)
    _EmergencyVehicleAlert_basicType = ENUM(name='basicType', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleType')), opt=True)
    _EmergencyVehicleAlert_vehicleType = ENUM(name='vehicleType', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'VehicleGroupAffected')), opt=True)
    _EmergencyVehicleAlert_responseEquip = ENUM(name='responseEquip', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'IncidentResponseEquipment')), opt=True)
    _EmergencyVehicleAlert_responderType = ENUM(name='responderType', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ResponderGroupAffected')), opt=True)
    _EmergencyVehicleAlert_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __EmergencyVehicleAlert_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___EmergencyVehicleAlert_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____EmergencyVehicleAlert_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____EmergencyVehicleAlert_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___EmergencyVehicleAlert_regional__item__regionId._const_tab = ____EmergencyVehicleAlert_regional__item__regionId_tab
    ___EmergencyVehicleAlert_regional__item__regionId._const_tab_at = None
    ___EmergencyVehicleAlert_regional__item__regionId._const_tab_id = 'id'
    ___EmergencyVehicleAlert_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____EmergencyVehicleAlert_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____EmergencyVehicleAlert_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___EmergencyVehicleAlert_regional__item__regExtValue._const_tab = ____EmergencyVehicleAlert_regional__item__regExtValue_tab
    ___EmergencyVehicleAlert_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___EmergencyVehicleAlert_regional__item__regExtValue._const_tab_id = 'Type'
    __EmergencyVehicleAlert_regional__item_._cont = ASN1Dict([
        ('regionId', ___EmergencyVehicleAlert_regional__item__regionId),
        ('regExtValue', ___EmergencyVehicleAlert_regional__item__regExtValue),
        ])
    __EmergencyVehicleAlert_regional__item_._ext = None
    _EmergencyVehicleAlert_regional._cont = __EmergencyVehicleAlert_regional__item_
    _EmergencyVehicleAlert_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    EmergencyVehicleAlert._cont = ASN1Dict([
        ('timeStamp', _EmergencyVehicleAlert_timeStamp),
        ('id', _EmergencyVehicleAlert_id),
        ('rsaMsg', _EmergencyVehicleAlert_rsaMsg),
        ('responseType', _EmergencyVehicleAlert_responseType),
        ('details', _EmergencyVehicleAlert_details),
        ('mass', _EmergencyVehicleAlert_mass),
        ('basicType', _EmergencyVehicleAlert_basicType),
        ('vehicleType', _EmergencyVehicleAlert_vehicleType),
        ('responseEquip', _EmergencyVehicleAlert_responseEquip),
        ('responderType', _EmergencyVehicleAlert_responderType),
        ('regional', _EmergencyVehicleAlert_regional),
        ])
    EmergencyVehicleAlert._ext = []
    
    _all_ = [
        _EmergencyVehicleAlert_timeStamp,
        _EmergencyVehicleAlert_id,
        _EmergencyVehicleAlert_rsaMsg,
        _EmergencyVehicleAlert_responseType,
        _EmergencyVehicleAlert_details,
        _EmergencyVehicleAlert_mass,
        _EmergencyVehicleAlert_basicType,
        _EmergencyVehicleAlert_vehicleType,
        _EmergencyVehicleAlert_responseEquip,
        _EmergencyVehicleAlert_responderType,
        ____EmergencyVehicleAlert_regional__item__regionId_tab,
        ___EmergencyVehicleAlert_regional__item__regionId,
        ____EmergencyVehicleAlert_regional__item__regExtValue_tab,
        ___EmergencyVehicleAlert_regional__item__regExtValue,
        __EmergencyVehicleAlert_regional__item_,
        _EmergencyVehicleAlert_regional,
        EmergencyVehicleAlert,
    ]

class ITIS:

    _name_  = 'ITIS'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 6, 1, 1]
    
    _obj_ = [
        'GenericLocations',
        'IncidentResponseEquipment',
        'ITIStext',
        'ResponderGroupAffected',
        'VehicleGroupAffected',
        'ITIScodesAndText',
        'ITIScodes',
        ]
    _type_ = [
        'GenericLocations',
        'IncidentResponseEquipment',
        'ITIStext',
        'ResponderGroupAffected',
        'VehicleGroupAffected',
        'ITIScodesAndText',
        'ITIScodes',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< GenericLocations >-----#
    GenericLocations = ENUM(name='GenericLocations', mode=MODE_TYPE)
    GenericLocations._cont = ASN1Dict([('on-bridges', 7937), ('in-tunnels', 7938), ('entering-or-leaving-tunnels', 7939), ('on-ramps', 7940), ('in-road-construction-area', 7941), ('around-a-curve', 7942), ('on-minor-roads', 7943), ('in-the-opposing-lanes', 7944), ('adjacent-to-roadway', 7945), ('on-bend', 7946), ('entire-intersection', 7947), ('in-the-median', 7948), ('moved-to-side-of-road', 7949), ('moved-to-shoulder', 7950), ('on-the-roadway', 7951), ('in-shaded-areas', 7952), ('in-low-lying-areas', 7953), ('in-the-downtown-area', 7954), ('in-the-inner-city-area', 7955), ('in-parts', 7956), ('in-some-places', 7957), ('in-the-ditch', 7958), ('in-the-valley', 7959), ('on-hill-top', 7960), ('near-the-foothills', 7961), ('at-high-altitudes', 7962), ('near-the-lake', 7963), ('near-the-shore', 7964), ('over-the-crest-of-a-hill', 7965), ('other-than-on-the-roadway', 7966), ('near-the-beach', 7967), ('near-beach-access-point', 7968), ('lower-level', 7969), ('upper-level', 7970), ('airport', 7971), ('concourse', 7972), ('gate', 7973), ('baggage-claim', 7974), ('customs-point', 7975), ('station', 7976), ('platform', 7977), ('dock', 7978), ('depot', 7979), ('ev-charging-point', 7980), ('information-welcome-point', 7981), ('at-rest-area', 7982), ('at-service-area', 7983), ('at-weigh-station', 7984), ('picnic-areas', 7985), ('rest-area', 7986), ('service-stations', 7987), ('toilets', 7988), ('on-the-right', 7989), ('on-the-left', 7990), ('in-the-center', 7991), ('in-the-opposite-direction', 7992), ('cross-traffic', 7993), ('northbound-traffic', 7994), ('eastbound-traffic', 7995), ('southbound-traffic', 7996), ('westbound-traffic', 7997), ('north', 7998), ('south', 7999), ('east', 8000), ('west', 8001), ('northeast', 8002), ('northwest', 8003), ('southeast', 8004), ('southwest', 8005), ('mountain-pass', 8006), ('reservation-center', 8007), ('nearby-basin', 8008), ('on-tracks', 8009), ('dip', 8010), ('traffic-circle', 8011), ('park-and-ride-lot', 8012), ('to', 8014), ('by', 8015), ('through', 8016), ('area-of', 8017), ('under', 8018), ('over', 8019), ('from', 8020), ('approaching', 8021), ('entering-at', 8022), ('exiting-at', 8023), ('across-tracks', 8024), ('in-street', 8025), ('on-curve', 8026), ('shoulder', 8027), ('crossover', 8028), ('cross-road', 8029), ('side-road', 8030), ('bus-stop', 8031), ('intersection', 8032), ('roadside-park', 8033)])
    GenericLocations._ext = []
    
    #-----< IncidentResponseEquipment >-----#
    IncidentResponseEquipment = ENUM(name='IncidentResponseEquipment', mode=MODE_TYPE)
    IncidentResponseEquipment._cont = ASN1Dict([('ground-fire-suppression', 9985), ('heavy-ground-equipment', 9986), ('aircraft', 9988), ('marine-equipment', 9989), ('support-equipment', 9990), ('medical-rescue-unit', 9991), ('other', 9993), ('ground-fire-suppression-other', 9994), ('engine', 9995), ('truck-or-aerial', 9996), ('quint', 9997), ('tanker-pumper-combination', 9998), ('brush-truck', 10000), ('aircraft-rescue-firefighting', 10001), ('heavy-ground-equipment-other', 10004), ('dozer-or-plow', 10005), ('tractor', 10006), ('tanker-or-tender', 10008), ('aircraft-other', 10024), ('aircraft-fixed-wing-tanker', 10025), ('helitanker', 10026), ('helicopter', 10027), ('marine-equipment-other', 10034), ('fire-boat-with-pump', 10035), ('boat-no-pump', 10036), ('support-apparatus-other', 10044), ('breathing-apparatus-support', 10045), ('light-and-air-unit', 10046), ('medical-rescue-unit-other', 10054), ('rescue-unit', 10055), ('urban-search-rescue-unit', 10056), ('high-angle-rescue', 10057), ('crash-fire-rescue', 10058), ('bLS-unit', 10059), ('aLS-unit', 10060), ('mobile-command-post', 10075), ('chief-officer-car', 10076), ('hAZMAT-unit', 10077), ('type-i-hand-crew', 10078), ('type-ii-hand-crew', 10079), ('privately-owned-vehicle', 10083), ('other-apparatus-resource', 10084), ('ambulance', 10085), ('bomb-squad-van', 10086), ('combine-harvester', 10087), ('construction-vehicle', 10088), ('farm-tractor', 10089), ('grass-cutting-machines', 10090), ('hAZMAT-containment-tow', 10091), ('heavy-tow', 10092), ('hedge-cutting-machines', 10093), ('light-tow', 10094), ('mobile-crane', 10095), ('refuse-collection-vehicle', 10096), ('resurfacing-vehicle', 10097), ('road-sweeper', 10098), ('roadside-litter-collection-crews', 10099), ('salvage-vehicle', 10100), ('sand-truck', 10101), ('snowplow', 10102), ('steam-roller', 10103), ('swat-team-van', 10104), ('track-laying-vehicle', 10105), ('unknown-vehicle', 10106), ('white-lining-vehicle', 10107), ('dump-truck', 10108), ('supervisor-vehicle', 10109), ('snow-blower', 10110), ('rotary-snow-blower', 10111), ('road-grader', 10112), ('steam-truck', 10113), ('flatbed-tow', 10114)])
    IncidentResponseEquipment._ext = []
    
    #-----< ITIStext >-----#
    ITIStext = STR_IA5(name='ITIStext', mode=MODE_TYPE)
    ITIStext._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=500)], ev=None, er=[])
    
    #-----< ResponderGroupAffected >-----#
    ResponderGroupAffected = ENUM(name='ResponderGroupAffected', mode=MODE_TYPE)
    ResponderGroupAffected._cont = ASN1Dict([('emergency-vehicle-units', 9729), ('federal-law-enforcement-units', 9730), ('state-police-units', 9731), ('county-police-units', 9732), ('local-police-units', 9733), ('ambulance-units', 9734), ('rescue-units', 9735), ('fire-units', 9736), ('hAZMAT-units', 9737), ('light-tow-unit', 9738), ('heavy-tow-unit', 9739), ('freeway-service-patrols', 9740), ('transportation-response-units', 9741), ('private-contractor-response-units', 9742)])
    ResponderGroupAffected._ext = []
    
    #-----< VehicleGroupAffected >-----#
    VehicleGroupAffected = ENUM(name='VehicleGroupAffected', mode=MODE_TYPE)
    VehicleGroupAffected._cont = ASN1Dict([('all-vehicles', 9217), ('bicycles', 9218), ('motorcycles', 9219), ('cars', 9220), ('light-vehicles', 9221), ('cars-and-light-vehicles', 9222), ('cars-with-trailers', 9223), ('cars-with-recreational-trailers', 9224), ('vehicles-with-trailers', 9225), ('heavy-vehicles', 9226), ('trucks', 9227), ('buses', 9228), ('articulated-buses', 9229), ('school-buses', 9230), ('vehicles-with-semi-trailers', 9231), ('vehicles-with-double-trailers', 9232), ('high-profile-vehicles', 9233), ('wide-vehicles', 9234), ('long-vehicles', 9235), ('hazardous-loads', 9236), ('exceptional-loads', 9237), ('abnormal-loads', 9238), ('convoys', 9239), ('maintenance-vehicles', 9240), ('delivery-vehicles', 9241), ('vehicles-with-even-numbered-license-plates', 9242), ('vehicles-with-odd-numbered-license-plates', 9243), ('vehicles-with-parking-permits', 9244), ('vehicles-with-catalytic-converters', 9245), ('vehicles-without-catalytic-converters', 9246), ('gas-powered-vehicles', 9247), ('diesel-powered-vehicles', 9248), ('lPG-vehicles', 9249), ('military-convoys', 9250), ('military-vehicles', 9251)])
    VehicleGroupAffected._ext = []
    
    #-----< ITIScodesAndText >-----#
    ITIScodesAndText = SEQ_OF(name='ITIScodesAndText', mode=MODE_TYPE)
    _ITIScodesAndText__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __ITIScodesAndText__item__item = CHOICE(name='item', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___ITIScodesAndText__item__item_itis = INT(name='itis', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    ___ITIScodesAndText__item__item_text = STR_IA5(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIStext')))
    __ITIScodesAndText__item__item._cont = ASN1Dict([
        ('itis', ___ITIScodesAndText__item__item_itis),
        ('text', ___ITIScodesAndText__item__item_text),
        ])
    __ITIScodesAndText__item__item._ext = None
    _ITIScodesAndText__item_._cont = ASN1Dict([
        ('item', __ITIScodesAndText__item__item),
        ])
    _ITIScodesAndText__item_._ext = None
    ITIScodesAndText._cont = _ITIScodesAndText__item_
    ITIScodesAndText._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    
    #-----< ITIScodes >-----#
    ITIScodes = INT(name='ITIScodes', mode=MODE_TYPE)
    ITIScodes._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        GenericLocations,
        IncidentResponseEquipment,
        ITIStext,
        ResponderGroupAffected,
        VehicleGroupAffected,
        ___ITIScodesAndText__item__item_itis,
        ___ITIScodesAndText__item__item_text,
        __ITIScodesAndText__item__item,
        _ITIScodesAndText__item_,
        ITIScodesAndText,
        ITIScodes,
    ]

class IntersectionCollision:

    _name_  = 'IntersectionCollision'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 12, 1, 1]
    
    _obj_ = [
        'IntersectionCollision',
        'ApproachOrLane',
        ]
    _type_ = [
        'IntersectionCollision',
        'ApproachOrLane',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< IntersectionCollision >-----#
    IntersectionCollision = SEQ(name='IntersectionCollision', mode=MODE_TYPE)
    _IntersectionCollision_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _IntersectionCollision_id = OCT_STR(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _IntersectionCollision_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _IntersectionCollision_partOne = SEQ(name='partOne', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BSMcoreData')), opt=True)
    _IntersectionCollision_path = SEQ(name='path', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PathHistory')), opt=True)
    _IntersectionCollision_pathPrediction = SEQ(name='pathPrediction', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PathPrediction')), opt=True)
    _IntersectionCollision_intersectionID = SEQ(name='intersectionID', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionReferenceID')))
    _IntersectionCollision_laneNumber = CHOICE(name='laneNumber', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('IntersectionCollision', 'ApproachOrLane')))
    _IntersectionCollision_eventFlag = BIT_STR(name='eventFlag', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleEventFlags')))
    _IntersectionCollision_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IntersectionCollision_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___IntersectionCollision_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____IntersectionCollision_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____IntersectionCollision_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___IntersectionCollision_regional__item__regionId._const_tab = ____IntersectionCollision_regional__item__regionId_tab
    ___IntersectionCollision_regional__item__regionId._const_tab_at = None
    ___IntersectionCollision_regional__item__regionId._const_tab_id = 'id'
    ___IntersectionCollision_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____IntersectionCollision_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____IntersectionCollision_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___IntersectionCollision_regional__item__regExtValue._const_tab = ____IntersectionCollision_regional__item__regExtValue_tab
    ___IntersectionCollision_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___IntersectionCollision_regional__item__regExtValue._const_tab_id = 'Type'
    __IntersectionCollision_regional__item_._cont = ASN1Dict([
        ('regionId', ___IntersectionCollision_regional__item__regionId),
        ('regExtValue', ___IntersectionCollision_regional__item__regExtValue),
        ])
    __IntersectionCollision_regional__item_._ext = None
    _IntersectionCollision_regional._cont = __IntersectionCollision_regional__item_
    _IntersectionCollision_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    IntersectionCollision._cont = ASN1Dict([
        ('msgCnt', _IntersectionCollision_msgCnt),
        ('id', _IntersectionCollision_id),
        ('timeStamp', _IntersectionCollision_timeStamp),
        ('partOne', _IntersectionCollision_partOne),
        ('path', _IntersectionCollision_path),
        ('pathPrediction', _IntersectionCollision_pathPrediction),
        ('intersectionID', _IntersectionCollision_intersectionID),
        ('laneNumber', _IntersectionCollision_laneNumber),
        ('eventFlag', _IntersectionCollision_eventFlag),
        ('regional', _IntersectionCollision_regional),
        ])
    IntersectionCollision._ext = []
    
    #-----< ApproachOrLane >-----#
    ApproachOrLane = CHOICE(name='ApproachOrLane', mode=MODE_TYPE)
    _ApproachOrLane_approach = INT(name='approach', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ApproachID')))
    _ApproachOrLane_lane = INT(name='lane', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')))
    ApproachOrLane._cont = ASN1Dict([
        ('approach', _ApproachOrLane_approach),
        ('lane', _ApproachOrLane_lane),
        ])
    ApproachOrLane._ext = None
    
    _all_ = [
        _IntersectionCollision_msgCnt,
        _IntersectionCollision_id,
        _IntersectionCollision_timeStamp,
        _IntersectionCollision_partOne,
        _IntersectionCollision_path,
        _IntersectionCollision_pathPrediction,
        _IntersectionCollision_intersectionID,
        _IntersectionCollision_laneNumber,
        _IntersectionCollision_eventFlag,
        ____IntersectionCollision_regional__item__regionId_tab,
        ___IntersectionCollision_regional__item__regionId,
        ____IntersectionCollision_regional__item__regExtValue_tab,
        ___IntersectionCollision_regional__item__regExtValue,
        __IntersectionCollision_regional__item_,
        _IntersectionCollision_regional,
        IntersectionCollision,
        _ApproachOrLane_approach,
        _ApproachOrLane_lane,
        ApproachOrLane,
    ]

class MapData:

    _name_  = 'MapData'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 8, 1, 1]
    
    _obj_ = [
        'MapData',
        'ConnectingLane',
        'Connection',
        'ConnectsToList',
        'DataParameters',
        'GenericLane',
        'IntersectionGeometry',
        'IntersectionGeometryList',
        'LaneAttributes',
        'LaneList',
        'LaneTypeAttributes',
        'OverlayLaneList',
        'PreemptPriorityList',
        'SignalControlZone',
        'RestrictionClassAssignment',
        'RestrictionClassList',
        'RestrictionUserTypeList',
        'RestrictionUserType',
        'RoadLaneSetList',
        'RoadSegmentList',
        'RoadSegment',
        'AllowedManeuvers',
        'LaneAttributes-Barrier',
        'LaneAttributes-Bike',
        'LaneAttributes-Crosswalk',
        'LaneAttributes-Parking',
        'LaneAttributes-Sidewalk',
        'LaneAttributes-Striping',
        'LaneAttributes-TrackedVehicle',
        'LaneAttributes-Vehicle',
        'LaneDirection',
        'LaneSharing',
        'LayerID',
        'LayerType',
        'RestrictionAppliesTo',
        ]
    _type_ = [
        'MapData',
        'ConnectingLane',
        'Connection',
        'ConnectsToList',
        'DataParameters',
        'GenericLane',
        'IntersectionGeometry',
        'IntersectionGeometryList',
        'LaneAttributes',
        'LaneList',
        'LaneTypeAttributes',
        'OverlayLaneList',
        'PreemptPriorityList',
        'SignalControlZone',
        'RestrictionClassAssignment',
        'RestrictionClassList',
        'RestrictionUserTypeList',
        'RestrictionUserType',
        'RoadLaneSetList',
        'RoadSegmentList',
        'RoadSegment',
        'AllowedManeuvers',
        'LaneAttributes-Barrier',
        'LaneAttributes-Bike',
        'LaneAttributes-Crosswalk',
        'LaneAttributes-Parking',
        'LaneAttributes-Sidewalk',
        'LaneAttributes-Striping',
        'LaneAttributes-TrackedVehicle',
        'LaneAttributes-Vehicle',
        'LaneDirection',
        'LaneSharing',
        'LayerID',
        'LayerType',
        'RestrictionAppliesTo',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< MapData >-----#
    MapData = SEQ(name='MapData', mode=MODE_TYPE)
    _MapData_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _MapData_msgIssueRevision = INT(name='msgIssueRevision', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _MapData_layerType = ENUM(name='layerType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LayerType')), opt=True)
    _MapData_layerID = INT(name='layerID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LayerID')), opt=True)
    _MapData_intersections = SEQ_OF(name='intersections', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'IntersectionGeometryList')), opt=True)
    _MapData_roadSegments = SEQ_OF(name='roadSegments', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'RoadSegmentList')), opt=True)
    _MapData_dataParameters = SEQ(name='dataParameters', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'DataParameters')), opt=True)
    _MapData_restrictionList = SEQ_OF(name='restrictionList', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'RestrictionClassList')), opt=True)
    _MapData_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MapData_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___MapData_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____MapData_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _____MapData_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'MapData-addGrpC')))
    ____MapData_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____MapData_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___MapData_regional__item__regionId._const_tab = ____MapData_regional__item__regionId_tab
    ___MapData_regional__item__regionId._const_tab_at = None
    ___MapData_regional__item__regionId._const_tab_id = 'id'
    ___MapData_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___MapData_regional__item__regExtValue._const_tab = ____MapData_regional__item__regionId_tab
    ___MapData_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___MapData_regional__item__regExtValue._const_tab_id = 'Type'
    __MapData_regional__item_._cont = ASN1Dict([
        ('regionId', ___MapData_regional__item__regionId),
        ('regExtValue', ___MapData_regional__item__regExtValue),
        ])
    __MapData_regional__item_._ext = None
    _MapData_regional._cont = __MapData_regional__item_
    _MapData_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    MapData._cont = ASN1Dict([
        ('timeStamp', _MapData_timeStamp),
        ('msgIssueRevision', _MapData_msgIssueRevision),
        ('layerType', _MapData_layerType),
        ('layerID', _MapData_layerID),
        ('intersections', _MapData_intersections),
        ('roadSegments', _MapData_roadSegments),
        ('dataParameters', _MapData_dataParameters),
        ('restrictionList', _MapData_restrictionList),
        ('regional', _MapData_regional),
        ])
    MapData._ext = []
    
    #-----< ConnectingLane >-----#
    ConnectingLane = SEQ(name='ConnectingLane', mode=MODE_TYPE)
    _ConnectingLane_lane = INT(name='lane', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')))
    _ConnectingLane_maneuver = BIT_STR(name='maneuver', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'AllowedManeuvers')), opt=True)
    ConnectingLane._cont = ASN1Dict([
        ('lane', _ConnectingLane_lane),
        ('maneuver', _ConnectingLane_maneuver),
        ])
    ConnectingLane._ext = None
    
    #-----< Connection >-----#
    Connection = SEQ(name='Connection', mode=MODE_TYPE)
    _Connection_connectingLane = SEQ(name='connectingLane', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'ConnectingLane')))
    _Connection_remoteIntersection = SEQ(name='remoteIntersection', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionReferenceID')), opt=True)
    _Connection_signalGroup = INT(name='signalGroup', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SignalGroupID')), opt=True)
    _Connection_userClass = INT(name='userClass', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RestrictionClassID')), opt=True)
    _Connection_connectionID = INT(name='connectionID', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneConnectionID')), opt=True)
    Connection._cont = ASN1Dict([
        ('connectingLane', _Connection_connectingLane),
        ('remoteIntersection', _Connection_remoteIntersection),
        ('signalGroup', _Connection_signalGroup),
        ('userClass', _Connection_userClass),
        ('connectionID', _Connection_connectionID),
        ])
    Connection._ext = None
    
    #-----< ConnectsToList >-----#
    ConnectsToList = SEQ_OF(name='ConnectsToList', mode=MODE_TYPE)
    _ConnectsToList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'Connection')))
    ConnectsToList._cont = _ConnectsToList__item_
    ConnectsToList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< DataParameters >-----#
    DataParameters = SEQ(name='DataParameters', mode=MODE_TYPE)
    _DataParameters_processMethod = STR_IA5(name='processMethod', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_processMethod._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _DataParameters_processAgency = STR_IA5(name='processAgency', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_processAgency._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _DataParameters_lastCheckedDate = STR_IA5(name='lastCheckedDate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_lastCheckedDate._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _DataParameters_geoidUsed = STR_IA5(name='geoidUsed', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_geoidUsed._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    DataParameters._cont = ASN1Dict([
        ('processMethod', _DataParameters_processMethod),
        ('processAgency', _DataParameters_processAgency),
        ('lastCheckedDate', _DataParameters_lastCheckedDate),
        ('geoidUsed', _DataParameters_geoidUsed),
        ])
    DataParameters._ext = []
    
    #-----< GenericLane >-----#
    GenericLane = SEQ(name='GenericLane', mode=MODE_TYPE)
    _GenericLane_laneID = INT(name='laneID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')))
    _GenericLane_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _GenericLane_ingressApproach = INT(name='ingressApproach', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ApproachID')), opt=True)
    _GenericLane_egressApproach = INT(name='egressApproach', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ApproachID')), opt=True)
    _GenericLane_laneAttributes = SEQ(name='laneAttributes', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes')))
    _GenericLane_maneuvers = BIT_STR(name='maneuvers', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'AllowedManeuvers')), opt=True)
    _GenericLane_nodeList = CHOICE(name='nodeList', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'NodeListXY')))
    _GenericLane_connectsTo = SEQ_OF(name='connectsTo', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'ConnectsToList')), opt=True)
    _GenericLane_overlays = SEQ_OF(name='overlays', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'OverlayLaneList')), opt=True)
    _GenericLane_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GenericLane_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___GenericLane_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____GenericLane_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____GenericLane_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___GenericLane_regional__item__regionId._const_tab = ____GenericLane_regional__item__regionId_tab
    ___GenericLane_regional__item__regionId._const_tab_at = None
    ___GenericLane_regional__item__regionId._const_tab_id = 'id'
    ___GenericLane_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____GenericLane_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____GenericLane_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___GenericLane_regional__item__regExtValue._const_tab = ____GenericLane_regional__item__regExtValue_tab
    ___GenericLane_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___GenericLane_regional__item__regExtValue._const_tab_id = 'Type'
    __GenericLane_regional__item_._cont = ASN1Dict([
        ('regionId', ___GenericLane_regional__item__regionId),
        ('regExtValue', ___GenericLane_regional__item__regExtValue),
        ])
    __GenericLane_regional__item_._ext = None
    _GenericLane_regional._cont = __GenericLane_regional__item_
    _GenericLane_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    GenericLane._cont = ASN1Dict([
        ('laneID', _GenericLane_laneID),
        ('name', _GenericLane_name),
        ('ingressApproach', _GenericLane_ingressApproach),
        ('egressApproach', _GenericLane_egressApproach),
        ('laneAttributes', _GenericLane_laneAttributes),
        ('maneuvers', _GenericLane_maneuvers),
        ('nodeList', _GenericLane_nodeList),
        ('connectsTo', _GenericLane_connectsTo),
        ('overlays', _GenericLane_overlays),
        ('regional', _GenericLane_regional),
        ])
    GenericLane._ext = []
    
    #-----< IntersectionGeometry >-----#
    IntersectionGeometry = SEQ(name='IntersectionGeometry', mode=MODE_TYPE)
    _IntersectionGeometry_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _IntersectionGeometry_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionReferenceID')))
    _IntersectionGeometry_revision = INT(name='revision', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _IntersectionGeometry_refPoint = SEQ(name='refPoint', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _IntersectionGeometry_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneWidth')), opt=True)
    _IntersectionGeometry_speedLimits = SEQ_OF(name='speedLimits', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedLimitList')), opt=True)
    _IntersectionGeometry_laneSet = SEQ_OF(name='laneSet', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneList')))
    _IntersectionGeometry_preemptPriorityData = SEQ_OF(name='preemptPriorityData', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'PreemptPriorityList')), opt=True)
    _IntersectionGeometry_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IntersectionGeometry_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___IntersectionGeometry_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____IntersectionGeometry_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____IntersectionGeometry_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___IntersectionGeometry_regional__item__regionId._const_tab = ____IntersectionGeometry_regional__item__regionId_tab
    ___IntersectionGeometry_regional__item__regionId._const_tab_at = None
    ___IntersectionGeometry_regional__item__regionId._const_tab_id = 'id'
    ___IntersectionGeometry_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____IntersectionGeometry_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____IntersectionGeometry_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___IntersectionGeometry_regional__item__regExtValue._const_tab = ____IntersectionGeometry_regional__item__regExtValue_tab
    ___IntersectionGeometry_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___IntersectionGeometry_regional__item__regExtValue._const_tab_id = 'Type'
    __IntersectionGeometry_regional__item_._cont = ASN1Dict([
        ('regionId', ___IntersectionGeometry_regional__item__regionId),
        ('regExtValue', ___IntersectionGeometry_regional__item__regExtValue),
        ])
    __IntersectionGeometry_regional__item_._ext = None
    _IntersectionGeometry_regional._cont = __IntersectionGeometry_regional__item_
    _IntersectionGeometry_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    _IntersectionGeometry_roadAuthorityID = CHOICE(name='roadAuthorityID', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'RoadAuthorityID')), opt=True)
    IntersectionGeometry._cont = ASN1Dict([
        ('name', _IntersectionGeometry_name),
        ('id', _IntersectionGeometry_id),
        ('revision', _IntersectionGeometry_revision),
        ('refPoint', _IntersectionGeometry_refPoint),
        ('laneWidth', _IntersectionGeometry_laneWidth),
        ('speedLimits', _IntersectionGeometry_speedLimits),
        ('laneSet', _IntersectionGeometry_laneSet),
        ('preemptPriorityData', _IntersectionGeometry_preemptPriorityData),
        ('regional', _IntersectionGeometry_regional),
        ('roadAuthorityID', _IntersectionGeometry_roadAuthorityID),
        ])
    IntersectionGeometry._ext = ['roadAuthorityID']
    
    #-----< IntersectionGeometryList >-----#
    IntersectionGeometryList = SEQ_OF(name='IntersectionGeometryList', mode=MODE_TYPE)
    _IntersectionGeometryList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'IntersectionGeometry')))
    IntersectionGeometryList._cont = _IntersectionGeometryList__item_
    IntersectionGeometryList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< LaneAttributes >-----#
    LaneAttributes = SEQ(name='LaneAttributes', mode=MODE_TYPE)
    _LaneAttributes_directionalUse = BIT_STR(name='directionalUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneDirection')))
    _LaneAttributes_sharedWith = BIT_STR(name='sharedWith', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneSharing')))
    _LaneAttributes_laneType = CHOICE(name='laneType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('MapData', 'LaneTypeAttributes')))
    _LaneAttributes_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __LaneAttributes_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___LaneAttributes_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___LaneAttributes_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __LaneAttributes_regional_regionId._const_tab = ___LaneAttributes_regional_regionId_tab
    __LaneAttributes_regional_regionId._const_tab_at = None
    __LaneAttributes_regional_regionId._const_tab_id = 'id'
    __LaneAttributes_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___LaneAttributes_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___LaneAttributes_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __LaneAttributes_regional_regExtValue._const_tab = ___LaneAttributes_regional_regExtValue_tab
    __LaneAttributes_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __LaneAttributes_regional_regExtValue._const_tab_id = 'Type'
    _LaneAttributes_regional._cont = ASN1Dict([
        ('regionId', __LaneAttributes_regional_regionId),
        ('regExtValue', __LaneAttributes_regional_regExtValue),
        ])
    _LaneAttributes_regional._ext = None
    LaneAttributes._cont = ASN1Dict([
        ('directionalUse', _LaneAttributes_directionalUse),
        ('sharedWith', _LaneAttributes_sharedWith),
        ('laneType', _LaneAttributes_laneType),
        ('regional', _LaneAttributes_regional),
        ])
    LaneAttributes._ext = None
    
    #-----< LaneList >-----#
    LaneList = SEQ_OF(name='LaneList', mode=MODE_TYPE)
    _LaneList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'GenericLane')))
    LaneList._cont = _LaneList__item_
    LaneList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< LaneTypeAttributes >-----#
    LaneTypeAttributes = CHOICE(name='LaneTypeAttributes', mode=MODE_TYPE)
    _LaneTypeAttributes_vehicle = BIT_STR(name='vehicle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-Vehicle')))
    _LaneTypeAttributes_crosswalk = BIT_STR(name='crosswalk', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-Crosswalk')))
    _LaneTypeAttributes_bikeLane = BIT_STR(name='bikeLane', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-Bike')))
    _LaneTypeAttributes_sidewalk = BIT_STR(name='sidewalk', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-Sidewalk')))
    _LaneTypeAttributes_median = BIT_STR(name='median', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-Barrier')))
    _LaneTypeAttributes_striping = BIT_STR(name='striping', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-Striping')))
    _LaneTypeAttributes_trackedVehicle = BIT_STR(name='trackedVehicle', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-TrackedVehicle')))
    _LaneTypeAttributes_parking = BIT_STR(name='parking', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'LaneAttributes-Parking')))
    LaneTypeAttributes._cont = ASN1Dict([
        ('vehicle', _LaneTypeAttributes_vehicle),
        ('crosswalk', _LaneTypeAttributes_crosswalk),
        ('bikeLane', _LaneTypeAttributes_bikeLane),
        ('sidewalk', _LaneTypeAttributes_sidewalk),
        ('median', _LaneTypeAttributes_median),
        ('striping', _LaneTypeAttributes_striping),
        ('trackedVehicle', _LaneTypeAttributes_trackedVehicle),
        ('parking', _LaneTypeAttributes_parking),
        ])
    LaneTypeAttributes._ext = []
    
    #-----< OverlayLaneList >-----#
    OverlayLaneList = SEQ_OF(name='OverlayLaneList', mode=MODE_TYPE)
    _OverlayLaneList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'LaneID')))
    OverlayLaneList._cont = _OverlayLaneList__item_
    OverlayLaneList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    
    #-----< PreemptPriorityList >-----#
    PreemptPriorityList = SEQ_OF(name='PreemptPriorityList', mode=MODE_TYPE)
    _PreemptPriorityList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'SignalControlZone')))
    PreemptPriorityList._cont = _PreemptPriorityList__item_
    PreemptPriorityList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SignalControlZone >-----#
    SignalControlZone = SEQ(name='SignalControlZone', mode=MODE_TYPE)
    _SignalControlZone_zone = SEQ(name='zone', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')))
    __SignalControlZone_zone_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___SignalControlZone_zone_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___SignalControlZone_zone_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __SignalControlZone_zone_regionId._const_tab = ___SignalControlZone_zone_regionId_tab
    __SignalControlZone_zone_regionId._const_tab_at = None
    __SignalControlZone_zone_regionId._const_tab_id = 'id'
    __SignalControlZone_zone_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___SignalControlZone_zone_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___SignalControlZone_zone_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __SignalControlZone_zone_regExtValue._const_tab = ___SignalControlZone_zone_regExtValue_tab
    __SignalControlZone_zone_regExtValue._const_tab_at = ('..', 'regionId')
    __SignalControlZone_zone_regExtValue._const_tab_id = 'Type'
    _SignalControlZone_zone._cont = ASN1Dict([
        ('regionId', __SignalControlZone_zone_regionId),
        ('regExtValue', __SignalControlZone_zone_regExtValue),
        ])
    _SignalControlZone_zone._ext = None
    SignalControlZone._cont = ASN1Dict([
        ('zone', _SignalControlZone_zone),
        ])
    SignalControlZone._ext = []
    
    #-----< RestrictionClassAssignment >-----#
    RestrictionClassAssignment = SEQ(name='RestrictionClassAssignment', mode=MODE_TYPE)
    _RestrictionClassAssignment_id = INT(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RestrictionClassID')))
    _RestrictionClassAssignment_users = SEQ_OF(name='users', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'RestrictionUserTypeList')))
    RestrictionClassAssignment._cont = ASN1Dict([
        ('id', _RestrictionClassAssignment_id),
        ('users', _RestrictionClassAssignment_users),
        ])
    RestrictionClassAssignment._ext = None
    
    #-----< RestrictionClassList >-----#
    RestrictionClassList = SEQ_OF(name='RestrictionClassList', mode=MODE_TYPE)
    _RestrictionClassList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'RestrictionClassAssignment')))
    RestrictionClassList._cont = _RestrictionClassList__item_
    RestrictionClassList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=254)], ev=None, er=[])
    
    #-----< RestrictionUserTypeList >-----#
    RestrictionUserTypeList = SEQ_OF(name='RestrictionUserTypeList', mode=MODE_TYPE)
    _RestrictionUserTypeList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'RestrictionUserType')))
    RestrictionUserTypeList._cont = _RestrictionUserTypeList__item_
    RestrictionUserTypeList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< RestrictionUserType >-----#
    RestrictionUserType = CHOICE(name='RestrictionUserType', mode=MODE_TYPE)
    _RestrictionUserType_basicType = ENUM(name='basicType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'RestrictionAppliesTo')))
    _RestrictionUserType_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RestrictionUserType_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___RestrictionUserType_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RestrictionUserType_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _____RestrictionUserType_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'RestrictionUserType-addGrpC')))
    ____RestrictionUserType_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____RestrictionUserType_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___RestrictionUserType_regional__item__regionId._const_tab = ____RestrictionUserType_regional__item__regionId_tab
    ___RestrictionUserType_regional__item__regionId._const_tab_at = None
    ___RestrictionUserType_regional__item__regionId._const_tab_id = 'id'
    ___RestrictionUserType_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___RestrictionUserType_regional__item__regExtValue._const_tab = ____RestrictionUserType_regional__item__regionId_tab
    ___RestrictionUserType_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RestrictionUserType_regional__item__regExtValue._const_tab_id = 'Type'
    __RestrictionUserType_regional__item_._cont = ASN1Dict([
        ('regionId', ___RestrictionUserType_regional__item__regionId),
        ('regExtValue', ___RestrictionUserType_regional__item__regExtValue),
        ])
    __RestrictionUserType_regional__item_._ext = None
    _RestrictionUserType_regional._cont = __RestrictionUserType_regional__item_
    _RestrictionUserType_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RestrictionUserType._cont = ASN1Dict([
        ('basicType', _RestrictionUserType_basicType),
        ('regional', _RestrictionUserType_regional),
        ])
    RestrictionUserType._ext = []
    
    #-----< RoadLaneSetList >-----#
    RoadLaneSetList = SEQ_OF(name='RoadLaneSetList', mode=MODE_TYPE)
    _RoadLaneSetList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'GenericLane')))
    RoadLaneSetList._cont = _RoadLaneSetList__item_
    RoadLaneSetList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< RoadSegmentList >-----#
    RoadSegmentList = SEQ_OF(name='RoadSegmentList', mode=MODE_TYPE)
    _RoadSegmentList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'RoadSegment')))
    RoadSegmentList._cont = _RoadSegmentList__item_
    RoadSegmentList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< RoadSegment >-----#
    RoadSegment = SEQ(name='RoadSegment', mode=MODE_TYPE)
    _RoadSegment_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _RoadSegment_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadSegmentReferenceID')))
    _RoadSegment_revision = INT(name='revision', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _RoadSegment_refPoint = SEQ(name='refPoint', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RoadSegment_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneWidth')), opt=True)
    _RoadSegment_speedLimits = SEQ_OF(name='speedLimits', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedLimitList')), opt=True)
    _RoadSegment_roadLaneSet = SEQ_OF(name='roadLaneSet', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('MapData', 'RoadLaneSetList')))
    _RoadSegment_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RoadSegment_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___RoadSegment_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RoadSegment_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RoadSegment_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RoadSegment_regional__item__regionId._const_tab = ____RoadSegment_regional__item__regionId_tab
    ___RoadSegment_regional__item__regionId._const_tab_at = None
    ___RoadSegment_regional__item__regionId._const_tab_id = 'id'
    ___RoadSegment_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____RoadSegment_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RoadSegment_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RoadSegment_regional__item__regExtValue._const_tab = ____RoadSegment_regional__item__regExtValue_tab
    ___RoadSegment_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RoadSegment_regional__item__regExtValue._const_tab_id = 'Type'
    __RoadSegment_regional__item_._cont = ASN1Dict([
        ('regionId', ___RoadSegment_regional__item__regionId),
        ('regExtValue', ___RoadSegment_regional__item__regExtValue),
        ])
    __RoadSegment_regional__item_._ext = None
    _RoadSegment_regional._cont = __RoadSegment_regional__item_
    _RoadSegment_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RoadSegment._cont = ASN1Dict([
        ('name', _RoadSegment_name),
        ('id', _RoadSegment_id),
        ('revision', _RoadSegment_revision),
        ('refPoint', _RoadSegment_refPoint),
        ('laneWidth', _RoadSegment_laneWidth),
        ('speedLimits', _RoadSegment_speedLimits),
        ('roadLaneSet', _RoadSegment_roadLaneSet),
        ('regional', _RoadSegment_regional),
        ])
    RoadSegment._ext = []
    
    #-----< AllowedManeuvers >-----#
    AllowedManeuvers = BIT_STR(name='AllowedManeuvers', mode=MODE_TYPE)
    AllowedManeuvers._cont = ASN1Dict([('maneuverStraightAllowed', 0), ('maneuverLeftAllowed', 1), ('maneuverRightAllowed', 2), ('maneuverUTurnAllowed', 3), ('maneuverLeftTurnOnRedAllowed', 4), ('maneuverRightTurnOnRedAllowed', 5), ('maneuverLaneChangeAllowed', 6), ('maneuverNoStoppingAllowed', 7), ('yieldAllwaysRequired', 8), ('goWithHalt', 9), ('caution', 10), ('reserved1', 11)])
    AllowedManeuvers._const_sz = ASN1Set(rv=[12], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Barrier >-----#
    LaneAttributes_Barrier = BIT_STR(name='LaneAttributes-Barrier', mode=MODE_TYPE)
    LaneAttributes_Barrier._cont = ASN1Dict([('median-RevocableLane', 0), ('median', 1), ('whiteLineHashing', 2), ('stripedLines', 3), ('doubleStripedLines', 4), ('trafficCones', 5), ('constructionBarrier', 6), ('trafficChannels', 7), ('lowCurbs', 8), ('highCurbs', 9)])
    LaneAttributes_Barrier._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Bike >-----#
    LaneAttributes_Bike = BIT_STR(name='LaneAttributes-Bike', mode=MODE_TYPE)
    LaneAttributes_Bike._cont = ASN1Dict([('bikeRevocableLane', 0), ('pedestrianUseAllowed', 1), ('isBikeFlyOverLane', 2), ('fixedCycleTime', 3), ('biDirectionalCycleTimes', 4), ('isolatedByBarrier', 5), ('unsignalizedSegmentsPresent', 6)])
    LaneAttributes_Bike._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Crosswalk >-----#
    LaneAttributes_Crosswalk = BIT_STR(name='LaneAttributes-Crosswalk', mode=MODE_TYPE)
    LaneAttributes_Crosswalk._cont = ASN1Dict([('crosswalkRevocableLane', 0), ('bicyleUseAllowed', 1), ('isXwalkFlyOverLane', 2), ('fixedCycleTime', 3), ('biDirectionalCycleTimes', 4), ('hasPushToWalkButton', 5), ('audioSupport', 6), ('rfSignalRequestPresent', 7), ('unsignalizedSegmentsPresent', 8)])
    LaneAttributes_Crosswalk._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Parking >-----#
    LaneAttributes_Parking = BIT_STR(name='LaneAttributes-Parking', mode=MODE_TYPE)
    LaneAttributes_Parking._cont = ASN1Dict([('parkingRevocableLane', 0), ('parallelParkingInUse', 1), ('headInParkingInUse', 2), ('doNotParkZone', 3), ('parkingForBusUse', 4), ('parkingForTaxiUse', 5), ('noPublicParkingUse', 6)])
    LaneAttributes_Parking._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Sidewalk >-----#
    LaneAttributes_Sidewalk = BIT_STR(name='LaneAttributes-Sidewalk', mode=MODE_TYPE)
    LaneAttributes_Sidewalk._cont = ASN1Dict([('sidewalk-RevocableLane', 0), ('bicyleUseAllowed', 1), ('isSidewalkFlyOverLane', 2), ('walkBikes', 3)])
    LaneAttributes_Sidewalk._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Striping >-----#
    LaneAttributes_Striping = BIT_STR(name='LaneAttributes-Striping', mode=MODE_TYPE)
    LaneAttributes_Striping._cont = ASN1Dict([('stripeToConnectingLanesRevocableLane', 0), ('stripeDrawOnLeft', 1), ('stripeDrawOnRight', 2), ('stripeToConnectingLanesLeft', 3), ('stripeToConnectingLanesRight', 4), ('stripeToConnectingLanesAhead', 5)])
    LaneAttributes_Striping._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-TrackedVehicle >-----#
    LaneAttributes_TrackedVehicle = BIT_STR(name='LaneAttributes-TrackedVehicle', mode=MODE_TYPE)
    LaneAttributes_TrackedVehicle._cont = ASN1Dict([('spec-RevocableLane', 0), ('spec-commuterRailRoadTrack', 1), ('spec-lightRailRoadTrack', 2), ('spec-heavyRailRoadTrack', 3), ('spec-otherRailType', 4)])
    LaneAttributes_TrackedVehicle._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Vehicle >-----#
    LaneAttributes_Vehicle = BIT_STR(name='LaneAttributes-Vehicle', mode=MODE_TYPE)
    LaneAttributes_Vehicle._cont = ASN1Dict([('isVehicleRevocableLane', 0), ('isVehicleFlyOverLane', 1), ('hovLaneUseOnly', 2), ('restrictedToBusUse', 3), ('restrictedToTaxiUse', 4), ('restrictedFromPublicUse', 5), ('hasIRbeaconCoverage', 6), ('permissionOnRequest', 7)])
    LaneAttributes_Vehicle._const_sz = ASN1Set(rv=[8], rr=[], ev=[], er=[])
    
    #-----< LaneDirection >-----#
    LaneDirection = BIT_STR(name='LaneDirection', mode=MODE_TYPE)
    LaneDirection._cont = ASN1Dict([('ingressPath', 0), ('egressPath', 1)])
    LaneDirection._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< LaneSharing >-----#
    LaneSharing = BIT_STR(name='LaneSharing', mode=MODE_TYPE)
    LaneSharing._cont = ASN1Dict([('overlappingLaneDescriptionProvided', 0), ('multipleLanesTreatedAsOneLane', 1), ('otherNonMotorizedTrafficTypes', 2), ('individualMotorizedVehicleTraffic', 3), ('busVehicleTraffic', 4), ('taxiVehicleTraffic', 5), ('pedestriansTraffic', 6), ('cyclistVehicleTraffic', 7), ('trackedVehicleTraffic', 8), ('reserved', 9)])
    LaneSharing._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    
    #-----< LayerID >-----#
    LayerID = INT(name='LayerID', mode=MODE_TYPE)
    LayerID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=100)], ev=None, er=[])
    
    #-----< LayerType >-----#
    LayerType = ENUM(name='LayerType', mode=MODE_TYPE)
    LayerType._cont = ASN1Dict([('none', 0), ('mixedContent', 1), ('generalMapData', 2), ('intersectionData', 3), ('curveData', 4), ('roadwaySectionData', 5), ('parkingAreaData', 6), ('sharedLaneData', 7)])
    LayerType._ext = []
    
    #-----< RestrictionAppliesTo >-----#
    RestrictionAppliesTo = ENUM(name='RestrictionAppliesTo', mode=MODE_TYPE)
    RestrictionAppliesTo._cont = ASN1Dict([('none', 0), ('equippedTransit', 1), ('equippedTaxis', 2), ('equippedOther', 3), ('emissionCompliant', 4), ('equippedBicycle', 5), ('weightCompliant', 6), ('heightCompliant', 7), ('pedestrians', 8), ('slowMovingPersons', 9), ('wheelchairUsers', 10), ('visualDisabilities', 11), ('audioDisabilities', 12), ('otherUnknownDisabilities', 13)])
    RestrictionAppliesTo._ext = []
    
    _all_ = [
        _MapData_timeStamp,
        _MapData_msgIssueRevision,
        _MapData_layerType,
        _MapData_layerID,
        _MapData_intersections,
        _MapData_roadSegments,
        _MapData_dataParameters,
        _MapData_restrictionList,
        ____MapData_regional__item__regionId_tab,
        _____MapData_regional__item__regionId_tab_val_Type_0,
        ___MapData_regional__item__regionId,
        ___MapData_regional__item__regExtValue,
        __MapData_regional__item_,
        _MapData_regional,
        MapData,
        _ConnectingLane_lane,
        _ConnectingLane_maneuver,
        ConnectingLane,
        _Connection_connectingLane,
        _Connection_remoteIntersection,
        _Connection_signalGroup,
        _Connection_userClass,
        _Connection_connectionID,
        Connection,
        _ConnectsToList__item_,
        ConnectsToList,
        _DataParameters_processMethod,
        _DataParameters_processAgency,
        _DataParameters_lastCheckedDate,
        _DataParameters_geoidUsed,
        DataParameters,
        _GenericLane_laneID,
        _GenericLane_name,
        _GenericLane_ingressApproach,
        _GenericLane_egressApproach,
        _GenericLane_laneAttributes,
        _GenericLane_maneuvers,
        _GenericLane_nodeList,
        _GenericLane_connectsTo,
        _GenericLane_overlays,
        ____GenericLane_regional__item__regionId_tab,
        ___GenericLane_regional__item__regionId,
        ____GenericLane_regional__item__regExtValue_tab,
        ___GenericLane_regional__item__regExtValue,
        __GenericLane_regional__item_,
        _GenericLane_regional,
        GenericLane,
        _IntersectionGeometry_name,
        _IntersectionGeometry_id,
        _IntersectionGeometry_revision,
        _IntersectionGeometry_refPoint,
        _IntersectionGeometry_laneWidth,
        _IntersectionGeometry_speedLimits,
        _IntersectionGeometry_laneSet,
        _IntersectionGeometry_preemptPriorityData,
        ____IntersectionGeometry_regional__item__regionId_tab,
        ___IntersectionGeometry_regional__item__regionId,
        ____IntersectionGeometry_regional__item__regExtValue_tab,
        ___IntersectionGeometry_regional__item__regExtValue,
        __IntersectionGeometry_regional__item_,
        _IntersectionGeometry_regional,
        _IntersectionGeometry_roadAuthorityID,
        IntersectionGeometry,
        _IntersectionGeometryList__item_,
        IntersectionGeometryList,
        _LaneAttributes_directionalUse,
        _LaneAttributes_sharedWith,
        _LaneAttributes_laneType,
        ___LaneAttributes_regional_regionId_tab,
        __LaneAttributes_regional_regionId,
        ___LaneAttributes_regional_regExtValue_tab,
        __LaneAttributes_regional_regExtValue,
        _LaneAttributes_regional,
        LaneAttributes,
        _LaneList__item_,
        LaneList,
        _LaneTypeAttributes_vehicle,
        _LaneTypeAttributes_crosswalk,
        _LaneTypeAttributes_bikeLane,
        _LaneTypeAttributes_sidewalk,
        _LaneTypeAttributes_median,
        _LaneTypeAttributes_striping,
        _LaneTypeAttributes_trackedVehicle,
        _LaneTypeAttributes_parking,
        LaneTypeAttributes,
        _OverlayLaneList__item_,
        OverlayLaneList,
        _PreemptPriorityList__item_,
        PreemptPriorityList,
        ___SignalControlZone_zone_regionId_tab,
        __SignalControlZone_zone_regionId,
        ___SignalControlZone_zone_regExtValue_tab,
        __SignalControlZone_zone_regExtValue,
        _SignalControlZone_zone,
        SignalControlZone,
        _RestrictionClassAssignment_id,
        _RestrictionClassAssignment_users,
        RestrictionClassAssignment,
        _RestrictionClassList__item_,
        RestrictionClassList,
        _RestrictionUserTypeList__item_,
        RestrictionUserTypeList,
        _RestrictionUserType_basicType,
        ____RestrictionUserType_regional__item__regionId_tab,
        _____RestrictionUserType_regional__item__regionId_tab_val_Type_0,
        ___RestrictionUserType_regional__item__regionId,
        ___RestrictionUserType_regional__item__regExtValue,
        __RestrictionUserType_regional__item_,
        _RestrictionUserType_regional,
        RestrictionUserType,
        _RoadLaneSetList__item_,
        RoadLaneSetList,
        _RoadSegmentList__item_,
        RoadSegmentList,
        _RoadSegment_name,
        _RoadSegment_id,
        _RoadSegment_revision,
        _RoadSegment_refPoint,
        _RoadSegment_laneWidth,
        _RoadSegment_speedLimits,
        _RoadSegment_roadLaneSet,
        ____RoadSegment_regional__item__regionId_tab,
        ___RoadSegment_regional__item__regionId,
        ____RoadSegment_regional__item__regExtValue_tab,
        ___RoadSegment_regional__item__regExtValue,
        __RoadSegment_regional__item_,
        _RoadSegment_regional,
        RoadSegment,
        AllowedManeuvers,
        LaneAttributes_Barrier,
        LaneAttributes_Bike,
        LaneAttributes_Crosswalk,
        LaneAttributes_Parking,
        LaneAttributes_Sidewalk,
        LaneAttributes_Striping,
        LaneAttributes_TrackedVehicle,
        LaneAttributes_Vehicle,
        LaneDirection,
        LaneSharing,
        LayerID,
        LayerType,
        RestrictionAppliesTo,
    ]

class MessageFrame:

    _name_  = 'MessageFrame'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 1, 1, 1]
    
    _obj_ = [
        'MessageFrame',
        'MESSAGE-ID-AND-TYPE',
        'MessageTypes',
        'DSRCmsgID',
        'mapData',
        'signalPhaseAndTimingMessage',
        'basicSafetyMessage',
        'commonSafetyRequest',
        'emergencyVehicleAlert',
        'intersectionCollision',
        'nmeaCorrections',
        'probeDataManagement',
        'probeVehicleData',
        'roadSideAlert',
        'rtcmCorrections',
        'signalRequestMessage',
        'signalStatusMessage',
        'travelerInformation',
        'personalSafetyMessage',
        'roadSafetyMessage',
        'roadWeatherMessage',
        'probeDataConfigMessage',
        'probeDataReportMessage',
        'tollAdvertisementMessage',
        'tollUsageMessage',
        'tollUsageAckMessage',
        'cooperativeControlMessage',
        'sensorDataSharingMessage',
        'maneuverSharingAndCoordinatingMessage',
        'roadGeometryAndAttributes',
        'personalSafetyMessage2',
        'trafficSignalPhaseAndTiming',
        'signalControlAndPrioritizationRequest',
        'signalControlAndPrioritizationStatus',
        'roadUserChargingConfigMessage',
        'roadUserChargingReportMessage',
        'trafficLightStatusMessage',
        'testMessage00',
        'testMessage01',
        'testMessage02',
        'testMessage03',
        'testMessage04',
        'testMessage05',
        'testMessage06',
        'testMessage07',
        'testMessage08',
        'testMessage09',
        'testMessage10',
        'testMessage11',
        'testMessage12',
        'testMessage13',
        'testMessage14',
        'testMessage15',
        ]
    _type_ = [
        'MessageFrame',
        'MESSAGE-ID-AND-TYPE',
        'DSRCmsgID',
        ]
    _set_ = [
        'MessageTypes',
        ]
    _val_ = [
        'mapData',
        'signalPhaseAndTimingMessage',
        'basicSafetyMessage',
        'commonSafetyRequest',
        'emergencyVehicleAlert',
        'intersectionCollision',
        'nmeaCorrections',
        'probeDataManagement',
        'probeVehicleData',
        'roadSideAlert',
        'rtcmCorrections',
        'signalRequestMessage',
        'signalStatusMessage',
        'travelerInformation',
        'personalSafetyMessage',
        'roadSafetyMessage',
        'roadWeatherMessage',
        'probeDataConfigMessage',
        'probeDataReportMessage',
        'tollAdvertisementMessage',
        'tollUsageMessage',
        'tollUsageAckMessage',
        'cooperativeControlMessage',
        'sensorDataSharingMessage',
        'maneuverSharingAndCoordinatingMessage',
        'roadGeometryAndAttributes',
        'personalSafetyMessage2',
        'trafficSignalPhaseAndTiming',
        'signalControlAndPrioritizationRequest',
        'signalControlAndPrioritizationStatus',
        'roadUserChargingConfigMessage',
        'roadUserChargingReportMessage',
        'trafficLightStatusMessage',
        'testMessage00',
        'testMessage01',
        'testMessage02',
        'testMessage03',
        'testMessage04',
        'testMessage05',
        'testMessage06',
        'testMessage07',
        'testMessage08',
        'testMessage09',
        'testMessage10',
        'testMessage11',
        'testMessage12',
        'testMessage13',
        'testMessage14',
        'testMessage15',
        ]
    _class_ = [
        'MESSAGE-ID-AND-TYPE',
        'MessageTypes',
        ]
    _param_ = [
        ]
    
    #-----< MessageFrame >-----#
    MessageFrame = SEQ(name='MessageFrame', mode=MODE_TYPE)
    _MessageFrame_messageId = INT(name='messageId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('MessageFrame', 'MESSAGE-ID-AND-TYPE'), ['id']))
    __MessageFrame_messageId_tab = CLASS(name='_tab_MESSAGE-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('MessageFrame', 'MESSAGE-ID-AND-TYPE')))
    ___MessageFrame_messageId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'BasicSafetyMessage')))
    ___MessageFrame_messageId_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'MapData')))
    ___MessageFrame_messageId_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SPAT', 'SPAT')))
    ___MessageFrame_messageId_tab_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CommonSafetyRequest', 'CommonSafetyRequest')))
    ___MessageFrame_messageId_tab_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EmergencyVehicleAlert', 'EmergencyVehicleAlert')))
    ___MessageFrame_messageId_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('IntersectionCollision', 'IntersectionCollision')))
    ___MessageFrame_messageId_tab_val_Type_6 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('NMEAcorrections', 'NMEAcorrections')))
    ___MessageFrame_messageId_tab_val_Type_7 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataManagement', 'ProbeDataManagement')))
    ___MessageFrame_messageId_tab_val_Type_8 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeVehicleData', 'ProbeVehicleData')))
    ___MessageFrame_messageId_tab_val_Type_9 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSideAlert', 'RoadSideAlert')))
    ___MessageFrame_messageId_tab_val_Type_10 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RTCMcorrections', 'RTCMcorrections')))
    ___MessageFrame_messageId_tab_val_Type_11 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalRequestMessage', 'SignalRequestMessage')))
    ___MessageFrame_messageId_tab_val_Type_12 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalStatusMessage', 'SignalStatusMessage')))
    ___MessageFrame_messageId_tab_val_Type_13 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'TravelerInformation')))
    ___MessageFrame_messageId_tab_val_Type_14 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalSafetyMessage')))
    ___MessageFrame_messageId_tab_val_Type_15 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'RoadSafetyMessage')))
    ___MessageFrame_messageId_tab_val_Type_16 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadWeatherMessage', 'RoadWeatherMessage')))
    ___MessageFrame_messageId_tab_val_Type_17 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataConfig', 'ProbeDataConfigMessage')))
    ___MessageFrame_messageId_tab_val_Type_18 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataReport', 'ProbeDataReportMessage')))
    ___MessageFrame_messageId_tab_val_Type_19 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'TollAdvertisementMessage')))
    ___MessageFrame_messageId_tab_val_Type_20 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TollUsageMessage', 'TollUsageMessage')))
    ___MessageFrame_messageId_tab_val_Type_21 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TollUsageAckMessage', 'TollUsageAckMessage')))
    ___MessageFrame_messageId_tab_val_Type_22 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CooperativeControlMessage', 'CooperativeControlMessage')))
    ___MessageFrame_messageId_tab_val_Type_23 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SensorDataSharingMessage', 'SensorDataSharingMessage')))
    ___MessageFrame_messageId_tab_val_Type_24 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ManeuverSharingAndCoordinatingMessage')))
    ___MessageFrame_messageId_tab_val_Type_25 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadGeometryAndAttributes', 'RoadGeometryAndAttributes')))
    ___MessageFrame_messageId_tab_val_Type_26 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PersonalSafetyMessage2', 'PersonalSafetyMessage2')))
    ___MessageFrame_messageId_tab_val_Type_27 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TrafficSignalPhaseAndTiming', 'TrafficSignalPhaseAndTiming')))
    ___MessageFrame_messageId_tab_val_Type_28 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalControlAndPrioritizationRequest', 'SignalControlAndPrioritizationRequest')))
    ___MessageFrame_messageId_tab_val_Type_29 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalControlAndPrioritizationStatus', 'SignalControlAndPrioritizationStatus')))
    ___MessageFrame_messageId_tab_val_Type_30 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'RoadUserChargingConfigMessage')))
    ___MessageFrame_messageId_tab_val_Type_31 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingReportMessage', 'RoadUserChargingReportMessage')))
    ___MessageFrame_messageId_tab_val_Type_32 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightStatusMessage')))
    ___MessageFrame_messageId_tab_val_Type_33 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage00', 'TestMessage00')))
    ___MessageFrame_messageId_tab_val_Type_34 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage01', 'TestMessage01')))
    ___MessageFrame_messageId_tab_val_Type_35 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage02', 'TestMessage02')))
    ___MessageFrame_messageId_tab_val_Type_36 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage03', 'TestMessage03')))
    ___MessageFrame_messageId_tab_val_Type_37 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage04', 'TestMessage04')))
    ___MessageFrame_messageId_tab_val_Type_38 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage05', 'TestMessage05')))
    ___MessageFrame_messageId_tab_val_Type_39 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage06', 'TestMessage06')))
    ___MessageFrame_messageId_tab_val_Type_40 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage07', 'TestMessage07')))
    ___MessageFrame_messageId_tab_val_Type_41 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage08', 'TestMessage08')))
    ___MessageFrame_messageId_tab_val_Type_42 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage09', 'TestMessage09')))
    ___MessageFrame_messageId_tab_val_Type_43 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage10', 'TestMessage10')))
    ___MessageFrame_messageId_tab_val_Type_44 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage11', 'TestMessage11')))
    ___MessageFrame_messageId_tab_val_Type_45 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage12', 'TestMessage12')))
    ___MessageFrame_messageId_tab_val_Type_46 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage13', 'TestMessage13')))
    ___MessageFrame_messageId_tab_val_Type_47 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage14', 'TestMessage14')))
    ___MessageFrame_messageId_tab_val_Type_48 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage15', 'TestMessage15')))
    __MessageFrame_messageId_tab._val = ASN1Set(rv=[dict([('Type', ___MessageFrame_messageId_tab_val_Type_0), ('id', 20)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_1), ('id', 18)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_2), ('id', 19)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_3), ('id', 21)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_4), ('id', 22)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_5), ('id', 23)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_6), ('id', 24)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_7), ('id', 25)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_8), ('id', 26)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_9), ('id', 27)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_10), ('id', 28)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_11), ('id', 29)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_12), ('id', 30)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_13), ('id', 31)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_14), ('id', 32)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_15), ('id', 33)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_16), ('id', 34)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_17), ('id', 35)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_18), ('id', 36)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_19), ('id', 37)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_20), ('id', 38)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_21), ('id', 39)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_22), ('id', 40)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_23), ('id', 41)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_24), ('id', 42)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_25), ('id', 43)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_26), ('id', 44)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_27), ('id', 45)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_28), ('id', 46)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_29), ('id', 47)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_30), ('id', 48)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_31), ('id', 49)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_32), ('id', 50)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_33), ('id', 240)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_34), ('id', 241)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_35), ('id', 242)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_36), ('id', 243)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_37), ('id', 244)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_38), ('id', 245)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_39), ('id', 246)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_40), ('id', 247)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_41), ('id', 248)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_42), ('id', 249)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_43), ('id', 250)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_44), ('id', 251)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_45), ('id', 252)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_46), ('id', 253)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_47), ('id', 254)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_48), ('id', 255)])], rr=[], ev=None, er=[])
    _MessageFrame_messageId._const_tab = __MessageFrame_messageId_tab
    _MessageFrame_messageId._const_tab_at = None
    _MessageFrame_messageId._const_tab_id = 'id'
    _MessageFrame_value = OPEN(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('MessageFrame', 'MESSAGE-ID-AND-TYPE'), ['Type']))
    _MessageFrame_value._const_tab = __MessageFrame_messageId_tab
    _MessageFrame_value._const_tab_at = ('..', 'messageId')
    _MessageFrame_value._const_tab_id = 'Type'
    MessageFrame._cont = ASN1Dict([
        ('messageId', _MessageFrame_messageId),
        ('value', _MessageFrame_value),
        ])
    MessageFrame._ext = []
    
    #-----< MESSAGE-ID-AND-TYPE >-----#
    MESSAGE_ID_AND_TYPE = CLASS(name='MESSAGE-ID-AND-TYPE', mode=MODE_TYPE)
    _MESSAGE_ID_AND_TYPE_id = INT(name='id', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')), uniq=True)
    _MESSAGE_ID_AND_TYPE_Type = OPEN(name='Type', mode=MODE_TYPE)
    MESSAGE_ID_AND_TYPE._cont = ASN1Dict([
        ('id', _MESSAGE_ID_AND_TYPE_id),
        ('Type', _MESSAGE_ID_AND_TYPE_Type),
        ])
    
    #-----< MessageTypes >-----#
    MessageTypes = CLASS(name='MessageTypes', mode=MODE_SET, typeref=ASN1RefType(('MessageFrame', 'MESSAGE-ID-AND-TYPE')))
    _MessageTypes_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('BasicSafetyMessage', 'BasicSafetyMessage')))
    _MessageTypes_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'MapData')))
    _MessageTypes_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SPAT', 'SPAT')))
    _MessageTypes_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CommonSafetyRequest', 'CommonSafetyRequest')))
    _MessageTypes_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EmergencyVehicleAlert', 'EmergencyVehicleAlert')))
    _MessageTypes_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('IntersectionCollision', 'IntersectionCollision')))
    _MessageTypes_val_Type_6 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('NMEAcorrections', 'NMEAcorrections')))
    _MessageTypes_val_Type_7 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataManagement', 'ProbeDataManagement')))
    _MessageTypes_val_Type_8 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeVehicleData', 'ProbeVehicleData')))
    _MessageTypes_val_Type_9 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSideAlert', 'RoadSideAlert')))
    _MessageTypes_val_Type_10 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RTCMcorrections', 'RTCMcorrections')))
    _MessageTypes_val_Type_11 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalRequestMessage', 'SignalRequestMessage')))
    _MessageTypes_val_Type_12 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalStatusMessage', 'SignalStatusMessage')))
    _MessageTypes_val_Type_13 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'TravelerInformation')))
    _MessageTypes_val_Type_14 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalSafetyMessage')))
    _MessageTypes_val_Type_15 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'RoadSafetyMessage')))
    _MessageTypes_val_Type_16 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadWeatherMessage', 'RoadWeatherMessage')))
    _MessageTypes_val_Type_17 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataConfig', 'ProbeDataConfigMessage')))
    _MessageTypes_val_Type_18 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataReport', 'ProbeDataReportMessage')))
    _MessageTypes_val_Type_19 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'TollAdvertisementMessage')))
    _MessageTypes_val_Type_20 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TollUsageMessage', 'TollUsageMessage')))
    _MessageTypes_val_Type_21 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TollUsageAckMessage', 'TollUsageAckMessage')))
    _MessageTypes_val_Type_22 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CooperativeControlMessage', 'CooperativeControlMessage')))
    _MessageTypes_val_Type_23 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SensorDataSharingMessage', 'SensorDataSharingMessage')))
    _MessageTypes_val_Type_24 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ManeuverSharingAndCoordinatingMessage')))
    _MessageTypes_val_Type_25 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadGeometryAndAttributes', 'RoadGeometryAndAttributes')))
    _MessageTypes_val_Type_26 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PersonalSafetyMessage2', 'PersonalSafetyMessage2')))
    _MessageTypes_val_Type_27 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TrafficSignalPhaseAndTiming', 'TrafficSignalPhaseAndTiming')))
    _MessageTypes_val_Type_28 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalControlAndPrioritizationRequest', 'SignalControlAndPrioritizationRequest')))
    _MessageTypes_val_Type_29 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SignalControlAndPrioritizationStatus', 'SignalControlAndPrioritizationStatus')))
    _MessageTypes_val_Type_30 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'RoadUserChargingConfigMessage')))
    _MessageTypes_val_Type_31 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingReportMessage', 'RoadUserChargingReportMessage')))
    _MessageTypes_val_Type_32 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightStatusMessage')))
    _MessageTypes_val_Type_33 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage00', 'TestMessage00')))
    _MessageTypes_val_Type_34 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage01', 'TestMessage01')))
    _MessageTypes_val_Type_35 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage02', 'TestMessage02')))
    _MessageTypes_val_Type_36 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage03', 'TestMessage03')))
    _MessageTypes_val_Type_37 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage04', 'TestMessage04')))
    _MessageTypes_val_Type_38 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage05', 'TestMessage05')))
    _MessageTypes_val_Type_39 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage06', 'TestMessage06')))
    _MessageTypes_val_Type_40 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage07', 'TestMessage07')))
    _MessageTypes_val_Type_41 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage08', 'TestMessage08')))
    _MessageTypes_val_Type_42 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage09', 'TestMessage09')))
    _MessageTypes_val_Type_43 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage10', 'TestMessage10')))
    _MessageTypes_val_Type_44 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage11', 'TestMessage11')))
    _MessageTypes_val_Type_45 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage12', 'TestMessage12')))
    _MessageTypes_val_Type_46 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage13', 'TestMessage13')))
    _MessageTypes_val_Type_47 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage14', 'TestMessage14')))
    _MessageTypes_val_Type_48 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('TestMessage15', 'TestMessage15')))
    MessageTypes._val = ASN1Set(rv=[dict([('Type', _MessageTypes_val_Type_0), ('id', 20)]), dict([('Type', _MessageTypes_val_Type_1), ('id', 18)]), dict([('Type', _MessageTypes_val_Type_2), ('id', 19)]), dict([('Type', _MessageTypes_val_Type_3), ('id', 21)]), dict([('Type', _MessageTypes_val_Type_4), ('id', 22)]), dict([('Type', _MessageTypes_val_Type_5), ('id', 23)]), dict([('Type', _MessageTypes_val_Type_6), ('id', 24)]), dict([('Type', _MessageTypes_val_Type_7), ('id', 25)]), dict([('Type', _MessageTypes_val_Type_8), ('id', 26)]), dict([('Type', _MessageTypes_val_Type_9), ('id', 27)]), dict([('Type', _MessageTypes_val_Type_10), ('id', 28)]), dict([('Type', _MessageTypes_val_Type_11), ('id', 29)]), dict([('Type', _MessageTypes_val_Type_12), ('id', 30)]), dict([('Type', _MessageTypes_val_Type_13), ('id', 31)]), dict([('Type', _MessageTypes_val_Type_14), ('id', 32)]), dict([('Type', _MessageTypes_val_Type_15), ('id', 33)]), dict([('Type', _MessageTypes_val_Type_16), ('id', 34)]), dict([('Type', _MessageTypes_val_Type_17), ('id', 35)]), dict([('Type', _MessageTypes_val_Type_18), ('id', 36)]), dict([('Type', _MessageTypes_val_Type_19), ('id', 37)]), dict([('Type', _MessageTypes_val_Type_20), ('id', 38)]), dict([('Type', _MessageTypes_val_Type_21), ('id', 39)]), dict([('Type', _MessageTypes_val_Type_22), ('id', 40)]), dict([('Type', _MessageTypes_val_Type_23), ('id', 41)]), dict([('Type', _MessageTypes_val_Type_24), ('id', 42)]), dict([('Type', _MessageTypes_val_Type_25), ('id', 43)]), dict([('Type', _MessageTypes_val_Type_26), ('id', 44)]), dict([('Type', _MessageTypes_val_Type_27), ('id', 45)]), dict([('Type', _MessageTypes_val_Type_28), ('id', 46)]), dict([('Type', _MessageTypes_val_Type_29), ('id', 47)]), dict([('Type', _MessageTypes_val_Type_30), ('id', 48)]), dict([('Type', _MessageTypes_val_Type_31), ('id', 49)]), dict([('Type', _MessageTypes_val_Type_32), ('id', 50)]), dict([('Type', _MessageTypes_val_Type_33), ('id', 240)]), dict([('Type', _MessageTypes_val_Type_34), ('id', 241)]), dict([('Type', _MessageTypes_val_Type_35), ('id', 242)]), dict([('Type', _MessageTypes_val_Type_36), ('id', 243)]), dict([('Type', _MessageTypes_val_Type_37), ('id', 244)]), dict([('Type', _MessageTypes_val_Type_38), ('id', 245)]), dict([('Type', _MessageTypes_val_Type_39), ('id', 246)]), dict([('Type', _MessageTypes_val_Type_40), ('id', 247)]), dict([('Type', _MessageTypes_val_Type_41), ('id', 248)]), dict([('Type', _MessageTypes_val_Type_42), ('id', 249)]), dict([('Type', _MessageTypes_val_Type_43), ('id', 250)]), dict([('Type', _MessageTypes_val_Type_44), ('id', 251)]), dict([('Type', _MessageTypes_val_Type_45), ('id', 252)]), dict([('Type', _MessageTypes_val_Type_46), ('id', 253)]), dict([('Type', _MessageTypes_val_Type_47), ('id', 254)]), dict([('Type', _MessageTypes_val_Type_48), ('id', 255)])], rr=[], ev=[], er=[])
    
    #-----< DSRCmsgID >-----#
    DSRCmsgID = INT(name='DSRCmsgID', mode=MODE_TYPE)
    DSRCmsgID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    
    #-----< mapData >-----#
    mapData = INT(name='mapData', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    mapData._val = 18
    
    #-----< signalPhaseAndTimingMessage >-----#
    signalPhaseAndTimingMessage = INT(name='signalPhaseAndTimingMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalPhaseAndTimingMessage._val = 19
    
    #-----< basicSafetyMessage >-----#
    basicSafetyMessage = INT(name='basicSafetyMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    basicSafetyMessage._val = 20
    
    #-----< commonSafetyRequest >-----#
    commonSafetyRequest = INT(name='commonSafetyRequest', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    commonSafetyRequest._val = 21
    
    #-----< emergencyVehicleAlert >-----#
    emergencyVehicleAlert = INT(name='emergencyVehicleAlert', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    emergencyVehicleAlert._val = 22
    
    #-----< intersectionCollision >-----#
    intersectionCollision = INT(name='intersectionCollision', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    intersectionCollision._val = 23
    
    #-----< nmeaCorrections >-----#
    nmeaCorrections = INT(name='nmeaCorrections', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    nmeaCorrections._val = 24
    
    #-----< probeDataManagement >-----#
    probeDataManagement = INT(name='probeDataManagement', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    probeDataManagement._val = 25
    
    #-----< probeVehicleData >-----#
    probeVehicleData = INT(name='probeVehicleData', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    probeVehicleData._val = 26
    
    #-----< roadSideAlert >-----#
    roadSideAlert = INT(name='roadSideAlert', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    roadSideAlert._val = 27
    
    #-----< rtcmCorrections >-----#
    rtcmCorrections = INT(name='rtcmCorrections', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    rtcmCorrections._val = 28
    
    #-----< signalRequestMessage >-----#
    signalRequestMessage = INT(name='signalRequestMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalRequestMessage._val = 29
    
    #-----< signalStatusMessage >-----#
    signalStatusMessage = INT(name='signalStatusMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalStatusMessage._val = 30
    
    #-----< travelerInformation >-----#
    travelerInformation = INT(name='travelerInformation', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    travelerInformation._val = 31
    
    #-----< personalSafetyMessage >-----#
    personalSafetyMessage = INT(name='personalSafetyMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    personalSafetyMessage._val = 32
    
    #-----< roadSafetyMessage >-----#
    roadSafetyMessage = INT(name='roadSafetyMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    roadSafetyMessage._val = 33
    
    #-----< roadWeatherMessage >-----#
    roadWeatherMessage = INT(name='roadWeatherMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    roadWeatherMessage._val = 34
    
    #-----< probeDataConfigMessage >-----#
    probeDataConfigMessage = INT(name='probeDataConfigMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    probeDataConfigMessage._val = 35
    
    #-----< probeDataReportMessage >-----#
    probeDataReportMessage = INT(name='probeDataReportMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    probeDataReportMessage._val = 36
    
    #-----< tollAdvertisementMessage >-----#
    tollAdvertisementMessage = INT(name='tollAdvertisementMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    tollAdvertisementMessage._val = 37
    
    #-----< tollUsageMessage >-----#
    tollUsageMessage = INT(name='tollUsageMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    tollUsageMessage._val = 38
    
    #-----< tollUsageAckMessage >-----#
    tollUsageAckMessage = INT(name='tollUsageAckMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    tollUsageAckMessage._val = 39
    
    #-----< cooperativeControlMessage >-----#
    cooperativeControlMessage = INT(name='cooperativeControlMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    cooperativeControlMessage._val = 40
    
    #-----< sensorDataSharingMessage >-----#
    sensorDataSharingMessage = INT(name='sensorDataSharingMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    sensorDataSharingMessage._val = 41
    
    #-----< maneuverSharingAndCoordinatingMessage >-----#
    maneuverSharingAndCoordinatingMessage = INT(name='maneuverSharingAndCoordinatingMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    maneuverSharingAndCoordinatingMessage._val = 42
    
    #-----< roadGeometryAndAttributes >-----#
    roadGeometryAndAttributes = INT(name='roadGeometryAndAttributes', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    roadGeometryAndAttributes._val = 43
    
    #-----< personalSafetyMessage2 >-----#
    personalSafetyMessage2 = INT(name='personalSafetyMessage2', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    personalSafetyMessage2._val = 44
    
    #-----< trafficSignalPhaseAndTiming >-----#
    trafficSignalPhaseAndTiming = INT(name='trafficSignalPhaseAndTiming', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    trafficSignalPhaseAndTiming._val = 45
    
    #-----< signalControlAndPrioritizationRequest >-----#
    signalControlAndPrioritizationRequest = INT(name='signalControlAndPrioritizationRequest', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalControlAndPrioritizationRequest._val = 46
    
    #-----< signalControlAndPrioritizationStatus >-----#
    signalControlAndPrioritizationStatus = INT(name='signalControlAndPrioritizationStatus', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    signalControlAndPrioritizationStatus._val = 47
    
    #-----< roadUserChargingConfigMessage >-----#
    roadUserChargingConfigMessage = INT(name='roadUserChargingConfigMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    roadUserChargingConfigMessage._val = 48
    
    #-----< roadUserChargingReportMessage >-----#
    roadUserChargingReportMessage = INT(name='roadUserChargingReportMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    roadUserChargingReportMessage._val = 49
    
    #-----< trafficLightStatusMessage >-----#
    trafficLightStatusMessage = INT(name='trafficLightStatusMessage', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    trafficLightStatusMessage._val = 50
    
    #-----< testMessage00 >-----#
    testMessage00 = INT(name='testMessage00', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage00._val = 240
    
    #-----< testMessage01 >-----#
    testMessage01 = INT(name='testMessage01', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage01._val = 241
    
    #-----< testMessage02 >-----#
    testMessage02 = INT(name='testMessage02', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage02._val = 242
    
    #-----< testMessage03 >-----#
    testMessage03 = INT(name='testMessage03', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage03._val = 243
    
    #-----< testMessage04 >-----#
    testMessage04 = INT(name='testMessage04', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage04._val = 244
    
    #-----< testMessage05 >-----#
    testMessage05 = INT(name='testMessage05', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage05._val = 245
    
    #-----< testMessage06 >-----#
    testMessage06 = INT(name='testMessage06', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage06._val = 246
    
    #-----< testMessage07 >-----#
    testMessage07 = INT(name='testMessage07', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage07._val = 247
    
    #-----< testMessage08 >-----#
    testMessage08 = INT(name='testMessage08', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage08._val = 248
    
    #-----< testMessage09 >-----#
    testMessage09 = INT(name='testMessage09', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage09._val = 249
    
    #-----< testMessage10 >-----#
    testMessage10 = INT(name='testMessage10', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage10._val = 250
    
    #-----< testMessage11 >-----#
    testMessage11 = INT(name='testMessage11', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage11._val = 251
    
    #-----< testMessage12 >-----#
    testMessage12 = INT(name='testMessage12', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage12._val = 252
    
    #-----< testMessage13 >-----#
    testMessage13 = INT(name='testMessage13', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage13._val = 253
    
    #-----< testMessage14 >-----#
    testMessage14 = INT(name='testMessage14', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage14._val = 254
    
    #-----< testMessage15 >-----#
    testMessage15 = INT(name='testMessage15', mode=MODE_VALUE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    testMessage15._val = 255
    
    _all_ = [
        __MessageFrame_messageId_tab,
        ___MessageFrame_messageId_tab_val_Type_0,
        ___MessageFrame_messageId_tab_val_Type_1,
        ___MessageFrame_messageId_tab_val_Type_2,
        ___MessageFrame_messageId_tab_val_Type_3,
        ___MessageFrame_messageId_tab_val_Type_4,
        ___MessageFrame_messageId_tab_val_Type_5,
        ___MessageFrame_messageId_tab_val_Type_6,
        ___MessageFrame_messageId_tab_val_Type_7,
        ___MessageFrame_messageId_tab_val_Type_8,
        ___MessageFrame_messageId_tab_val_Type_9,
        ___MessageFrame_messageId_tab_val_Type_10,
        ___MessageFrame_messageId_tab_val_Type_11,
        ___MessageFrame_messageId_tab_val_Type_12,
        ___MessageFrame_messageId_tab_val_Type_13,
        ___MessageFrame_messageId_tab_val_Type_14,
        ___MessageFrame_messageId_tab_val_Type_15,
        ___MessageFrame_messageId_tab_val_Type_16,
        ___MessageFrame_messageId_tab_val_Type_17,
        ___MessageFrame_messageId_tab_val_Type_18,
        ___MessageFrame_messageId_tab_val_Type_19,
        ___MessageFrame_messageId_tab_val_Type_20,
        ___MessageFrame_messageId_tab_val_Type_21,
        ___MessageFrame_messageId_tab_val_Type_22,
        ___MessageFrame_messageId_tab_val_Type_23,
        ___MessageFrame_messageId_tab_val_Type_24,
        ___MessageFrame_messageId_tab_val_Type_25,
        ___MessageFrame_messageId_tab_val_Type_26,
        ___MessageFrame_messageId_tab_val_Type_27,
        ___MessageFrame_messageId_tab_val_Type_28,
        ___MessageFrame_messageId_tab_val_Type_29,
        ___MessageFrame_messageId_tab_val_Type_30,
        ___MessageFrame_messageId_tab_val_Type_31,
        ___MessageFrame_messageId_tab_val_Type_32,
        ___MessageFrame_messageId_tab_val_Type_33,
        ___MessageFrame_messageId_tab_val_Type_34,
        ___MessageFrame_messageId_tab_val_Type_35,
        ___MessageFrame_messageId_tab_val_Type_36,
        ___MessageFrame_messageId_tab_val_Type_37,
        ___MessageFrame_messageId_tab_val_Type_38,
        ___MessageFrame_messageId_tab_val_Type_39,
        ___MessageFrame_messageId_tab_val_Type_40,
        ___MessageFrame_messageId_tab_val_Type_41,
        ___MessageFrame_messageId_tab_val_Type_42,
        ___MessageFrame_messageId_tab_val_Type_43,
        ___MessageFrame_messageId_tab_val_Type_44,
        ___MessageFrame_messageId_tab_val_Type_45,
        ___MessageFrame_messageId_tab_val_Type_46,
        ___MessageFrame_messageId_tab_val_Type_47,
        ___MessageFrame_messageId_tab_val_Type_48,
        _MessageFrame_messageId,
        _MessageFrame_value,
        MessageFrame,
        _MESSAGE_ID_AND_TYPE_id,
        _MESSAGE_ID_AND_TYPE_Type,
        MESSAGE_ID_AND_TYPE,
        MessageTypes,
        _MessageTypes_val_Type_0,
        _MessageTypes_val_Type_1,
        _MessageTypes_val_Type_2,
        _MessageTypes_val_Type_3,
        _MessageTypes_val_Type_4,
        _MessageTypes_val_Type_5,
        _MessageTypes_val_Type_6,
        _MessageTypes_val_Type_7,
        _MessageTypes_val_Type_8,
        _MessageTypes_val_Type_9,
        _MessageTypes_val_Type_10,
        _MessageTypes_val_Type_11,
        _MessageTypes_val_Type_12,
        _MessageTypes_val_Type_13,
        _MessageTypes_val_Type_14,
        _MessageTypes_val_Type_15,
        _MessageTypes_val_Type_16,
        _MessageTypes_val_Type_17,
        _MessageTypes_val_Type_18,
        _MessageTypes_val_Type_19,
        _MessageTypes_val_Type_20,
        _MessageTypes_val_Type_21,
        _MessageTypes_val_Type_22,
        _MessageTypes_val_Type_23,
        _MessageTypes_val_Type_24,
        _MessageTypes_val_Type_25,
        _MessageTypes_val_Type_26,
        _MessageTypes_val_Type_27,
        _MessageTypes_val_Type_28,
        _MessageTypes_val_Type_29,
        _MessageTypes_val_Type_30,
        _MessageTypes_val_Type_31,
        _MessageTypes_val_Type_32,
        _MessageTypes_val_Type_33,
        _MessageTypes_val_Type_34,
        _MessageTypes_val_Type_35,
        _MessageTypes_val_Type_36,
        _MessageTypes_val_Type_37,
        _MessageTypes_val_Type_38,
        _MessageTypes_val_Type_39,
        _MessageTypes_val_Type_40,
        _MessageTypes_val_Type_41,
        _MessageTypes_val_Type_42,
        _MessageTypes_val_Type_43,
        _MessageTypes_val_Type_44,
        _MessageTypes_val_Type_45,
        _MessageTypes_val_Type_46,
        _MessageTypes_val_Type_47,
        _MessageTypes_val_Type_48,
        DSRCmsgID,
        mapData,
        signalPhaseAndTimingMessage,
        basicSafetyMessage,
        commonSafetyRequest,
        emergencyVehicleAlert,
        intersectionCollision,
        nmeaCorrections,
        probeDataManagement,
        probeVehicleData,
        roadSideAlert,
        rtcmCorrections,
        signalRequestMessage,
        signalStatusMessage,
        travelerInformation,
        personalSafetyMessage,
        roadSafetyMessage,
        roadWeatherMessage,
        probeDataConfigMessage,
        probeDataReportMessage,
        tollAdvertisementMessage,
        tollUsageMessage,
        tollUsageAckMessage,
        cooperativeControlMessage,
        sensorDataSharingMessage,
        maneuverSharingAndCoordinatingMessage,
        roadGeometryAndAttributes,
        personalSafetyMessage2,
        trafficSignalPhaseAndTiming,
        signalControlAndPrioritizationRequest,
        signalControlAndPrioritizationStatus,
        roadUserChargingConfigMessage,
        roadUserChargingReportMessage,
        trafficLightStatusMessage,
        testMessage00,
        testMessage01,
        testMessage02,
        testMessage03,
        testMessage04,
        testMessage05,
        testMessage06,
        testMessage07,
        testMessage08,
        testMessage09,
        testMessage10,
        testMessage11,
        testMessage12,
        testMessage13,
        testMessage14,
        testMessage15,
    ]

class NMEAcorrections:

    _name_  = 'NMEAcorrections'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 13, 1, 1]
    
    _obj_ = [
        'NMEAcorrections',
        'NMEA-MsgType',
        'NMEA-Payload',
        'NMEA-Revision',
        'ObjectCount',
        ]
    _type_ = [
        'NMEAcorrections',
        'NMEA-MsgType',
        'NMEA-Payload',
        'NMEA-Revision',
        'ObjectCount',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< NMEAcorrections >-----#
    NMEAcorrections = SEQ(name='NMEAcorrections', mode=MODE_TYPE)
    _NMEAcorrections_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _NMEAcorrections_rev = ENUM(name='rev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NMEAcorrections', 'NMEA-Revision')), opt=True)
    _NMEAcorrections_msg = INT(name='msg', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NMEAcorrections', 'NMEA-MsgType')), opt=True)
    _NMEAcorrections_wdCount = INT(name='wdCount', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NMEAcorrections', 'ObjectCount')), opt=True)
    _NMEAcorrections_payload = OCT_STR(name='payload', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NMEAcorrections', 'NMEA-Payload')))
    _NMEAcorrections_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __NMEAcorrections_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___NMEAcorrections_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____NMEAcorrections_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____NMEAcorrections_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___NMEAcorrections_regional__item__regionId._const_tab = ____NMEAcorrections_regional__item__regionId_tab
    ___NMEAcorrections_regional__item__regionId._const_tab_at = None
    ___NMEAcorrections_regional__item__regionId._const_tab_id = 'id'
    ___NMEAcorrections_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____NMEAcorrections_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____NMEAcorrections_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___NMEAcorrections_regional__item__regExtValue._const_tab = ____NMEAcorrections_regional__item__regExtValue_tab
    ___NMEAcorrections_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___NMEAcorrections_regional__item__regExtValue._const_tab_id = 'Type'
    __NMEAcorrections_regional__item_._cont = ASN1Dict([
        ('regionId', ___NMEAcorrections_regional__item__regionId),
        ('regExtValue', ___NMEAcorrections_regional__item__regExtValue),
        ])
    __NMEAcorrections_regional__item_._ext = None
    _NMEAcorrections_regional._cont = __NMEAcorrections_regional__item_
    _NMEAcorrections_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    NMEAcorrections._cont = ASN1Dict([
        ('timeStamp', _NMEAcorrections_timeStamp),
        ('rev', _NMEAcorrections_rev),
        ('msg', _NMEAcorrections_msg),
        ('wdCount', _NMEAcorrections_wdCount),
        ('payload', _NMEAcorrections_payload),
        ('regional', _NMEAcorrections_regional),
        ])
    NMEAcorrections._ext = []
    
    #-----< NMEA-MsgType >-----#
    NMEA_MsgType = INT(name='NMEA-MsgType', mode=MODE_TYPE)
    NMEA_MsgType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    
    #-----< NMEA-Payload >-----#
    NMEA_Payload = OCT_STR(name='NMEA-Payload', mode=MODE_TYPE)
    NMEA_Payload._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1023)], ev=None, er=[])
    
    #-----< NMEA-Revision >-----#
    NMEA_Revision = ENUM(name='NMEA-Revision', mode=MODE_TYPE)
    NMEA_Revision._cont = ASN1Dict([('unknown', 0), ('reserved', 1), ('rev1', 2), ('rev2', 3), ('rev3', 4), ('rev4', 5), ('rev5', 6)])
    NMEA_Revision._ext = []
    
    #-----< ObjectCount >-----#
    ObjectCount = INT(name='ObjectCount', mode=MODE_TYPE)
    ObjectCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    
    _all_ = [
        _NMEAcorrections_timeStamp,
        _NMEAcorrections_rev,
        _NMEAcorrections_msg,
        _NMEAcorrections_wdCount,
        _NMEAcorrections_payload,
        ____NMEAcorrections_regional__item__regionId_tab,
        ___NMEAcorrections_regional__item__regionId,
        ____NMEAcorrections_regional__item__regExtValue_tab,
        ___NMEAcorrections_regional__item__regExtValue,
        __NMEAcorrections_regional__item_,
        _NMEAcorrections_regional,
        NMEAcorrections,
        NMEA_MsgType,
        NMEA_Payload,
        NMEA_Revision,
        ObjectCount,
    ]

class NTCIP:

    _name_  = 'NTCIP'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 5, 1, 1]
    
    _obj_ = [
        'EssMobileFriction',
        'EssPrecipRate',
        'EssPrecipSituation',
        'EssPrecipYesNo',
        'EssSolarRadiation',
        ]
    _type_ = [
        'EssMobileFriction',
        'EssPrecipRate',
        'EssPrecipSituation',
        'EssPrecipYesNo',
        'EssSolarRadiation',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< EssMobileFriction >-----#
    EssMobileFriction = INT(name='EssMobileFriction', mode=MODE_TYPE)
    EssMobileFriction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=101)], ev=None, er=[])
    
    #-----< EssPrecipRate >-----#
    EssPrecipRate = INT(name='EssPrecipRate', mode=MODE_TYPE)
    EssPrecipRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< EssPrecipSituation >-----#
    EssPrecipSituation = ENUM(name='EssPrecipSituation', mode=MODE_TYPE)
    EssPrecipSituation._cont = ASN1Dict([('other', 1), ('unknown', 2), ('noPrecipitation', 3), ('unidentifiedSlight', 4), ('unidentifiedModerate', 5), ('unidentifiedHeavy', 6), ('snowSlight', 7), ('snowModerate', 8), ('snowHeavy', 9), ('rainSlight', 10), ('rainModerate', 11), ('rainHeavy', 12), ('frozenPrecipitationSlight', 13), ('frozenPrecipitationModerate', 14), ('frozenPrecipitationHeavy', 15)])
    EssPrecipSituation._ext = None
    
    #-----< EssPrecipYesNo >-----#
    EssPrecipYesNo = ENUM(name='EssPrecipYesNo', mode=MODE_TYPE)
    EssPrecipYesNo._cont = ASN1Dict([('precip', 1), ('noPrecip', 2), ('error', 3)])
    EssPrecipYesNo._ext = None
    
    #-----< EssSolarRadiation >-----#
    EssSolarRadiation = INT(name='EssSolarRadiation', mode=MODE_TYPE)
    EssSolarRadiation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        EssMobileFriction,
        EssPrecipRate,
        EssPrecipSituation,
        EssPrecipYesNo,
        EssSolarRadiation,
    ]

class PersonalSafetyMessage:

    _name_  = 'PersonalSafetyMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 21, 1, 1]
    
    _obj_ = [
        'PersonalSafetyMessage',
        'PropelledInformation',
        'AnimalPropelledType',
        'AnimalType',
        'Attachment',
        'AttachmentRadius',
        'MotorizedPropelledType',
        'NumberOfParticipantsInCluster',
        'HumanPropelledType',
        'PersonalAssistive',
        'PersonalClusterRadius',
        'PersonalCrossingInProgress',
        'PersonalCrossingRequest',
        'PersonalDeviceUsageState',
        'PersonalDeviceUserType',
        'PublicSafetyAndRoadWorkerActivity',
        'PublicSafetyDirectingTrafficSubType',
        'PublicSafetyEventResponderWorkerType',
        'UserSizeAndBehaviour',
        ]
    _type_ = [
        'PersonalSafetyMessage',
        'PropelledInformation',
        'AnimalPropelledType',
        'AnimalType',
        'Attachment',
        'AttachmentRadius',
        'MotorizedPropelledType',
        'NumberOfParticipantsInCluster',
        'HumanPropelledType',
        'PersonalAssistive',
        'PersonalClusterRadius',
        'PersonalCrossingInProgress',
        'PersonalCrossingRequest',
        'PersonalDeviceUsageState',
        'PersonalDeviceUserType',
        'PublicSafetyAndRoadWorkerActivity',
        'PublicSafetyDirectingTrafficSubType',
        'PublicSafetyEventResponderWorkerType',
        'UserSizeAndBehaviour',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< PersonalSafetyMessage >-----#
    PersonalSafetyMessage = SEQ(name='PersonalSafetyMessage', mode=MODE_TYPE)
    _PersonalSafetyMessage_basicType = ENUM(name='basicType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalDeviceUserType')))
    _PersonalSafetyMessage_secMark = INT(name='secMark', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')))
    _PersonalSafetyMessage_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _PersonalSafetyMessage_id = OCT_STR(name='id', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _PersonalSafetyMessage_position = SEQ(name='position', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _PersonalSafetyMessage_accuracy = SEQ(name='accuracy', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _PersonalSafetyMessage_speed = INT(name='speed', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Velocity')))
    _PersonalSafetyMessage_heading = INT(name='heading', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Heading')))
    _PersonalSafetyMessage_accelSet = SEQ(name='accelSet', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AccelerationSet4Way')), opt=True)
    _PersonalSafetyMessage_pathHistory = SEQ(name='pathHistory', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PathHistory')), opt=True)
    _PersonalSafetyMessage_pathPrediction = SEQ(name='pathPrediction', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PathPrediction')), opt=True)
    _PersonalSafetyMessage_propulsion = CHOICE(name='propulsion', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PropelledInformation')), opt=True)
    _PersonalSafetyMessage_useState = BIT_STR(name='useState', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalDeviceUsageState')), opt=True)
    _PersonalSafetyMessage_crossRequest = BOOL(name='crossRequest', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalCrossingRequest')), opt=True)
    _PersonalSafetyMessage_crossState = BOOL(name='crossState', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalCrossingInProgress')), opt=True)
    _PersonalSafetyMessage_clusterSize = ENUM(name='clusterSize', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'NumberOfParticipantsInCluster')), opt=True)
    _PersonalSafetyMessage_clusterRadius = INT(name='clusterRadius', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalClusterRadius')), opt=True)
    _PersonalSafetyMessage_eventResponderType = ENUM(name='eventResponderType', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PublicSafetyEventResponderWorkerType')), opt=True)
    _PersonalSafetyMessage_activityType = BIT_STR(name='activityType', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PublicSafetyAndRoadWorkerActivity')), opt=True)
    _PersonalSafetyMessage_activitySubType = BIT_STR(name='activitySubType', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PublicSafetyDirectingTrafficSubType')), opt=True)
    _PersonalSafetyMessage_assistType = BIT_STR(name='assistType', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalAssistive')), opt=True)
    _PersonalSafetyMessage_sizing = BIT_STR(name='sizing', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'UserSizeAndBehaviour')), opt=True)
    _PersonalSafetyMessage_attachment = ENUM(name='attachment', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'Attachment')), opt=True)
    _PersonalSafetyMessage_attachmentRadius = INT(name='attachmentRadius', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'AttachmentRadius')), opt=True)
    _PersonalSafetyMessage_animalType = ENUM(name='animalType', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'AnimalType')), opt=True)
    _PersonalSafetyMessage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PersonalSafetyMessage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___PersonalSafetyMessage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____PersonalSafetyMessage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____PersonalSafetyMessage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___PersonalSafetyMessage_regional__item__regionId._const_tab = ____PersonalSafetyMessage_regional__item__regionId_tab
    ___PersonalSafetyMessage_regional__item__regionId._const_tab_at = None
    ___PersonalSafetyMessage_regional__item__regionId._const_tab_id = 'id'
    ___PersonalSafetyMessage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____PersonalSafetyMessage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____PersonalSafetyMessage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___PersonalSafetyMessage_regional__item__regExtValue._const_tab = ____PersonalSafetyMessage_regional__item__regExtValue_tab
    ___PersonalSafetyMessage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___PersonalSafetyMessage_regional__item__regExtValue._const_tab_id = 'Type'
    __PersonalSafetyMessage_regional__item_._cont = ASN1Dict([
        ('regionId', ___PersonalSafetyMessage_regional__item__regionId),
        ('regExtValue', ___PersonalSafetyMessage_regional__item__regExtValue),
        ])
    __PersonalSafetyMessage_regional__item_._ext = None
    _PersonalSafetyMessage_regional._cont = __PersonalSafetyMessage_regional__item_
    _PersonalSafetyMessage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    PersonalSafetyMessage._cont = ASN1Dict([
        ('basicType', _PersonalSafetyMessage_basicType),
        ('secMark', _PersonalSafetyMessage_secMark),
        ('msgCnt', _PersonalSafetyMessage_msgCnt),
        ('id', _PersonalSafetyMessage_id),
        ('position', _PersonalSafetyMessage_position),
        ('accuracy', _PersonalSafetyMessage_accuracy),
        ('speed', _PersonalSafetyMessage_speed),
        ('heading', _PersonalSafetyMessage_heading),
        ('accelSet', _PersonalSafetyMessage_accelSet),
        ('pathHistory', _PersonalSafetyMessage_pathHistory),
        ('pathPrediction', _PersonalSafetyMessage_pathPrediction),
        ('propulsion', _PersonalSafetyMessage_propulsion),
        ('useState', _PersonalSafetyMessage_useState),
        ('crossRequest', _PersonalSafetyMessage_crossRequest),
        ('crossState', _PersonalSafetyMessage_crossState),
        ('clusterSize', _PersonalSafetyMessage_clusterSize),
        ('clusterRadius', _PersonalSafetyMessage_clusterRadius),
        ('eventResponderType', _PersonalSafetyMessage_eventResponderType),
        ('activityType', _PersonalSafetyMessage_activityType),
        ('activitySubType', _PersonalSafetyMessage_activitySubType),
        ('assistType', _PersonalSafetyMessage_assistType),
        ('sizing', _PersonalSafetyMessage_sizing),
        ('attachment', _PersonalSafetyMessage_attachment),
        ('attachmentRadius', _PersonalSafetyMessage_attachmentRadius),
        ('animalType', _PersonalSafetyMessage_animalType),
        ('regional', _PersonalSafetyMessage_regional),
        ])
    PersonalSafetyMessage._ext = []
    
    #-----< PropelledInformation >-----#
    PropelledInformation = CHOICE(name='PropelledInformation', mode=MODE_TYPE)
    _PropelledInformation_human = ENUM(name='human', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'HumanPropelledType')))
    _PropelledInformation_animal = ENUM(name='animal', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'AnimalPropelledType')))
    _PropelledInformation_motor = ENUM(name='motor', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'MotorizedPropelledType')))
    PropelledInformation._cont = ASN1Dict([
        ('human', _PropelledInformation_human),
        ('animal', _PropelledInformation_animal),
        ('motor', _PropelledInformation_motor),
        ])
    PropelledInformation._ext = []
    
    #-----< AnimalPropelledType >-----#
    AnimalPropelledType = ENUM(name='AnimalPropelledType', mode=MODE_TYPE)
    AnimalPropelledType._cont = ASN1Dict([('unavailable', 0), ('otherTypes', 1), ('animalMounted', 2), ('animalDrawnCarriage', 3)])
    AnimalPropelledType._ext = []
    
    #-----< AnimalType >-----#
    AnimalType = ENUM(name='AnimalType', mode=MODE_TYPE)
    AnimalType._cont = ASN1Dict([('unavailable', 0), ('serviceUse', 1), ('pet', 2), ('farm', 3)])
    AnimalType._ext = []
    
    #-----< Attachment >-----#
    Attachment = ENUM(name='Attachment', mode=MODE_TYPE)
    Attachment._cont = ASN1Dict([('unavailable', 0), ('stroller', 1), ('bicycleTrailer', 2), ('cart', 3), ('wheelchair', 4), ('otherWalkAssistAttachments', 5), ('pet', 6)])
    Attachment._ext = []
    
    #-----< AttachmentRadius >-----#
    AttachmentRadius = INT(name='AttachmentRadius', mode=MODE_TYPE)
    AttachmentRadius._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=200)], ev=None, er=[])
    
    #-----< MotorizedPropelledType >-----#
    MotorizedPropelledType = ENUM(name='MotorizedPropelledType', mode=MODE_TYPE)
    MotorizedPropelledType._cont = ASN1Dict([('unavailable', 0), ('otherTypes', 1), ('wheelChair', 2), ('bicycle', 3), ('scooter', 4), ('selfBalancingDevice', 5)])
    MotorizedPropelledType._ext = []
    
    #-----< NumberOfParticipantsInCluster >-----#
    NumberOfParticipantsInCluster = ENUM(name='NumberOfParticipantsInCluster', mode=MODE_TYPE)
    NumberOfParticipantsInCluster._cont = ASN1Dict([('unavailable', 0), ('small', 1), ('medium', 2), ('large', 3)])
    NumberOfParticipantsInCluster._ext = []
    
    #-----< HumanPropelledType >-----#
    HumanPropelledType = ENUM(name='HumanPropelledType', mode=MODE_TYPE)
    HumanPropelledType._cont = ASN1Dict([('unavailable', 0), ('otherTypes', 1), ('onFoot', 2), ('skateboard', 3), ('pushOrKickScooter', 4), ('wheelchair', 5)])
    HumanPropelledType._ext = []
    
    #-----< PersonalAssistive >-----#
    PersonalAssistive = BIT_STR(name='PersonalAssistive', mode=MODE_TYPE)
    PersonalAssistive._cont = ASN1Dict([('unavailable', 0), ('otherType', 1), ('vision', 2), ('hearing', 3), ('movement', 4), ('cognition', 5)])
    PersonalAssistive._const_sz = ASN1Set(rv=[6], rr=[], ev=[], er=[])
    
    #-----< PersonalClusterRadius >-----#
    PersonalClusterRadius = INT(name='PersonalClusterRadius', mode=MODE_TYPE)
    PersonalClusterRadius._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=100)], ev=None, er=[])
    
    #-----< PersonalCrossingInProgress >-----#
    PersonalCrossingInProgress = BOOL(name='PersonalCrossingInProgress', mode=MODE_TYPE)
    
    #-----< PersonalCrossingRequest >-----#
    PersonalCrossingRequest = BOOL(name='PersonalCrossingRequest', mode=MODE_TYPE)
    
    #-----< PersonalDeviceUsageState >-----#
    PersonalDeviceUsageState = BIT_STR(name='PersonalDeviceUsageState', mode=MODE_TYPE)
    PersonalDeviceUsageState._cont = ASN1Dict([('unavailable', 0), ('other', 1), ('idle', 2), ('listeningToAudio', 3), ('typing', 4), ('calling', 5), ('playingGames', 6), ('reading', 7), ('viewing', 8)])
    PersonalDeviceUsageState._const_sz = ASN1Set(rv=[9], rr=[], ev=[], er=[])
    
    #-----< PersonalDeviceUserType >-----#
    PersonalDeviceUserType = ENUM(name='PersonalDeviceUserType', mode=MODE_TYPE)
    PersonalDeviceUserType._cont = ASN1Dict([('unavailable', 0), ('aPEDESTRIAN', 1), ('aPEDALCYCLIST', 2), ('aPUBLICSAFETYWORKER', 3), ('anANIMAL', 4)])
    PersonalDeviceUserType._ext = []
    
    #-----< PublicSafetyAndRoadWorkerActivity >-----#
    PublicSafetyAndRoadWorkerActivity = BIT_STR(name='PublicSafetyAndRoadWorkerActivity', mode=MODE_TYPE)
    PublicSafetyAndRoadWorkerActivity._cont = ASN1Dict([('unavailable', 0), ('workingOnRoad', 1), ('settingUpClosures', 2), ('respondingToEvents', 3), ('directingTraffic', 4), ('otherActivities', 5)])
    PublicSafetyAndRoadWorkerActivity._const_sz = ASN1Set(rv=[6], rr=[], ev=[], er=[])
    
    #-----< PublicSafetyDirectingTrafficSubType >-----#
    PublicSafetyDirectingTrafficSubType = BIT_STR(name='PublicSafetyDirectingTrafficSubType', mode=MODE_TYPE)
    PublicSafetyDirectingTrafficSubType._cont = ASN1Dict([('unavailable', 0), ('policeAndTrafficOfficers', 1), ('trafficControlPersons', 2), ('railroadCrossingGuards', 3), ('civilDefenseNationalGuardMilitaryPolice', 4), ('emergencyOrganizationPersonnel', 5), ('highwayServiceVehiclePersonnel', 6)])
    PublicSafetyDirectingTrafficSubType._const_sz = ASN1Set(rv=[7], rr=[], ev=[], er=[])
    
    #-----< PublicSafetyEventResponderWorkerType >-----#
    PublicSafetyEventResponderWorkerType = ENUM(name='PublicSafetyEventResponderWorkerType', mode=MODE_TYPE)
    PublicSafetyEventResponderWorkerType._cont = ASN1Dict([('unavailable', 0), ('towOperater', 1), ('fireAndEMSWorker', 2), ('aDOTWorker', 3), ('lawEnforcement', 4), ('hazmatResponder', 5), ('animalControlWorker', 6), ('otherPersonnel', 7)])
    PublicSafetyEventResponderWorkerType._ext = []
    
    #-----< UserSizeAndBehaviour >-----#
    UserSizeAndBehaviour = BIT_STR(name='UserSizeAndBehaviour', mode=MODE_TYPE)
    UserSizeAndBehaviour._cont = ASN1Dict([('unavailable', 0), ('smallStature', 1), ('largeStature', 2), ('erraticMoving', 3), ('slowMoving', 4)])
    UserSizeAndBehaviour._const_sz = ASN1Set(rv=[5], rr=[], ev=[], er=[])
    
    _all_ = [
        _PersonalSafetyMessage_basicType,
        _PersonalSafetyMessage_secMark,
        _PersonalSafetyMessage_msgCnt,
        _PersonalSafetyMessage_id,
        _PersonalSafetyMessage_position,
        _PersonalSafetyMessage_accuracy,
        _PersonalSafetyMessage_speed,
        _PersonalSafetyMessage_heading,
        _PersonalSafetyMessage_accelSet,
        _PersonalSafetyMessage_pathHistory,
        _PersonalSafetyMessage_pathPrediction,
        _PersonalSafetyMessage_propulsion,
        _PersonalSafetyMessage_useState,
        _PersonalSafetyMessage_crossRequest,
        _PersonalSafetyMessage_crossState,
        _PersonalSafetyMessage_clusterSize,
        _PersonalSafetyMessage_clusterRadius,
        _PersonalSafetyMessage_eventResponderType,
        _PersonalSafetyMessage_activityType,
        _PersonalSafetyMessage_activitySubType,
        _PersonalSafetyMessage_assistType,
        _PersonalSafetyMessage_sizing,
        _PersonalSafetyMessage_attachment,
        _PersonalSafetyMessage_attachmentRadius,
        _PersonalSafetyMessage_animalType,
        ____PersonalSafetyMessage_regional__item__regionId_tab,
        ___PersonalSafetyMessage_regional__item__regionId,
        ____PersonalSafetyMessage_regional__item__regExtValue_tab,
        ___PersonalSafetyMessage_regional__item__regExtValue,
        __PersonalSafetyMessage_regional__item_,
        _PersonalSafetyMessage_regional,
        PersonalSafetyMessage,
        _PropelledInformation_human,
        _PropelledInformation_animal,
        _PropelledInformation_motor,
        PropelledInformation,
        AnimalPropelledType,
        AnimalType,
        Attachment,
        AttachmentRadius,
        MotorizedPropelledType,
        NumberOfParticipantsInCluster,
        HumanPropelledType,
        PersonalAssistive,
        PersonalClusterRadius,
        PersonalCrossingInProgress,
        PersonalCrossingRequest,
        PersonalDeviceUsageState,
        PersonalDeviceUserType,
        PublicSafetyAndRoadWorkerActivity,
        PublicSafetyDirectingTrafficSubType,
        PublicSafetyEventResponderWorkerType,
        UserSizeAndBehaviour,
    ]

class ProbeDataManagement:

    _name_  = 'ProbeDataManagement'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 14, 1, 1]
    
    _obj_ = [
        'ProbeDataManagement',
        'Sample',
        'SnapshotDistance',
        'SnapshotTime',
        'VehicleStatusRequest',
        'VehicleStatusRequestList',
        'GrossDistance',
        'SecondOfTime',
        'TermDistance',
        'TermTime',
        'VehicleStatusDeviceTypeTag',
        ]
    _type_ = [
        'ProbeDataManagement',
        'Sample',
        'SnapshotDistance',
        'SnapshotTime',
        'VehicleStatusRequest',
        'VehicleStatusRequestList',
        'GrossDistance',
        'SecondOfTime',
        'TermDistance',
        'TermTime',
        'VehicleStatusDeviceTypeTag',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ProbeDataManagement >-----#
    ProbeDataManagement = SEQ(name='ProbeDataManagement', mode=MODE_TYPE)
    _ProbeDataManagement_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _ProbeDataManagement_sample = SEQ(name='sample', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'Sample')))
    _ProbeDataManagement_directions = BIT_STR(name='directions', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingSlice')))
    _ProbeDataManagement_term = CHOICE(name='term', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ProbeDataManagement_term_termtime = INT(name='termtime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'TermTime')))
    __ProbeDataManagement_term_termDistance = INT(name='termDistance', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'TermDistance')))
    _ProbeDataManagement_term._cont = ASN1Dict([
        ('termtime', __ProbeDataManagement_term_termtime),
        ('termDistance', __ProbeDataManagement_term_termDistance),
        ])
    _ProbeDataManagement_term._ext = None
    _ProbeDataManagement_snapshot = CHOICE(name='snapshot', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ProbeDataManagement_snapshot_snapshotTime = SEQ(name='snapshotTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'SnapshotTime')))
    __ProbeDataManagement_snapshot_snapshotDistance = SEQ(name='snapshotDistance', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'SnapshotDistance')))
    _ProbeDataManagement_snapshot._cont = ASN1Dict([
        ('snapshotTime', __ProbeDataManagement_snapshot_snapshotTime),
        ('snapshotDistance', __ProbeDataManagement_snapshot_snapshotDistance),
        ])
    _ProbeDataManagement_snapshot._ext = None
    _ProbeDataManagement_txInterval = INT(name='txInterval', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'SecondOfTime')))
    _ProbeDataManagement_dataElements = SEQ_OF(name='dataElements', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'VehicleStatusRequestList')), opt=True)
    _ProbeDataManagement_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ProbeDataManagement_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___ProbeDataManagement_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____ProbeDataManagement_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____ProbeDataManagement_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ProbeDataManagement_regional__item__regionId._const_tab = ____ProbeDataManagement_regional__item__regionId_tab
    ___ProbeDataManagement_regional__item__regionId._const_tab_at = None
    ___ProbeDataManagement_regional__item__regionId._const_tab_id = 'id'
    ___ProbeDataManagement_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____ProbeDataManagement_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____ProbeDataManagement_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ProbeDataManagement_regional__item__regExtValue._const_tab = ____ProbeDataManagement_regional__item__regExtValue_tab
    ___ProbeDataManagement_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___ProbeDataManagement_regional__item__regExtValue._const_tab_id = 'Type'
    __ProbeDataManagement_regional__item_._cont = ASN1Dict([
        ('regionId', ___ProbeDataManagement_regional__item__regionId),
        ('regExtValue', ___ProbeDataManagement_regional__item__regExtValue),
        ])
    __ProbeDataManagement_regional__item_._ext = None
    _ProbeDataManagement_regional._cont = __ProbeDataManagement_regional__item_
    _ProbeDataManagement_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ProbeDataManagement._cont = ASN1Dict([
        ('timeStamp', _ProbeDataManagement_timeStamp),
        ('sample', _ProbeDataManagement_sample),
        ('directions', _ProbeDataManagement_directions),
        ('term', _ProbeDataManagement_term),
        ('snapshot', _ProbeDataManagement_snapshot),
        ('txInterval', _ProbeDataManagement_txInterval),
        ('dataElements', _ProbeDataManagement_dataElements),
        ('regional', _ProbeDataManagement_regional),
        ])
    ProbeDataManagement._ext = []
    
    #-----< Sample >-----#
    Sample = SEQ(name='Sample', mode=MODE_TYPE)
    _Sample_sampleStart = INT(name='sampleStart', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Sample_sampleStart._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _Sample_sampleEnd = INT(name='sampleEnd', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Sample_sampleEnd._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    Sample._cont = ASN1Dict([
        ('sampleStart', _Sample_sampleStart),
        ('sampleEnd', _Sample_sampleEnd),
        ])
    Sample._ext = None
    
    #-----< SnapshotDistance >-----#
    SnapshotDistance = SEQ(name='SnapshotDistance', mode=MODE_TYPE)
    _SnapshotDistance_distance1 = INT(name='distance1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'GrossDistance')))
    _SnapshotDistance_speed1 = INT(name='speed1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GrossSpeed')))
    _SnapshotDistance_distance2 = INT(name='distance2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'GrossDistance')))
    _SnapshotDistance_speed2 = INT(name='speed2', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GrossSpeed')))
    SnapshotDistance._cont = ASN1Dict([
        ('distance1', _SnapshotDistance_distance1),
        ('speed1', _SnapshotDistance_speed1),
        ('distance2', _SnapshotDistance_distance2),
        ('speed2', _SnapshotDistance_speed2),
        ])
    SnapshotDistance._ext = None
    
    #-----< SnapshotTime >-----#
    SnapshotTime = SEQ(name='SnapshotTime', mode=MODE_TYPE)
    _SnapshotTime_speed1 = INT(name='speed1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GrossSpeed')))
    _SnapshotTime_time1 = INT(name='time1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'SecondOfTime')))
    _SnapshotTime_speed2 = INT(name='speed2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GrossSpeed')))
    _SnapshotTime_time2 = INT(name='time2', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'SecondOfTime')))
    SnapshotTime._cont = ASN1Dict([
        ('speed1', _SnapshotTime_speed1),
        ('time1', _SnapshotTime_time1),
        ('speed2', _SnapshotTime_speed2),
        ('time2', _SnapshotTime_time2),
        ])
    SnapshotTime._ext = None
    
    #-----< VehicleStatusRequest >-----#
    VehicleStatusRequest = SEQ(name='VehicleStatusRequest', mode=MODE_TYPE)
    _VehicleStatusRequest_dataType = ENUM(name='dataType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataManagement', 'VehicleStatusDeviceTypeTag')))
    _VehicleStatusRequest_subType = INT(name='subType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleStatusRequest_subType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    _VehicleStatusRequest_sendOnLessThenValue = INT(name='sendOnLessThenValue', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleStatusRequest_sendOnLessThenValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    _VehicleStatusRequest_sendOnMoreThenValue = INT(name='sendOnMoreThenValue', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleStatusRequest_sendOnMoreThenValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    _VehicleStatusRequest_sendAll = BOOL(name='sendAll', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    VehicleStatusRequest._cont = ASN1Dict([
        ('dataType', _VehicleStatusRequest_dataType),
        ('subType', _VehicleStatusRequest_subType),
        ('sendOnLessThenValue', _VehicleStatusRequest_sendOnLessThenValue),
        ('sendOnMoreThenValue', _VehicleStatusRequest_sendOnMoreThenValue),
        ('sendAll', _VehicleStatusRequest_sendAll),
        ])
    VehicleStatusRequest._ext = []
    
    #-----< VehicleStatusRequestList >-----#
    VehicleStatusRequestList = SEQ_OF(name='VehicleStatusRequestList', mode=MODE_TYPE)
    _VehicleStatusRequestList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataManagement', 'VehicleStatusRequest')))
    VehicleStatusRequestList._cont = _VehicleStatusRequestList__item_
    VehicleStatusRequestList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< GrossDistance >-----#
    GrossDistance = INT(name='GrossDistance', mode=MODE_TYPE)
    GrossDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    
    #-----< SecondOfTime >-----#
    SecondOfTime = INT(name='SecondOfTime', mode=MODE_TYPE)
    SecondOfTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=61)], ev=None, er=[])
    
    #-----< TermDistance >-----#
    TermDistance = INT(name='TermDistance', mode=MODE_TYPE)
    TermDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30000)], ev=None, er=[])
    
    #-----< TermTime >-----#
    TermTime = INT(name='TermTime', mode=MODE_TYPE)
    TermTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1800)], ev=None, er=[])
    
    #-----< VehicleStatusDeviceTypeTag >-----#
    VehicleStatusDeviceTypeTag = ENUM(name='VehicleStatusDeviceTypeTag', mode=MODE_TYPE)
    VehicleStatusDeviceTypeTag._cont = ASN1Dict([('unknown', 0), ('lights', 1), ('wipers', 2), ('brakes', 3), ('stab', 4), ('trac', 5), ('abs', 6), ('sunS', 7), ('rainS', 8), ('airTemp', 9), ('steering', 10), ('vertAccelThres', 11), ('vertAccel', 12), ('hozAccelLong', 13), ('hozAccelLat', 14), ('hozAccelCon', 15), ('accel4way', 16), ('confidenceSet', 17), ('obDist', 18), ('obDirect', 19), ('yaw', 20), ('yawRateCon', 21), ('dateTime', 22), ('fullPos', 23), ('position2D', 24), ('position3D', 25), ('vehicle', 26), ('speedHeadC', 27), ('speedC', 28)])
    VehicleStatusDeviceTypeTag._ext = []
    
    _all_ = [
        _ProbeDataManagement_timeStamp,
        _ProbeDataManagement_sample,
        _ProbeDataManagement_directions,
        __ProbeDataManagement_term_termtime,
        __ProbeDataManagement_term_termDistance,
        _ProbeDataManagement_term,
        __ProbeDataManagement_snapshot_snapshotTime,
        __ProbeDataManagement_snapshot_snapshotDistance,
        _ProbeDataManagement_snapshot,
        _ProbeDataManagement_txInterval,
        _ProbeDataManagement_dataElements,
        ____ProbeDataManagement_regional__item__regionId_tab,
        ___ProbeDataManagement_regional__item__regionId,
        ____ProbeDataManagement_regional__item__regExtValue_tab,
        ___ProbeDataManagement_regional__item__regExtValue,
        __ProbeDataManagement_regional__item_,
        _ProbeDataManagement_regional,
        ProbeDataManagement,
        _Sample_sampleStart,
        _Sample_sampleEnd,
        Sample,
        _SnapshotDistance_distance1,
        _SnapshotDistance_speed1,
        _SnapshotDistance_distance2,
        _SnapshotDistance_speed2,
        SnapshotDistance,
        _SnapshotTime_speed1,
        _SnapshotTime_time1,
        _SnapshotTime_speed2,
        _SnapshotTime_time2,
        SnapshotTime,
        _VehicleStatusRequest_dataType,
        _VehicleStatusRequest_subType,
        _VehicleStatusRequest_sendOnLessThenValue,
        _VehicleStatusRequest_sendOnMoreThenValue,
        _VehicleStatusRequest_sendAll,
        VehicleStatusRequest,
        _VehicleStatusRequestList__item_,
        VehicleStatusRequestList,
        GrossDistance,
        SecondOfTime,
        TermDistance,
        TermTime,
        VehicleStatusDeviceTypeTag,
    ]

class ProbeVehicleData:

    _name_  = 'ProbeVehicleData'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 15, 1, 1]
    
    _obj_ = [
        'ProbeVehicleData',
        'AccelSteerYawRateConfidence',
        'ConfidenceSet',
        'J1939data',
        'TireDataList',
        'TireData',
        'AxleWeightList',
        'AxleWeightSet',
        'Snapshot',
        'VehicleIdent',
        'VehicleStatus',
        'AccelerationConfidence',
        'BrakeAppliedPressure',
        'DrivingWheelAngle',
        'AxleLocation',
        'AxleWeight',
        'CargoWeight',
        'DriveAxleLiftAirPressure',
        'DriveAxleLocation',
        'DriveAxleLubePressure',
        'DriveAxleTemperature',
        'SteeringAxleLubePressure',
        'SteeringAxleTemperature',
        'TireLeakageRate',
        'TireLocation',
        'TirePressureThresholdDetection',
        'TirePressure',
        'TireTemp',
        'WheelEndElectFault',
        'WheelSensorStatus',
        'ProbeSegmentNumber',
        'RainSensor',
        'SteeringWheelAngleConfidence',
        'SteeringWheelAngleRateOfChange',
        'SunSensor',
        'ThrottlePosition',
        'VINstring',
        'YawRateConfidence',
        ]
    _type_ = [
        'ProbeVehicleData',
        'AccelSteerYawRateConfidence',
        'ConfidenceSet',
        'J1939data',
        'TireDataList',
        'TireData',
        'AxleWeightList',
        'AxleWeightSet',
        'Snapshot',
        'VehicleIdent',
        'VehicleStatus',
        'AccelerationConfidence',
        'BrakeAppliedPressure',
        'DrivingWheelAngle',
        'AxleLocation',
        'AxleWeight',
        'CargoWeight',
        'DriveAxleLiftAirPressure',
        'DriveAxleLocation',
        'DriveAxleLubePressure',
        'DriveAxleTemperature',
        'SteeringAxleLubePressure',
        'SteeringAxleTemperature',
        'TireLeakageRate',
        'TireLocation',
        'TirePressureThresholdDetection',
        'TirePressure',
        'TireTemp',
        'WheelEndElectFault',
        'WheelSensorStatus',
        'ProbeSegmentNumber',
        'RainSensor',
        'SteeringWheelAngleConfidence',
        'SteeringWheelAngleRateOfChange',
        'SunSensor',
        'ThrottlePosition',
        'VINstring',
        'YawRateConfidence',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ProbeVehicleData >-----#
    ProbeVehicleData = SEQ(name='ProbeVehicleData', mode=MODE_TYPE)
    _ProbeVehicleData_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _ProbeVehicleData_segNum = INT(name='segNum', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'ProbeSegmentNumber')), opt=True)
    _ProbeVehicleData_probeID = SEQ(name='probeID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'VehicleIdent')), opt=True)
    _ProbeVehicleData_startVector = SEQ(name='startVector', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullPositionVector')))
    _ProbeVehicleData_vehicleType = SEQ(name='vehicleType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleClassification')))
    _ProbeVehicleData_snapshots = SEQ_OF(name='snapshots', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ProbeVehicleData_snapshots__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeVehicleData', 'Snapshot')))
    _ProbeVehicleData_snapshots._cont = __ProbeVehicleData_snapshots__item_
    _ProbeVehicleData_snapshots._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _ProbeVehicleData_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ProbeVehicleData_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___ProbeVehicleData_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____ProbeVehicleData_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____ProbeVehicleData_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ProbeVehicleData_regional__item__regionId._const_tab = ____ProbeVehicleData_regional__item__regionId_tab
    ___ProbeVehicleData_regional__item__regionId._const_tab_at = None
    ___ProbeVehicleData_regional__item__regionId._const_tab_id = 'id'
    ___ProbeVehicleData_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____ProbeVehicleData_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____ProbeVehicleData_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ProbeVehicleData_regional__item__regExtValue._const_tab = ____ProbeVehicleData_regional__item__regExtValue_tab
    ___ProbeVehicleData_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___ProbeVehicleData_regional__item__regExtValue._const_tab_id = 'Type'
    __ProbeVehicleData_regional__item_._cont = ASN1Dict([
        ('regionId', ___ProbeVehicleData_regional__item__regionId),
        ('regExtValue', ___ProbeVehicleData_regional__item__regExtValue),
        ])
    __ProbeVehicleData_regional__item_._ext = None
    _ProbeVehicleData_regional._cont = __ProbeVehicleData_regional__item_
    _ProbeVehicleData_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ProbeVehicleData._cont = ASN1Dict([
        ('timeStamp', _ProbeVehicleData_timeStamp),
        ('segNum', _ProbeVehicleData_segNum),
        ('probeID', _ProbeVehicleData_probeID),
        ('startVector', _ProbeVehicleData_startVector),
        ('vehicleType', _ProbeVehicleData_vehicleType),
        ('snapshots', _ProbeVehicleData_snapshots),
        ('regional', _ProbeVehicleData_regional),
        ])
    ProbeVehicleData._ext = []
    
    #-----< AccelSteerYawRateConfidence >-----#
    AccelSteerYawRateConfidence = SEQ(name='AccelSteerYawRateConfidence', mode=MODE_TYPE)
    _AccelSteerYawRateConfidence_yawRate = ENUM(name='yawRate', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'YawRateConfidence')))
    _AccelSteerYawRateConfidence_acceleration = ENUM(name='acceleration', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AccelerationConfidence')))
    _AccelSteerYawRateConfidence_steeringWheelAngle = ENUM(name='steeringWheelAngle', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'SteeringWheelAngleConfidence')))
    AccelSteerYawRateConfidence._cont = ASN1Dict([
        ('yawRate', _AccelSteerYawRateConfidence_yawRate),
        ('acceleration', _AccelSteerYawRateConfidence_acceleration),
        ('steeringWheelAngle', _AccelSteerYawRateConfidence_steeringWheelAngle),
        ])
    AccelSteerYawRateConfidence._ext = None
    
    #-----< ConfidenceSet >-----#
    ConfidenceSet = SEQ(name='ConfidenceSet', mode=MODE_TYPE)
    _ConfidenceSet_accelConfidence = SEQ(name='accelConfidence', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AccelSteerYawRateConfidence')), opt=True)
    _ConfidenceSet_speedConfidence = SEQ(name='speedConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedandHeadingandThrottleConfidence')), opt=True)
    _ConfidenceSet_timeConfidence = ENUM(name='timeConfidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TimeConfidence')), opt=True)
    _ConfidenceSet_posConfidence = SEQ(name='posConfidence', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionConfidenceSet')), opt=True)
    _ConfidenceSet_steerConfidence = ENUM(name='steerConfidence', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'SteeringWheelAngleConfidence')), opt=True)
    _ConfidenceSet_headingConfidence = ENUM(name='headingConfidence', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingConfidence')), opt=True)
    _ConfidenceSet_throttleConfidence = ENUM(name='throttleConfidence', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ThrottleConfidence')), opt=True)
    ConfidenceSet._cont = ASN1Dict([
        ('accelConfidence', _ConfidenceSet_accelConfidence),
        ('speedConfidence', _ConfidenceSet_speedConfidence),
        ('timeConfidence', _ConfidenceSet_timeConfidence),
        ('posConfidence', _ConfidenceSet_posConfidence),
        ('steerConfidence', _ConfidenceSet_steerConfidence),
        ('headingConfidence', _ConfidenceSet_headingConfidence),
        ('throttleConfidence', _ConfidenceSet_throttleConfidence),
        ])
    ConfidenceSet._ext = []
    
    #-----< J1939data >-----#
    J1939data = SEQ(name='J1939data', mode=MODE_TYPE)
    _J1939data_tires = SEQ_OF(name='tires', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'TireDataList')), opt=True)
    _J1939data_axles = SEQ_OF(name='axles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AxleWeightList')), opt=True)
    _J1939data_trailerWeight = INT(name='trailerWeight', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TrailerWeight')), opt=True)
    _J1939data_cargoWeight = INT(name='cargoWeight', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'CargoWeight')), opt=True)
    _J1939data_steeringAxleTemperature = INT(name='steeringAxleTemperature', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'SteeringAxleTemperature')), opt=True)
    _J1939data_driveAxleLocation = INT(name='driveAxleLocation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'DriveAxleLocation')), opt=True)
    _J1939data_driveAxleLiftAirPressure = INT(name='driveAxleLiftAirPressure', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'DriveAxleLiftAirPressure')), opt=True)
    _J1939data_driveAxleTemperature = INT(name='driveAxleTemperature', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'DriveAxleTemperature')), opt=True)
    _J1939data_driveAxleLubePressure = INT(name='driveAxleLubePressure', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'DriveAxleLubePressure')), opt=True)
    _J1939data_steeringAxleLubePressure = INT(name='steeringAxleLubePressure', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'SteeringAxleLubePressure')), opt=True)
    J1939data._cont = ASN1Dict([
        ('tires', _J1939data_tires),
        ('axles', _J1939data_axles),
        ('trailerWeight', _J1939data_trailerWeight),
        ('cargoWeight', _J1939data_cargoWeight),
        ('steeringAxleTemperature', _J1939data_steeringAxleTemperature),
        ('driveAxleLocation', _J1939data_driveAxleLocation),
        ('driveAxleLiftAirPressure', _J1939data_driveAxleLiftAirPressure),
        ('driveAxleTemperature', _J1939data_driveAxleTemperature),
        ('driveAxleLubePressure', _J1939data_driveAxleLubePressure),
        ('steeringAxleLubePressure', _J1939data_steeringAxleLubePressure),
        ])
    J1939data._ext = []
    
    #-----< TireDataList >-----#
    TireDataList = SEQ_OF(name='TireDataList', mode=MODE_TYPE)
    _TireDataList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeVehicleData', 'TireData')))
    TireDataList._cont = _TireDataList__item_
    TireDataList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< TireData >-----#
    TireData = SEQ(name='TireData', mode=MODE_TYPE)
    _TireData_location = INT(name='location', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'TireLocation')), opt=True)
    _TireData_pressure = INT(name='pressure', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'TirePressure')), opt=True)
    _TireData_temp = INT(name='temp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'TireTemp')), opt=True)
    _TireData_wheelSensorStatus = ENUM(name='wheelSensorStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'WheelSensorStatus')), opt=True)
    _TireData_wheelEndElectFault = ENUM(name='wheelEndElectFault', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'WheelEndElectFault')), opt=True)
    _TireData_leakageRate = INT(name='leakageRate', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'TireLeakageRate')), opt=True)
    _TireData_detection = ENUM(name='detection', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'TirePressureThresholdDetection')), opt=True)
    TireData._cont = ASN1Dict([
        ('location', _TireData_location),
        ('pressure', _TireData_pressure),
        ('temp', _TireData_temp),
        ('wheelSensorStatus', _TireData_wheelSensorStatus),
        ('wheelEndElectFault', _TireData_wheelEndElectFault),
        ('leakageRate', _TireData_leakageRate),
        ('detection', _TireData_detection),
        ])
    TireData._ext = []
    
    #-----< AxleWeightList >-----#
    AxleWeightList = SEQ_OF(name='AxleWeightList', mode=MODE_TYPE)
    _AxleWeightList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeVehicleData', 'AxleWeightSet')))
    AxleWeightList._cont = _AxleWeightList__item_
    AxleWeightList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< AxleWeightSet >-----#
    AxleWeightSet = SEQ(name='AxleWeightSet', mode=MODE_TYPE)
    _AxleWeightSet_location = INT(name='location', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AxleLocation')), opt=True)
    _AxleWeightSet_weight = INT(name='weight', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AxleWeight')), opt=True)
    AxleWeightSet._cont = ASN1Dict([
        ('location', _AxleWeightSet_location),
        ('weight', _AxleWeightSet_weight),
        ])
    AxleWeightSet._ext = []
    
    #-----< Snapshot >-----#
    Snapshot = SEQ(name='Snapshot', mode=MODE_TYPE)
    _Snapshot_thePosition = SEQ(name='thePosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullPositionVector')))
    _Snapshot_safetyExt = SEQ(name='safetyExt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleSafetyExtensions')), opt=True)
    _Snapshot_dataSet = SEQ(name='dataSet', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'VehicleStatus')), opt=True)
    Snapshot._cont = ASN1Dict([
        ('thePosition', _Snapshot_thePosition),
        ('safetyExt', _Snapshot_safetyExt),
        ('dataSet', _Snapshot_dataSet),
        ])
    Snapshot._ext = []
    
    #-----< VehicleIdent >-----#
    VehicleIdent = SEQ(name='VehicleIdent', mode=MODE_TYPE)
    _VehicleIdent_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _VehicleIdent_vin = OCT_STR(name='vin', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'VINstring')), opt=True)
    _VehicleIdent_ownerCode = STR_IA5(name='ownerCode', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleIdent_ownerCode._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _VehicleIdent_id = CHOICE(name='id', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'VehicleID')), opt=True)
    _VehicleIdent_vehicleType = ENUM(name='vehicleType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleType')), opt=True)
    _VehicleIdent_vehicleClass = CHOICE(name='vehicleClass', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    __VehicleIdent_vehicleClass_vGroup = ENUM(name='vGroup', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'VehicleGroupAffected')))
    __VehicleIdent_vehicleClass_rGroup = ENUM(name='rGroup', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ResponderGroupAffected')))
    __VehicleIdent_vehicleClass_rEquip = ENUM(name='rEquip', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'IncidentResponseEquipment')))
    _VehicleIdent_vehicleClass._cont = ASN1Dict([
        ('vGroup', __VehicleIdent_vehicleClass_vGroup),
        ('rGroup', __VehicleIdent_vehicleClass_rGroup),
        ('rEquip', __VehicleIdent_vehicleClass_rEquip),
        ])
    _VehicleIdent_vehicleClass._ext = None
    VehicleIdent._cont = ASN1Dict([
        ('name', _VehicleIdent_name),
        ('vin', _VehicleIdent_vin),
        ('ownerCode', _VehicleIdent_ownerCode),
        ('id', _VehicleIdent_id),
        ('vehicleType', _VehicleIdent_vehicleType),
        ('vehicleClass', _VehicleIdent_vehicleClass),
        ])
    VehicleIdent._ext = []
    
    #-----< VehicleStatus >-----#
    VehicleStatus = SEQ(name='VehicleStatus', mode=MODE_TYPE)
    _VehicleStatus_lights = BIT_STR(name='lights', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ExteriorLights')), opt=True)
    _VehicleStatus_lightBar = ENUM(name='lightBar', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LightbarInUse')), opt=True)
    _VehicleStatus_wipers = SEQ(name='wipers', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'WiperSet')), opt=True)
    _VehicleStatus_brakeStatus = SEQ(name='brakeStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BrakeSystemStatus')), opt=True)
    _VehicleStatus_brakePressure = ENUM(name='brakePressure', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'BrakeAppliedPressure')), opt=True)
    _VehicleStatus_roadFriction = INT(name='roadFriction', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'CoefficientOfFriction')), opt=True)
    _VehicleStatus_sunData = INT(name='sunData', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'SunSensor')), opt=True)
    _VehicleStatus_rainData = ENUM(name='rainData', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'RainSensor')), opt=True)
    _VehicleStatus_airTemp = INT(name='airTemp', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AmbientAirTemperature')), opt=True)
    _VehicleStatus_airPres = INT(name='airPres', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AmbientAirPressure')), opt=True)
    _VehicleStatus_steering = SEQ(name='steering', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VehicleStatus_steering_angle = INT(name='angle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SteeringWheelAngle')))
    __VehicleStatus_steering_confidence = ENUM(name='confidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'SteeringWheelAngleConfidence')), opt=True)
    __VehicleStatus_steering_rate = INT(name='rate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'SteeringWheelAngleRateOfChange')), opt=True)
    __VehicleStatus_steering_wheels = INT(name='wheels', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'DrivingWheelAngle')), opt=True)
    _VehicleStatus_steering._cont = ASN1Dict([
        ('angle', __VehicleStatus_steering_angle),
        ('confidence', __VehicleStatus_steering_confidence),
        ('rate', __VehicleStatus_steering_rate),
        ('wheels', __VehicleStatus_steering_wheels),
        ])
    _VehicleStatus_steering._ext = None
    _VehicleStatus_accelSets = SEQ(name='accelSets', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VehicleStatus_accelSets_accel4way = SEQ(name='accel4way', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AccelerationSet4Way')), opt=True)
    __VehicleStatus_accelSets_vertAccelThres = BIT_STR(name='vertAccelThres', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VerticalAccelerationThreshold')), opt=True)
    __VehicleStatus_accelSets_yawRateCon = ENUM(name='yawRateCon', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'YawRateConfidence')), opt=True)
    __VehicleStatus_accelSets_hozAccelCon = ENUM(name='hozAccelCon', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AccelerationConfidence')), opt=True)
    __VehicleStatus_accelSets_confidenceSet = SEQ(name='confidenceSet', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'ConfidenceSet')), opt=True)
    _VehicleStatus_accelSets._cont = ASN1Dict([
        ('accel4way', __VehicleStatus_accelSets_accel4way),
        ('vertAccelThres', __VehicleStatus_accelSets_vertAccelThres),
        ('yawRateCon', __VehicleStatus_accelSets_yawRateCon),
        ('hozAccelCon', __VehicleStatus_accelSets_hozAccelCon),
        ('confidenceSet', __VehicleStatus_accelSets_confidenceSet),
        ])
    _VehicleStatus_accelSets._ext = None
    _VehicleStatus_object = SEQ(name='object', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VehicleStatus_object_obDist = INT(name='obDist', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ObstacleDistance')))
    __VehicleStatus_object_obDirect = INT(name='obDirect', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Angle')))
    __VehicleStatus_object_dateTime = SEQ(name='dateTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _VehicleStatus_object._cont = ASN1Dict([
        ('obDist', __VehicleStatus_object_obDist),
        ('obDirect', __VehicleStatus_object_obDirect),
        ('dateTime', __VehicleStatus_object_dateTime),
        ])
    _VehicleStatus_object._ext = None
    _VehicleStatus_fullPos = SEQ(name='fullPos', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullPositionVector')), opt=True)
    _VehicleStatus_throttlePos = INT(name='throttlePos', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'ThrottlePosition')), opt=True)
    _VehicleStatus_speedHeadC = SEQ(name='speedHeadC', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedandHeadingandThrottleConfidence')), opt=True)
    _VehicleStatus_speedC = ENUM(name='speedC', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedConfidence')), opt=True)
    _VehicleStatus_vehicleData = SEQ(name='vehicleData', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VehicleStatus_vehicleData_height = INT(name='height', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleHeight')))
    __VehicleStatus_vehicleData_bumpers = SEQ(name='bumpers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BumperHeights')))
    __VehicleStatus_vehicleData_mass = INT(name='mass', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleMass')))
    __VehicleStatus_vehicleData_trailerWeight = INT(name='trailerWeight', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TrailerWeight')))
    __VehicleStatus_vehicleData_type = ENUM(name='type', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleType')))
    _VehicleStatus_vehicleData._cont = ASN1Dict([
        ('height', __VehicleStatus_vehicleData_height),
        ('bumpers', __VehicleStatus_vehicleData_bumpers),
        ('mass', __VehicleStatus_vehicleData_mass),
        ('trailerWeight', __VehicleStatus_vehicleData_trailerWeight),
        ('type', __VehicleStatus_vehicleData_type),
        ])
    _VehicleStatus_vehicleData._ext = None
    _VehicleStatus_vehicleIdent = SEQ(name='vehicleIdent', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'VehicleIdent')), opt=True)
    _VehicleStatus_j1939data = SEQ(name='j1939data', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'J1939data')), opt=True)
    _VehicleStatus_weatherReport = SEQ(name='weatherReport', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VehicleStatus_weatherReport_isRaining = ENUM(name='isRaining', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssPrecipYesNo')))
    __VehicleStatus_weatherReport_rainRate = INT(name='rainRate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssPrecipRate')), opt=True)
    __VehicleStatus_weatherReport_precipSituation = ENUM(name='precipSituation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssPrecipSituation')), opt=True)
    __VehicleStatus_weatherReport_solarRadiation = INT(name='solarRadiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssSolarRadiation')), opt=True)
    __VehicleStatus_weatherReport_friction = INT(name='friction', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('NTCIP', 'EssMobileFriction')), opt=True)
    _VehicleStatus_weatherReport._cont = ASN1Dict([
        ('isRaining', __VehicleStatus_weatherReport_isRaining),
        ('rainRate', __VehicleStatus_weatherReport_rainRate),
        ('precipSituation', __VehicleStatus_weatherReport_precipSituation),
        ('solarRadiation', __VehicleStatus_weatherReport_solarRadiation),
        ('friction', __VehicleStatus_weatherReport_friction),
        ])
    _VehicleStatus_weatherReport._ext = None
    _VehicleStatus_gnssStatus = BIT_STR(name='gnssStatus', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'GNSSstatus')), opt=True)
    VehicleStatus._cont = ASN1Dict([
        ('lights', _VehicleStatus_lights),
        ('lightBar', _VehicleStatus_lightBar),
        ('wipers', _VehicleStatus_wipers),
        ('brakeStatus', _VehicleStatus_brakeStatus),
        ('brakePressure', _VehicleStatus_brakePressure),
        ('roadFriction', _VehicleStatus_roadFriction),
        ('sunData', _VehicleStatus_sunData),
        ('rainData', _VehicleStatus_rainData),
        ('airTemp', _VehicleStatus_airTemp),
        ('airPres', _VehicleStatus_airPres),
        ('steering', _VehicleStatus_steering),
        ('accelSets', _VehicleStatus_accelSets),
        ('object', _VehicleStatus_object),
        ('fullPos', _VehicleStatus_fullPos),
        ('throttlePos', _VehicleStatus_throttlePos),
        ('speedHeadC', _VehicleStatus_speedHeadC),
        ('speedC', _VehicleStatus_speedC),
        ('vehicleData', _VehicleStatus_vehicleData),
        ('vehicleIdent', _VehicleStatus_vehicleIdent),
        ('j1939data', _VehicleStatus_j1939data),
        ('weatherReport', _VehicleStatus_weatherReport),
        ('gnssStatus', _VehicleStatus_gnssStatus),
        ])
    VehicleStatus._ext = []
    
    #-----< AccelerationConfidence >-----#
    AccelerationConfidence = ENUM(name='AccelerationConfidence', mode=MODE_TYPE)
    AccelerationConfidence._cont = ASN1Dict([('unavailable', 0), ('accl-100-00', 1), ('accl-010-00', 2), ('accl-005-00', 3), ('accl-001-00', 4), ('accl-000-10', 5), ('accl-000-05', 6), ('accl-000-01', 7)])
    AccelerationConfidence._ext = None
    
    #-----< BrakeAppliedPressure >-----#
    BrakeAppliedPressure = ENUM(name='BrakeAppliedPressure', mode=MODE_TYPE)
    BrakeAppliedPressure._cont = ASN1Dict([('unavailable', 0), ('minPressure', 1), ('bkLvl-2', 2), ('bkLvl-3', 3), ('bkLvl-4', 4), ('bkLvl-5', 5), ('bkLvl-6', 6), ('bkLvl-7', 7), ('bkLvl-8', 8), ('bkLvl-9', 9), ('bkLvl-10', 10), ('bkLvl-11', 11), ('bkLvl-12', 12), ('bkLvl-13', 13), ('bkLvl-14', 14), ('maxPressure', 15)])
    BrakeAppliedPressure._ext = None
    
    #-----< DrivingWheelAngle >-----#
    DrivingWheelAngle = INT(name='DrivingWheelAngle', mode=MODE_TYPE)
    DrivingWheelAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-128, ub=127)], ev=None, er=[])
    
    #-----< AxleLocation >-----#
    AxleLocation = INT(name='AxleLocation', mode=MODE_TYPE)
    AxleLocation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AxleWeight >-----#
    AxleWeight = INT(name='AxleWeight', mode=MODE_TYPE)
    AxleWeight._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64255)], ev=None, er=[])
    
    #-----< CargoWeight >-----#
    CargoWeight = INT(name='CargoWeight', mode=MODE_TYPE)
    CargoWeight._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64255)], ev=None, er=[])
    
    #-----< DriveAxleLiftAirPressure >-----#
    DriveAxleLiftAirPressure = INT(name='DriveAxleLiftAirPressure', mode=MODE_TYPE)
    DriveAxleLiftAirPressure._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1000)], ev=None, er=[])
    
    #-----< DriveAxleLocation >-----#
    DriveAxleLocation = INT(name='DriveAxleLocation', mode=MODE_TYPE)
    DriveAxleLocation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DriveAxleLubePressure >-----#
    DriveAxleLubePressure = INT(name='DriveAxleLubePressure', mode=MODE_TYPE)
    DriveAxleLubePressure._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=250)], ev=None, er=[])
    
    #-----< DriveAxleTemperature >-----#
    DriveAxleTemperature = INT(name='DriveAxleTemperature', mode=MODE_TYPE)
    DriveAxleTemperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-40, ub=210)], ev=None, er=[])
    
    #-----< SteeringAxleLubePressure >-----#
    SteeringAxleLubePressure = INT(name='SteeringAxleLubePressure', mode=MODE_TYPE)
    SteeringAxleLubePressure._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=250)], ev=None, er=[])
    
    #-----< SteeringAxleTemperature >-----#
    SteeringAxleTemperature = INT(name='SteeringAxleTemperature', mode=MODE_TYPE)
    SteeringAxleTemperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-40, ub=210)], ev=None, er=[])
    
    #-----< TireLeakageRate >-----#
    TireLeakageRate = INT(name='TireLeakageRate', mode=MODE_TYPE)
    TireLeakageRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64255)], ev=None, er=[])
    
    #-----< TireLocation >-----#
    TireLocation = INT(name='TireLocation', mode=MODE_TYPE)
    TireLocation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< TirePressureThresholdDetection >-----#
    TirePressureThresholdDetection = ENUM(name='TirePressureThresholdDetection', mode=MODE_TYPE)
    TirePressureThresholdDetection._cont = ASN1Dict([('noData', 0), ('overPressure', 1), ('noWarningPressure', 2), ('underPressure', 3), ('extremeUnderPressure', 4), ('undefined', 5), ('errorIndicator', 6), ('notAvailable', 7)])
    TirePressureThresholdDetection._ext = None
    
    #-----< TirePressure >-----#
    TirePressure = INT(name='TirePressure', mode=MODE_TYPE)
    TirePressure._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=250)], ev=None, er=[])
    
    #-----< TireTemp >-----#
    TireTemp = INT(name='TireTemp', mode=MODE_TYPE)
    TireTemp._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8736, ub=55519)], ev=None, er=[])
    
    #-----< WheelEndElectFault >-----#
    WheelEndElectFault = ENUM(name='WheelEndElectFault', mode=MODE_TYPE)
    WheelEndElectFault._cont = ASN1Dict([('isOk', 0), ('isNotDefined', 1), ('isError', 2), ('isNotSupported', 3)])
    WheelEndElectFault._ext = None
    
    #-----< WheelSensorStatus >-----#
    WheelSensorStatus = ENUM(name='WheelSensorStatus', mode=MODE_TYPE)
    WheelSensorStatus._cont = ASN1Dict([('off', 0), ('on', 1), ('notDefined', 2), ('notSupported', 3)])
    WheelSensorStatus._ext = None
    
    #-----< ProbeSegmentNumber >-----#
    ProbeSegmentNumber = INT(name='ProbeSegmentNumber', mode=MODE_TYPE)
    ProbeSegmentNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    
    #-----< RainSensor >-----#
    RainSensor = ENUM(name='RainSensor', mode=MODE_TYPE)
    RainSensor._cont = ASN1Dict([('none', 0), ('lightMist', 1), ('heavyMist', 2), ('lightRainOrDrizzle', 3), ('rain', 4), ('moderateRain', 5), ('heavyRain', 6), ('heavyDownpour', 7)])
    RainSensor._ext = None
    
    #-----< SteeringWheelAngleConfidence >-----#
    SteeringWheelAngleConfidence = ENUM(name='SteeringWheelAngleConfidence', mode=MODE_TYPE)
    SteeringWheelAngleConfidence._cont = ASN1Dict([('unavailable', 0), ('prec2deg', 1), ('prec1deg', 2), ('prec0-02deg', 3)])
    SteeringWheelAngleConfidence._ext = None
    
    #-----< SteeringWheelAngleRateOfChange >-----#
    SteeringWheelAngleRateOfChange = INT(name='SteeringWheelAngleRateOfChange', mode=MODE_TYPE)
    SteeringWheelAngleRateOfChange._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-127, ub=127)], ev=None, er=[])
    
    #-----< SunSensor >-----#
    SunSensor = INT(name='SunSensor', mode=MODE_TYPE)
    SunSensor._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1000)], ev=None, er=[])
    
    #-----< ThrottlePosition >-----#
    ThrottlePosition = INT(name='ThrottlePosition', mode=MODE_TYPE)
    ThrottlePosition._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=200)], ev=None, er=[])
    
    #-----< VINstring >-----#
    VINstring = OCT_STR(name='VINstring', mode=MODE_TYPE)
    VINstring._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=17)], ev=None, er=[])
    
    #-----< YawRateConfidence >-----#
    YawRateConfidence = ENUM(name='YawRateConfidence', mode=MODE_TYPE)
    YawRateConfidence._cont = ASN1Dict([('unavailable', 0), ('degSec-100-00', 1), ('degSec-010-00', 2), ('degSec-005-00', 3), ('degSec-001-00', 4), ('degSec-000-10', 5), ('degSec-000-05', 6), ('degSec-000-01', 7)])
    YawRateConfidence._ext = None
    
    _all_ = [
        _ProbeVehicleData_timeStamp,
        _ProbeVehicleData_segNum,
        _ProbeVehicleData_probeID,
        _ProbeVehicleData_startVector,
        _ProbeVehicleData_vehicleType,
        __ProbeVehicleData_snapshots__item_,
        _ProbeVehicleData_snapshots,
        ____ProbeVehicleData_regional__item__regionId_tab,
        ___ProbeVehicleData_regional__item__regionId,
        ____ProbeVehicleData_regional__item__regExtValue_tab,
        ___ProbeVehicleData_regional__item__regExtValue,
        __ProbeVehicleData_regional__item_,
        _ProbeVehicleData_regional,
        ProbeVehicleData,
        _AccelSteerYawRateConfidence_yawRate,
        _AccelSteerYawRateConfidence_acceleration,
        _AccelSteerYawRateConfidence_steeringWheelAngle,
        AccelSteerYawRateConfidence,
        _ConfidenceSet_accelConfidence,
        _ConfidenceSet_speedConfidence,
        _ConfidenceSet_timeConfidence,
        _ConfidenceSet_posConfidence,
        _ConfidenceSet_steerConfidence,
        _ConfidenceSet_headingConfidence,
        _ConfidenceSet_throttleConfidence,
        ConfidenceSet,
        _J1939data_tires,
        _J1939data_axles,
        _J1939data_trailerWeight,
        _J1939data_cargoWeight,
        _J1939data_steeringAxleTemperature,
        _J1939data_driveAxleLocation,
        _J1939data_driveAxleLiftAirPressure,
        _J1939data_driveAxleTemperature,
        _J1939data_driveAxleLubePressure,
        _J1939data_steeringAxleLubePressure,
        J1939data,
        _TireDataList__item_,
        TireDataList,
        _TireData_location,
        _TireData_pressure,
        _TireData_temp,
        _TireData_wheelSensorStatus,
        _TireData_wheelEndElectFault,
        _TireData_leakageRate,
        _TireData_detection,
        TireData,
        _AxleWeightList__item_,
        AxleWeightList,
        _AxleWeightSet_location,
        _AxleWeightSet_weight,
        AxleWeightSet,
        _Snapshot_thePosition,
        _Snapshot_safetyExt,
        _Snapshot_dataSet,
        Snapshot,
        _VehicleIdent_name,
        _VehicleIdent_vin,
        _VehicleIdent_ownerCode,
        _VehicleIdent_id,
        _VehicleIdent_vehicleType,
        __VehicleIdent_vehicleClass_vGroup,
        __VehicleIdent_vehicleClass_rGroup,
        __VehicleIdent_vehicleClass_rEquip,
        _VehicleIdent_vehicleClass,
        VehicleIdent,
        _VehicleStatus_lights,
        _VehicleStatus_lightBar,
        _VehicleStatus_wipers,
        _VehicleStatus_brakeStatus,
        _VehicleStatus_brakePressure,
        _VehicleStatus_roadFriction,
        _VehicleStatus_sunData,
        _VehicleStatus_rainData,
        _VehicleStatus_airTemp,
        _VehicleStatus_airPres,
        __VehicleStatus_steering_angle,
        __VehicleStatus_steering_confidence,
        __VehicleStatus_steering_rate,
        __VehicleStatus_steering_wheels,
        _VehicleStatus_steering,
        __VehicleStatus_accelSets_accel4way,
        __VehicleStatus_accelSets_vertAccelThres,
        __VehicleStatus_accelSets_yawRateCon,
        __VehicleStatus_accelSets_hozAccelCon,
        __VehicleStatus_accelSets_confidenceSet,
        _VehicleStatus_accelSets,
        __VehicleStatus_object_obDist,
        __VehicleStatus_object_obDirect,
        __VehicleStatus_object_dateTime,
        _VehicleStatus_object,
        _VehicleStatus_fullPos,
        _VehicleStatus_throttlePos,
        _VehicleStatus_speedHeadC,
        _VehicleStatus_speedC,
        __VehicleStatus_vehicleData_height,
        __VehicleStatus_vehicleData_bumpers,
        __VehicleStatus_vehicleData_mass,
        __VehicleStatus_vehicleData_trailerWeight,
        __VehicleStatus_vehicleData_type,
        _VehicleStatus_vehicleData,
        _VehicleStatus_vehicleIdent,
        _VehicleStatus_j1939data,
        __VehicleStatus_weatherReport_isRaining,
        __VehicleStatus_weatherReport_rainRate,
        __VehicleStatus_weatherReport_precipSituation,
        __VehicleStatus_weatherReport_solarRadiation,
        __VehicleStatus_weatherReport_friction,
        _VehicleStatus_weatherReport,
        _VehicleStatus_gnssStatus,
        VehicleStatus,
        AccelerationConfidence,
        BrakeAppliedPressure,
        DrivingWheelAngle,
        AxleLocation,
        AxleWeight,
        CargoWeight,
        DriveAxleLiftAirPressure,
        DriveAxleLocation,
        DriveAxleLubePressure,
        DriveAxleTemperature,
        SteeringAxleLubePressure,
        SteeringAxleTemperature,
        TireLeakageRate,
        TireLocation,
        TirePressureThresholdDetection,
        TirePressure,
        TireTemp,
        WheelEndElectFault,
        WheelSensorStatus,
        ProbeSegmentNumber,
        RainSensor,
        SteeringWheelAngleConfidence,
        SteeringWheelAngleRateOfChange,
        SunSensor,
        ThrottlePosition,
        VINstring,
        YawRateConfidence,
    ]

class REGION:

    _name_  = 'REGION'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 2, 1, 1]
    
    _obj_ = [
        'Reg-AdvisorySpeed',
        'Reg-ComputedLane',
        'Reg-EventDescription',
        'Reg-GenericLane',
        'Reg-GeographicalPath',
        'Reg-GeometricProjection',
        'Reg-IntersectionGeometry',
        'Reg-LaneAttributes',
        'Reg-MovementState',
        'Reg-NodeAttributeSetLL',
        'Reg-NodeAttributeSetXY',
        'Reg-NodeOffsetPointLL',
        'Reg-RequestorDescription',
        'Reg-RequestorType',
        'Reg-RoadSegment',
        'Reg-SignalControlZone',
        'Reg-SignalRequest',
        'Reg-SignalRequestPackage',
        'Reg-SignalStatus',
        'Reg-SignalStatusPackage',
        'Reg-SupplementalVehicleExtensions',
        'Reg-VehicleClassification',
        'Reg-VerticalOffset',
        'Reg-ConnectionManeuverAssist',
        'Reg-IntersectionState',
        'Reg-LaneDataAttribute',
        'Reg-MovementEvent',
        'Reg-NodeOffsetPointXY',
        'Reg-Position3D',
        'Reg-RestrictionUserType',
        'Reg-BasicSafetyMessage',
        'Reg-CommonSafetyRequest',
        'Reg-EmergencyVehicleAlert',
        'Reg-IntersectionCollision',
        'Reg-NMEAcorrections',
        'Reg-ProbeDataManagement',
        'Reg-ProbeVehicleData',
        'Reg-RoadSideAlert',
        'Reg-RTCMcorrections',
        'Reg-SignalRequestMessage',
        'Reg-SignalStatusMessage',
        'Reg-SPAT',
        'Reg-TravelerInformation',
        'Reg-PersonalSafetyMessage',
        'Reg-MapData',
        'Reg-TestMessage00',
        'Reg-TestMessage01',
        'Reg-TestMessage02',
        'Reg-TestMessage03',
        'Reg-TestMessage04',
        'Reg-TestMessage05',
        'Reg-TestMessage06',
        'Reg-TestMessage07',
        'Reg-TestMessage08',
        'Reg-TestMessage09',
        'Reg-TestMessage10',
        'Reg-TestMessage11',
        'Reg-TestMessage12',
        'Reg-TestMessage13',
        'Reg-TestMessage14',
        'Reg-TestMessage15',
        ]
    _type_ = [
        ]
    _set_ = [
        'Reg-AdvisorySpeed',
        'Reg-ComputedLane',
        'Reg-EventDescription',
        'Reg-GenericLane',
        'Reg-GeographicalPath',
        'Reg-GeometricProjection',
        'Reg-IntersectionGeometry',
        'Reg-LaneAttributes',
        'Reg-MovementState',
        'Reg-NodeAttributeSetLL',
        'Reg-NodeAttributeSetXY',
        'Reg-NodeOffsetPointLL',
        'Reg-RequestorDescription',
        'Reg-RequestorType',
        'Reg-RoadSegment',
        'Reg-SignalControlZone',
        'Reg-SignalRequest',
        'Reg-SignalRequestPackage',
        'Reg-SignalStatus',
        'Reg-SignalStatusPackage',
        'Reg-SupplementalVehicleExtensions',
        'Reg-VehicleClassification',
        'Reg-VerticalOffset',
        'Reg-ConnectionManeuverAssist',
        'Reg-IntersectionState',
        'Reg-LaneDataAttribute',
        'Reg-MovementEvent',
        'Reg-NodeOffsetPointXY',
        'Reg-Position3D',
        'Reg-RestrictionUserType',
        'Reg-BasicSafetyMessage',
        'Reg-CommonSafetyRequest',
        'Reg-EmergencyVehicleAlert',
        'Reg-IntersectionCollision',
        'Reg-NMEAcorrections',
        'Reg-ProbeDataManagement',
        'Reg-ProbeVehicleData',
        'Reg-RoadSideAlert',
        'Reg-RTCMcorrections',
        'Reg-SignalRequestMessage',
        'Reg-SignalStatusMessage',
        'Reg-SPAT',
        'Reg-TravelerInformation',
        'Reg-PersonalSafetyMessage',
        'Reg-MapData',
        'Reg-TestMessage00',
        'Reg-TestMessage01',
        'Reg-TestMessage02',
        'Reg-TestMessage03',
        'Reg-TestMessage04',
        'Reg-TestMessage05',
        'Reg-TestMessage06',
        'Reg-TestMessage07',
        'Reg-TestMessage08',
        'Reg-TestMessage09',
        'Reg-TestMessage10',
        'Reg-TestMessage11',
        'Reg-TestMessage12',
        'Reg-TestMessage13',
        'Reg-TestMessage14',
        'Reg-TestMessage15',
        ]
    _val_ = [
        ]
    _class_ = [
        'Reg-AdvisorySpeed',
        'Reg-ComputedLane',
        'Reg-EventDescription',
        'Reg-GenericLane',
        'Reg-GeographicalPath',
        'Reg-GeometricProjection',
        'Reg-IntersectionGeometry',
        'Reg-LaneAttributes',
        'Reg-MovementState',
        'Reg-NodeAttributeSetLL',
        'Reg-NodeAttributeSetXY',
        'Reg-NodeOffsetPointLL',
        'Reg-RequestorDescription',
        'Reg-RequestorType',
        'Reg-RoadSegment',
        'Reg-SignalControlZone',
        'Reg-SignalRequest',
        'Reg-SignalRequestPackage',
        'Reg-SignalStatus',
        'Reg-SignalStatusPackage',
        'Reg-SupplementalVehicleExtensions',
        'Reg-VehicleClassification',
        'Reg-VerticalOffset',
        'Reg-ConnectionManeuverAssist',
        'Reg-IntersectionState',
        'Reg-LaneDataAttribute',
        'Reg-MovementEvent',
        'Reg-NodeOffsetPointXY',
        'Reg-Position3D',
        'Reg-RestrictionUserType',
        'Reg-BasicSafetyMessage',
        'Reg-CommonSafetyRequest',
        'Reg-EmergencyVehicleAlert',
        'Reg-IntersectionCollision',
        'Reg-NMEAcorrections',
        'Reg-ProbeDataManagement',
        'Reg-ProbeVehicleData',
        'Reg-RoadSideAlert',
        'Reg-RTCMcorrections',
        'Reg-SignalRequestMessage',
        'Reg-SignalStatusMessage',
        'Reg-SPAT',
        'Reg-TravelerInformation',
        'Reg-PersonalSafetyMessage',
        'Reg-MapData',
        'Reg-TestMessage00',
        'Reg-TestMessage01',
        'Reg-TestMessage02',
        'Reg-TestMessage03',
        'Reg-TestMessage04',
        'Reg-TestMessage05',
        'Reg-TestMessage06',
        'Reg-TestMessage07',
        'Reg-TestMessage08',
        'Reg-TestMessage09',
        'Reg-TestMessage10',
        'Reg-TestMessage11',
        'Reg-TestMessage12',
        'Reg-TestMessage13',
        'Reg-TestMessage14',
        'Reg-TestMessage15',
        ]
    _param_ = [
        ]
    
    #-----< Reg-AdvisorySpeed >-----#
    Reg_AdvisorySpeed = CLASS(name='Reg-AdvisorySpeed', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_AdvisorySpeed._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-ComputedLane >-----#
    Reg_ComputedLane = CLASS(name='Reg-ComputedLane', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_ComputedLane._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-EventDescription >-----#
    Reg_EventDescription = CLASS(name='Reg-EventDescription', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_EventDescription._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-GenericLane >-----#
    Reg_GenericLane = CLASS(name='Reg-GenericLane', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_GenericLane._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-GeographicalPath >-----#
    Reg_GeographicalPath = CLASS(name='Reg-GeographicalPath', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_GeographicalPath._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-GeometricProjection >-----#
    Reg_GeometricProjection = CLASS(name='Reg-GeometricProjection', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_GeometricProjection._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-IntersectionGeometry >-----#
    Reg_IntersectionGeometry = CLASS(name='Reg-IntersectionGeometry', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_IntersectionGeometry._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-LaneAttributes >-----#
    Reg_LaneAttributes = CLASS(name='Reg-LaneAttributes', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_LaneAttributes._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-MovementState >-----#
    Reg_MovementState = CLASS(name='Reg-MovementState', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_MovementState._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeAttributeSetLL >-----#
    Reg_NodeAttributeSetLL = CLASS(name='Reg-NodeAttributeSetLL', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_NodeAttributeSetLL._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeAttributeSetXY >-----#
    Reg_NodeAttributeSetXY = CLASS(name='Reg-NodeAttributeSetXY', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_NodeAttributeSetXY._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeOffsetPointLL >-----#
    Reg_NodeOffsetPointLL = CLASS(name='Reg-NodeOffsetPointLL', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_NodeOffsetPointLL._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-RequestorDescription >-----#
    Reg_RequestorDescription = CLASS(name='Reg-RequestorDescription', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_RequestorDescription._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-RequestorType >-----#
    Reg_RequestorType = CLASS(name='Reg-RequestorType', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_RequestorType._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-RoadSegment >-----#
    Reg_RoadSegment = CLASS(name='Reg-RoadSegment', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_RoadSegment._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalControlZone >-----#
    Reg_SignalControlZone = CLASS(name='Reg-SignalControlZone', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalControlZone._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalRequest >-----#
    Reg_SignalRequest = CLASS(name='Reg-SignalRequest', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalRequest._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalRequestPackage >-----#
    Reg_SignalRequestPackage = CLASS(name='Reg-SignalRequestPackage', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalRequestPackage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalStatus >-----#
    Reg_SignalStatus = CLASS(name='Reg-SignalStatus', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalStatus._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalStatusPackage >-----#
    Reg_SignalStatusPackage = CLASS(name='Reg-SignalStatusPackage', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalStatusPackage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SupplementalVehicleExtensions >-----#
    Reg_SupplementalVehicleExtensions = CLASS(name='Reg-SupplementalVehicleExtensions', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SupplementalVehicleExtensions._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-VehicleClassification >-----#
    Reg_VehicleClassification = CLASS(name='Reg-VehicleClassification', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_VehicleClassification._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-VerticalOffset >-----#
    Reg_VerticalOffset = CLASS(name='Reg-VerticalOffset', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_VerticalOffset._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-ConnectionManeuverAssist >-----#
    Reg_ConnectionManeuverAssist = CLASS(name='Reg-ConnectionManeuverAssist', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_ConnectionManeuverAssist_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'ConnectionManeuverAssist-addGrpC')))
    Reg_ConnectionManeuverAssist._val = ASN1Set(rv=[dict([('Type', _Reg_ConnectionManeuverAssist_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-IntersectionState >-----#
    Reg_IntersectionState = CLASS(name='Reg-IntersectionState', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_IntersectionState_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'IntersectionState-addGrpC')))
    Reg_IntersectionState._val = ASN1Set(rv=[dict([('Type', _Reg_IntersectionState_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-LaneDataAttribute >-----#
    Reg_LaneDataAttribute = CLASS(name='Reg-LaneDataAttribute', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_LaneDataAttribute_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'LaneDataAttribute-addGrpB')))
    Reg_LaneDataAttribute._val = ASN1Set(rv=[dict([('Type', _Reg_LaneDataAttribute_val_Type_0), ('id', 2)])], rr=[], ev=[], er=[])
    
    #-----< Reg-MovementEvent >-----#
    Reg_MovementEvent = CLASS(name='Reg-MovementEvent', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_MovementEvent_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'MovementEvent-addGrpB')))
    Reg_MovementEvent._val = ASN1Set(rv=[dict([('Type', _Reg_MovementEvent_val_Type_0), ('id', 2)])], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeOffsetPointXY >-----#
    Reg_NodeOffsetPointXY = CLASS(name='Reg-NodeOffsetPointXY', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_NodeOffsetPointXY_val_Type_0 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'NodeOffsetPointXY-addGrpB')))
    Reg_NodeOffsetPointXY._val = ASN1Set(rv=[dict([('Type', _Reg_NodeOffsetPointXY_val_Type_0), ('id', 2)])], rr=[], ev=[], er=[])
    
    #-----< Reg-Position3D >-----#
    Reg_Position3D = CLASS(name='Reg-Position3D', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_Position3D_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'Position3D-addGrpB')))
    _Reg_Position3D_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'Position3D-addGrpC')))
    Reg_Position3D._val = ASN1Set(rv=[dict([('Type', _Reg_Position3D_val_Type_0), ('id', 2)]), dict([('Type', _Reg_Position3D_val_Type_1), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-RestrictionUserType >-----#
    Reg_RestrictionUserType = CLASS(name='Reg-RestrictionUserType', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_RestrictionUserType_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'RestrictionUserType-addGrpC')))
    Reg_RestrictionUserType._val = ASN1Set(rv=[dict([('Type', _Reg_RestrictionUserType_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-BasicSafetyMessage >-----#
    Reg_BasicSafetyMessage = CLASS(name='Reg-BasicSafetyMessage', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_BasicSafetyMessage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-CommonSafetyRequest >-----#
    Reg_CommonSafetyRequest = CLASS(name='Reg-CommonSafetyRequest', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_CommonSafetyRequest._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-EmergencyVehicleAlert >-----#
    Reg_EmergencyVehicleAlert = CLASS(name='Reg-EmergencyVehicleAlert', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_EmergencyVehicleAlert._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-IntersectionCollision >-----#
    Reg_IntersectionCollision = CLASS(name='Reg-IntersectionCollision', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_IntersectionCollision._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-NMEAcorrections >-----#
    Reg_NMEAcorrections = CLASS(name='Reg-NMEAcorrections', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_NMEAcorrections._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-ProbeDataManagement >-----#
    Reg_ProbeDataManagement = CLASS(name='Reg-ProbeDataManagement', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_ProbeDataManagement._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-ProbeVehicleData >-----#
    Reg_ProbeVehicleData = CLASS(name='Reg-ProbeVehicleData', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_ProbeVehicleData._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-RoadSideAlert >-----#
    Reg_RoadSideAlert = CLASS(name='Reg-RoadSideAlert', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_RoadSideAlert._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-RTCMcorrections >-----#
    Reg_RTCMcorrections = CLASS(name='Reg-RTCMcorrections', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_RTCMcorrections._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalRequestMessage >-----#
    Reg_SignalRequestMessage = CLASS(name='Reg-SignalRequestMessage', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalRequestMessage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalStatusMessage >-----#
    Reg_SignalStatusMessage = CLASS(name='Reg-SignalStatusMessage', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalStatusMessage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SPAT >-----#
    Reg_SPAT = CLASS(name='Reg-SPAT', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_SPAT._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TravelerInformation >-----#
    Reg_TravelerInformation = CLASS(name='Reg-TravelerInformation', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TravelerInformation._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-PersonalSafetyMessage >-----#
    Reg_PersonalSafetyMessage = CLASS(name='Reg-PersonalSafetyMessage', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_PersonalSafetyMessage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-MapData >-----#
    Reg_MapData = CLASS(name='Reg-MapData', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _Reg_MapData_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'MapData-addGrpC')))
    Reg_MapData._val = ASN1Set(rv=[dict([('Type', _Reg_MapData_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage00 >-----#
    Reg_TestMessage00 = CLASS(name='Reg-TestMessage00', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage00._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage01 >-----#
    Reg_TestMessage01 = CLASS(name='Reg-TestMessage01', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage01._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage02 >-----#
    Reg_TestMessage02 = CLASS(name='Reg-TestMessage02', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage02._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage03 >-----#
    Reg_TestMessage03 = CLASS(name='Reg-TestMessage03', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage03._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage04 >-----#
    Reg_TestMessage04 = CLASS(name='Reg-TestMessage04', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage04._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage05 >-----#
    Reg_TestMessage05 = CLASS(name='Reg-TestMessage05', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage05._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage06 >-----#
    Reg_TestMessage06 = CLASS(name='Reg-TestMessage06', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage06._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage07 >-----#
    Reg_TestMessage07 = CLASS(name='Reg-TestMessage07', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage07._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage08 >-----#
    Reg_TestMessage08 = CLASS(name='Reg-TestMessage08', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage08._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage09 >-----#
    Reg_TestMessage09 = CLASS(name='Reg-TestMessage09', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage09._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage10 >-----#
    Reg_TestMessage10 = CLASS(name='Reg-TestMessage10', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage10._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage11 >-----#
    Reg_TestMessage11 = CLASS(name='Reg-TestMessage11', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage11._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage12 >-----#
    Reg_TestMessage12 = CLASS(name='Reg-TestMessage12', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage12._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage13 >-----#
    Reg_TestMessage13 = CLASS(name='Reg-TestMessage13', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage13._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage14 >-----#
    Reg_TestMessage14 = CLASS(name='Reg-TestMessage14', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage14._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-TestMessage15 >-----#
    Reg_TestMessage15 = CLASS(name='Reg-TestMessage15', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    Reg_TestMessage15._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    _all_ = [
        Reg_AdvisorySpeed,
        Reg_ComputedLane,
        Reg_EventDescription,
        Reg_GenericLane,
        Reg_GeographicalPath,
        Reg_GeometricProjection,
        Reg_IntersectionGeometry,
        Reg_LaneAttributes,
        Reg_MovementState,
        Reg_NodeAttributeSetLL,
        Reg_NodeAttributeSetXY,
        Reg_NodeOffsetPointLL,
        Reg_RequestorDescription,
        Reg_RequestorType,
        Reg_RoadSegment,
        Reg_SignalControlZone,
        Reg_SignalRequest,
        Reg_SignalRequestPackage,
        Reg_SignalStatus,
        Reg_SignalStatusPackage,
        Reg_SupplementalVehicleExtensions,
        Reg_VehicleClassification,
        Reg_VerticalOffset,
        Reg_ConnectionManeuverAssist,
        _Reg_ConnectionManeuverAssist_val_Type_0,
        Reg_IntersectionState,
        _Reg_IntersectionState_val_Type_0,
        Reg_LaneDataAttribute,
        _Reg_LaneDataAttribute_val_Type_0,
        Reg_MovementEvent,
        _Reg_MovementEvent_val_Type_0,
        Reg_NodeOffsetPointXY,
        _Reg_NodeOffsetPointXY_val_Type_0,
        Reg_Position3D,
        _Reg_Position3D_val_Type_0,
        _Reg_Position3D_val_Type_1,
        Reg_RestrictionUserType,
        _Reg_RestrictionUserType_val_Type_0,
        Reg_BasicSafetyMessage,
        Reg_CommonSafetyRequest,
        Reg_EmergencyVehicleAlert,
        Reg_IntersectionCollision,
        Reg_NMEAcorrections,
        Reg_ProbeDataManagement,
        Reg_ProbeVehicleData,
        Reg_RoadSideAlert,
        Reg_RTCMcorrections,
        Reg_SignalRequestMessage,
        Reg_SignalStatusMessage,
        Reg_SPAT,
        Reg_TravelerInformation,
        Reg_PersonalSafetyMessage,
        Reg_MapData,
        _Reg_MapData_val_Type_0,
        Reg_TestMessage00,
        Reg_TestMessage01,
        Reg_TestMessage02,
        Reg_TestMessage03,
        Reg_TestMessage04,
        Reg_TestMessage05,
        Reg_TestMessage06,
        Reg_TestMessage07,
        Reg_TestMessage08,
        Reg_TestMessage09,
        Reg_TestMessage10,
        Reg_TestMessage11,
        Reg_TestMessage12,
        Reg_TestMessage13,
        Reg_TestMessage14,
        Reg_TestMessage15,
    ]

class RTCMcorrections:

    _name_  = 'RTCMcorrections'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 17, 1, 1]
    
    _obj_ = [
        'RTCMcorrections',
        'RTCM-Revision',
        ]
    _type_ = [
        'RTCMcorrections',
        'RTCM-Revision',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< RTCMcorrections >-----#
    RTCMcorrections = SEQ(name='RTCMcorrections', mode=MODE_TYPE)
    _RTCMcorrections_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _RTCMcorrections_rev = ENUM(name='rev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RTCMcorrections', 'RTCM-Revision')))
    _RTCMcorrections_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _RTCMcorrections_anchorPoint = SEQ(name='anchorPoint', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullPositionVector')), opt=True)
    _RTCMcorrections_rtcmHeader = SEQ(name='rtcmHeader', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RTCMheader')), opt=True)
    _RTCMcorrections_msgs = SEQ_OF(name='msgs', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RTCMmessageList')))
    _RTCMcorrections_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RTCMcorrections_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___RTCMcorrections_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RTCMcorrections_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RTCMcorrections_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RTCMcorrections_regional__item__regionId._const_tab = ____RTCMcorrections_regional__item__regionId_tab
    ___RTCMcorrections_regional__item__regionId._const_tab_at = None
    ___RTCMcorrections_regional__item__regionId._const_tab_id = 'id'
    ___RTCMcorrections_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____RTCMcorrections_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RTCMcorrections_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RTCMcorrections_regional__item__regExtValue._const_tab = ____RTCMcorrections_regional__item__regExtValue_tab
    ___RTCMcorrections_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RTCMcorrections_regional__item__regExtValue._const_tab_id = 'Type'
    __RTCMcorrections_regional__item_._cont = ASN1Dict([
        ('regionId', ___RTCMcorrections_regional__item__regionId),
        ('regExtValue', ___RTCMcorrections_regional__item__regExtValue),
        ])
    __RTCMcorrections_regional__item_._ext = None
    _RTCMcorrections_regional._cont = __RTCMcorrections_regional__item_
    _RTCMcorrections_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RTCMcorrections._cont = ASN1Dict([
        ('msgCnt', _RTCMcorrections_msgCnt),
        ('rev', _RTCMcorrections_rev),
        ('timeStamp', _RTCMcorrections_timeStamp),
        ('anchorPoint', _RTCMcorrections_anchorPoint),
        ('rtcmHeader', _RTCMcorrections_rtcmHeader),
        ('msgs', _RTCMcorrections_msgs),
        ('regional', _RTCMcorrections_regional),
        ])
    RTCMcorrections._ext = []
    
    #-----< RTCM-Revision >-----#
    RTCM_Revision = ENUM(name='RTCM-Revision', mode=MODE_TYPE)
    RTCM_Revision._cont = ASN1Dict([('unknown', 0), ('rtcmRev2', 1), ('rtcmRev3', 2), ('reserved', 3)])
    RTCM_Revision._ext = []
    
    _all_ = [
        _RTCMcorrections_msgCnt,
        _RTCMcorrections_rev,
        _RTCMcorrections_timeStamp,
        _RTCMcorrections_anchorPoint,
        _RTCMcorrections_rtcmHeader,
        _RTCMcorrections_msgs,
        ____RTCMcorrections_regional__item__regionId_tab,
        ___RTCMcorrections_regional__item__regionId,
        ____RTCMcorrections_regional__item__regExtValue_tab,
        ___RTCMcorrections_regional__item__regExtValue,
        __RTCMcorrections_regional__item_,
        _RTCMcorrections_regional,
        RTCMcorrections,
        RTCM_Revision,
    ]

class RoadSideAlert:

    _name_  = 'RoadSideAlert'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 16, 1, 1]
    
    _obj_ = [
        'RoadSideAlert',
        ]
    _type_ = [
        'RoadSideAlert',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< RoadSideAlert >-----#
    RoadSideAlert = SEQ(name='RoadSideAlert', mode=MODE_TYPE)
    _RoadSideAlert_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _RoadSideAlert_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _RoadSideAlert_typeEvent = INT(name='typeEvent', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    _RoadSideAlert_description = SEQ_OF(name='description', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RoadSideAlert_description__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    _RoadSideAlert_description._cont = __RoadSideAlert_description__item_
    _RoadSideAlert_description._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _RoadSideAlert_priority = OCT_STR(name='priority', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Priority')), opt=True)
    _RoadSideAlert_heading = BIT_STR(name='heading', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingSlice')), opt=True)
    _RoadSideAlert_extent = ENUM(name='extent', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Extent')), opt=True)
    _RoadSideAlert_position = SEQ(name='position', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullPositionVector')), opt=True)
    _RoadSideAlert_furtherInfoID = OCT_STR(name='furtherInfoID', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FurtherInfoID')), opt=True)
    _RoadSideAlert_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RoadSideAlert_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___RoadSideAlert_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RoadSideAlert_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RoadSideAlert_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RoadSideAlert_regional__item__regionId._const_tab = ____RoadSideAlert_regional__item__regionId_tab
    ___RoadSideAlert_regional__item__regionId._const_tab_at = None
    ___RoadSideAlert_regional__item__regionId._const_tab_id = 'id'
    ___RoadSideAlert_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____RoadSideAlert_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RoadSideAlert_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RoadSideAlert_regional__item__regExtValue._const_tab = ____RoadSideAlert_regional__item__regExtValue_tab
    ___RoadSideAlert_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RoadSideAlert_regional__item__regExtValue._const_tab_id = 'Type'
    __RoadSideAlert_regional__item_._cont = ASN1Dict([
        ('regionId', ___RoadSideAlert_regional__item__regionId),
        ('regExtValue', ___RoadSideAlert_regional__item__regExtValue),
        ])
    __RoadSideAlert_regional__item_._ext = None
    _RoadSideAlert_regional._cont = __RoadSideAlert_regional__item_
    _RoadSideAlert_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RoadSideAlert._cont = ASN1Dict([
        ('msgCnt', _RoadSideAlert_msgCnt),
        ('timeStamp', _RoadSideAlert_timeStamp),
        ('typeEvent', _RoadSideAlert_typeEvent),
        ('description', _RoadSideAlert_description),
        ('priority', _RoadSideAlert_priority),
        ('heading', _RoadSideAlert_heading),
        ('extent', _RoadSideAlert_extent),
        ('position', _RoadSideAlert_position),
        ('furtherInfoID', _RoadSideAlert_furtherInfoID),
        ('regional', _RoadSideAlert_regional),
        ])
    RoadSideAlert._ext = []
    
    _all_ = [
        _RoadSideAlert_msgCnt,
        _RoadSideAlert_timeStamp,
        _RoadSideAlert_typeEvent,
        __RoadSideAlert_description__item_,
        _RoadSideAlert_description,
        _RoadSideAlert_priority,
        _RoadSideAlert_heading,
        _RoadSideAlert_extent,
        _RoadSideAlert_position,
        _RoadSideAlert_furtherInfoID,
        ____RoadSideAlert_regional__item__regionId_tab,
        ___RoadSideAlert_regional__item__regionId,
        ____RoadSideAlert_regional__item__regExtValue_tab,
        ___RoadSideAlert_regional__item__regExtValue,
        __RoadSideAlert_regional__item_,
        _RoadSideAlert_regional,
        RoadSideAlert,
    ]

class SignalControlAndPrioritizationRequest:

    _name_  = 'SignalControlAndPrioritizationRequest'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 46, 1, 1]
    
    _obj_ = [
        'SignalControlAndPrioritizationRequest',
        ]
    _type_ = [
        'SignalControlAndPrioritizationRequest',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SignalControlAndPrioritizationRequest >-----#
    SignalControlAndPrioritizationRequest = NULL(name='SignalControlAndPrioritizationRequest', mode=MODE_TYPE)
    
    _all_ = [
        SignalControlAndPrioritizationRequest,
    ]

class SignalControlAndPrioritizationStatus:

    _name_  = 'SignalControlAndPrioritizationStatus'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 47, 1, 1]
    
    _obj_ = [
        'SignalControlAndPrioritizationStatus',
        ]
    _type_ = [
        'SignalControlAndPrioritizationStatus',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SignalControlAndPrioritizationStatus >-----#
    SignalControlAndPrioritizationStatus = NULL(name='SignalControlAndPrioritizationStatus', mode=MODE_TYPE)
    
    _all_ = [
        SignalControlAndPrioritizationStatus,
    ]

class SPAT:

    _name_  = 'SPAT'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 9, 1, 1]
    
    _obj_ = [
        'SPAT',
        'AdvisorySpeed',
        'AdvisorySpeedList',
        'ConnectionManeuverAssist',
        'EnabledLaneList',
        'IntersectionState',
        'IntersectionStateList',
        'ManeuverAssistList',
        'MovementEventList',
        'MovementEvent',
        'MovementList',
        'MovementState',
        'TimeChangeDetails',
        'AdvisorySpeedType',
        'IntersectionStatusObject',
        'MovementPhaseState',
        'PedestrianBicycleDetect',
        'SpeedAdvice',
        'TimeIntervalConfidence',
        'TimeMark',
        'WaitOnStopline',
        'ZoneLength',
        ]
    _type_ = [
        'SPAT',
        'AdvisorySpeed',
        'AdvisorySpeedList',
        'ConnectionManeuverAssist',
        'EnabledLaneList',
        'IntersectionState',
        'IntersectionStateList',
        'ManeuverAssistList',
        'MovementEventList',
        'MovementEvent',
        'MovementList',
        'MovementState',
        'TimeChangeDetails',
        'AdvisorySpeedType',
        'IntersectionStatusObject',
        'MovementPhaseState',
        'PedestrianBicycleDetect',
        'SpeedAdvice',
        'TimeIntervalConfidence',
        'TimeMark',
        'WaitOnStopline',
        'ZoneLength',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SPAT >-----#
    SPAT = SEQ(name='SPAT', mode=MODE_TYPE)
    _SPAT_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _SPAT_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _SPAT_intersections = SEQ_OF(name='intersections', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'IntersectionStateList')))
    _SPAT_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SPAT_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SPAT_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SPAT_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SPAT_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SPAT_regional__item__regionId._const_tab = ____SPAT_regional__item__regionId_tab
    ___SPAT_regional__item__regionId._const_tab_at = None
    ___SPAT_regional__item__regionId._const_tab_id = 'id'
    ___SPAT_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SPAT_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SPAT_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SPAT_regional__item__regExtValue._const_tab = ____SPAT_regional__item__regExtValue_tab
    ___SPAT_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SPAT_regional__item__regExtValue._const_tab_id = 'Type'
    __SPAT_regional__item_._cont = ASN1Dict([
        ('regionId', ___SPAT_regional__item__regionId),
        ('regExtValue', ___SPAT_regional__item__regExtValue),
        ])
    __SPAT_regional__item_._ext = None
    _SPAT_regional._cont = __SPAT_regional__item_
    _SPAT_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SPAT._cont = ASN1Dict([
        ('timeStamp', _SPAT_timeStamp),
        ('name', _SPAT_name),
        ('intersections', _SPAT_intersections),
        ('regional', _SPAT_regional),
        ])
    SPAT._ext = []
    
    #-----< AdvisorySpeed >-----#
    AdvisorySpeed = SEQ(name='AdvisorySpeed', mode=MODE_TYPE)
    _AdvisorySpeed_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'AdvisorySpeedType')))
    _AdvisorySpeed_speed = INT(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'SpeedAdvice')), opt=True)
    _AdvisorySpeed_confidence = ENUM(name='confidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedConfidence')), opt=True)
    _AdvisorySpeed_distance = INT(name='distance', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'ZoneLength')), opt=True)
    _AdvisorySpeed_class_ = INT(name='class', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RestrictionClassID')), opt=True)
    _AdvisorySpeed_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __AdvisorySpeed_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___AdvisorySpeed_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____AdvisorySpeed_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____AdvisorySpeed_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___AdvisorySpeed_regional__item__regionId._const_tab = ____AdvisorySpeed_regional__item__regionId_tab
    ___AdvisorySpeed_regional__item__regionId._const_tab_at = None
    ___AdvisorySpeed_regional__item__regionId._const_tab_id = 'id'
    ___AdvisorySpeed_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____AdvisorySpeed_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____AdvisorySpeed_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___AdvisorySpeed_regional__item__regExtValue._const_tab = ____AdvisorySpeed_regional__item__regExtValue_tab
    ___AdvisorySpeed_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___AdvisorySpeed_regional__item__regExtValue._const_tab_id = 'Type'
    __AdvisorySpeed_regional__item_._cont = ASN1Dict([
        ('regionId', ___AdvisorySpeed_regional__item__regionId),
        ('regExtValue', ___AdvisorySpeed_regional__item__regExtValue),
        ])
    __AdvisorySpeed_regional__item_._ext = None
    _AdvisorySpeed_regional._cont = __AdvisorySpeed_regional__item_
    _AdvisorySpeed_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    AdvisorySpeed._cont = ASN1Dict([
        ('type', _AdvisorySpeed_type),
        ('speed', _AdvisorySpeed_speed),
        ('confidence', _AdvisorySpeed_confidence),
        ('distance', _AdvisorySpeed_distance),
        ('class', _AdvisorySpeed_class_),
        ('regional', _AdvisorySpeed_regional),
        ])
    AdvisorySpeed._ext = []
    
    #-----< AdvisorySpeedList >-----#
    AdvisorySpeedList = SEQ_OF(name='AdvisorySpeedList', mode=MODE_TYPE)
    _AdvisorySpeedList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SPAT', 'AdvisorySpeed')))
    AdvisorySpeedList._cont = _AdvisorySpeedList__item_
    AdvisorySpeedList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< ConnectionManeuverAssist >-----#
    ConnectionManeuverAssist = SEQ(name='ConnectionManeuverAssist', mode=MODE_TYPE)
    _ConnectionManeuverAssist_connectionID = INT(name='connectionID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneConnectionID')))
    _ConnectionManeuverAssist_queueLength = INT(name='queueLength', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'ZoneLength')), opt=True)
    _ConnectionManeuverAssist_availableStorageLength = INT(name='availableStorageLength', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'ZoneLength')), opt=True)
    _ConnectionManeuverAssist_waitOnStop = BOOL(name='waitOnStop', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'WaitOnStopline')), opt=True)
    _ConnectionManeuverAssist_pedBicycleDetect = BOOL(name='pedBicycleDetect', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'PedestrianBicycleDetect')), opt=True)
    _ConnectionManeuverAssist_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConnectionManeuverAssist_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___ConnectionManeuverAssist_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____ConnectionManeuverAssist_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _____ConnectionManeuverAssist_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'ConnectionManeuverAssist-addGrpC')))
    ____ConnectionManeuverAssist_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____ConnectionManeuverAssist_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___ConnectionManeuverAssist_regional__item__regionId._const_tab = ____ConnectionManeuverAssist_regional__item__regionId_tab
    ___ConnectionManeuverAssist_regional__item__regionId._const_tab_at = None
    ___ConnectionManeuverAssist_regional__item__regionId._const_tab_id = 'id'
    ___ConnectionManeuverAssist_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___ConnectionManeuverAssist_regional__item__regExtValue._const_tab = ____ConnectionManeuverAssist_regional__item__regionId_tab
    ___ConnectionManeuverAssist_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___ConnectionManeuverAssist_regional__item__regExtValue._const_tab_id = 'Type'
    __ConnectionManeuverAssist_regional__item_._cont = ASN1Dict([
        ('regionId', ___ConnectionManeuverAssist_regional__item__regionId),
        ('regExtValue', ___ConnectionManeuverAssist_regional__item__regExtValue),
        ])
    __ConnectionManeuverAssist_regional__item_._ext = None
    _ConnectionManeuverAssist_regional._cont = __ConnectionManeuverAssist_regional__item_
    _ConnectionManeuverAssist_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ConnectionManeuverAssist._cont = ASN1Dict([
        ('connectionID', _ConnectionManeuverAssist_connectionID),
        ('queueLength', _ConnectionManeuverAssist_queueLength),
        ('availableStorageLength', _ConnectionManeuverAssist_availableStorageLength),
        ('waitOnStop', _ConnectionManeuverAssist_waitOnStop),
        ('pedBicycleDetect', _ConnectionManeuverAssist_pedBicycleDetect),
        ('regional', _ConnectionManeuverAssist_regional),
        ])
    ConnectionManeuverAssist._ext = []
    
    #-----< EnabledLaneList >-----#
    EnabledLaneList = SEQ_OF(name='EnabledLaneList', mode=MODE_TYPE)
    _EnabledLaneList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'LaneID')))
    EnabledLaneList._cont = _EnabledLaneList__item_
    EnabledLaneList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< IntersectionState >-----#
    IntersectionState = SEQ(name='IntersectionState', mode=MODE_TYPE)
    _IntersectionState_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _IntersectionState_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionReferenceID')))
    _IntersectionState_revision = INT(name='revision', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _IntersectionState_status = BIT_STR(name='status', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'IntersectionStatusObject')))
    _IntersectionState_moy = INT(name='moy', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _IntersectionState_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')), opt=True)
    _IntersectionState_enabledLanes = SEQ_OF(name='enabledLanes', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'EnabledLaneList')), opt=True)
    _IntersectionState_states = SEQ_OF(name='states', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'MovementList')))
    _IntersectionState_maneuverAssistList = SEQ_OF(name='maneuverAssistList', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'ManeuverAssistList')), opt=True)
    _IntersectionState_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IntersectionState_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___IntersectionState_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____IntersectionState_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _____IntersectionState_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'IntersectionState-addGrpC')))
    ____IntersectionState_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____IntersectionState_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___IntersectionState_regional__item__regionId._const_tab = ____IntersectionState_regional__item__regionId_tab
    ___IntersectionState_regional__item__regionId._const_tab_at = None
    ___IntersectionState_regional__item__regionId._const_tab_id = 'id'
    ___IntersectionState_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___IntersectionState_regional__item__regExtValue._const_tab = ____IntersectionState_regional__item__regionId_tab
    ___IntersectionState_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___IntersectionState_regional__item__regExtValue._const_tab_id = 'Type'
    __IntersectionState_regional__item_._cont = ASN1Dict([
        ('regionId', ___IntersectionState_regional__item__regionId),
        ('regExtValue', ___IntersectionState_regional__item__regExtValue),
        ])
    __IntersectionState_regional__item_._ext = None
    _IntersectionState_regional._cont = __IntersectionState_regional__item_
    _IntersectionState_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    _IntersectionState_roadAuthorityID = CHOICE(name='roadAuthorityID', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'RoadAuthorityID')), opt=True)
    IntersectionState._cont = ASN1Dict([
        ('name', _IntersectionState_name),
        ('id', _IntersectionState_id),
        ('revision', _IntersectionState_revision),
        ('status', _IntersectionState_status),
        ('moy', _IntersectionState_moy),
        ('timeStamp', _IntersectionState_timeStamp),
        ('enabledLanes', _IntersectionState_enabledLanes),
        ('states', _IntersectionState_states),
        ('maneuverAssistList', _IntersectionState_maneuverAssistList),
        ('regional', _IntersectionState_regional),
        ('roadAuthorityID', _IntersectionState_roadAuthorityID),
        ])
    IntersectionState._ext = ['roadAuthorityID']
    
    #-----< IntersectionStateList >-----#
    IntersectionStateList = SEQ_OF(name='IntersectionStateList', mode=MODE_TYPE)
    _IntersectionStateList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SPAT', 'IntersectionState')))
    IntersectionStateList._cont = _IntersectionStateList__item_
    IntersectionStateList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< ManeuverAssistList >-----#
    ManeuverAssistList = SEQ_OF(name='ManeuverAssistList', mode=MODE_TYPE)
    _ManeuverAssistList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SPAT', 'ConnectionManeuverAssist')))
    ManeuverAssistList._cont = _ManeuverAssistList__item_
    ManeuverAssistList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< MovementEventList >-----#
    MovementEventList = SEQ_OF(name='MovementEventList', mode=MODE_TYPE)
    _MovementEventList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SPAT', 'MovementEvent')))
    MovementEventList._cont = _MovementEventList__item_
    MovementEventList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< MovementEvent >-----#
    MovementEvent = SEQ(name='MovementEvent', mode=MODE_TYPE)
    _MovementEvent_eventState = ENUM(name='eventState', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'MovementPhaseState')))
    _MovementEvent_timing = SEQ(name='timing', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeChangeDetails')), opt=True)
    _MovementEvent_speeds = SEQ_OF(name='speeds', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'AdvisorySpeedList')), opt=True)
    _MovementEvent_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MovementEvent_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___MovementEvent_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____MovementEvent_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    _____MovementEvent_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpB', 'MovementEvent-addGrpB')))
    ____MovementEvent_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____MovementEvent_regional__item__regionId_tab_val_Type_0), ('id', 2)])], rr=[], ev=None, er=[])
    ___MovementEvent_regional__item__regionId._const_tab = ____MovementEvent_regional__item__regionId_tab
    ___MovementEvent_regional__item__regionId._const_tab_at = None
    ___MovementEvent_regional__item__regionId._const_tab_id = 'id'
    ___MovementEvent_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___MovementEvent_regional__item__regExtValue._const_tab = ____MovementEvent_regional__item__regionId_tab
    ___MovementEvent_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___MovementEvent_regional__item__regExtValue._const_tab_id = 'Type'
    __MovementEvent_regional__item_._cont = ASN1Dict([
        ('regionId', ___MovementEvent_regional__item__regionId),
        ('regExtValue', ___MovementEvent_regional__item__regExtValue),
        ])
    __MovementEvent_regional__item_._ext = None
    _MovementEvent_regional._cont = __MovementEvent_regional__item_
    _MovementEvent_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    MovementEvent._cont = ASN1Dict([
        ('eventState', _MovementEvent_eventState),
        ('timing', _MovementEvent_timing),
        ('speeds', _MovementEvent_speeds),
        ('regional', _MovementEvent_regional),
        ])
    MovementEvent._ext = []
    
    #-----< MovementList >-----#
    MovementList = SEQ_OF(name='MovementList', mode=MODE_TYPE)
    _MovementList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SPAT', 'MovementState')))
    MovementList._cont = _MovementList__item_
    MovementList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< MovementState >-----#
    MovementState = SEQ(name='MovementState', mode=MODE_TYPE)
    _MovementState_movementName = STR_IA5(name='movementName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _MovementState_signalGroup = INT(name='signalGroup', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SignalGroupID')))
    _MovementState_state_time_speed = SEQ_OF(name='state-time-speed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'MovementEventList')))
    _MovementState_maneuverAssistList = SEQ_OF(name='maneuverAssistList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'ManeuverAssistList')), opt=True)
    _MovementState_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MovementState_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___MovementState_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____MovementState_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____MovementState_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___MovementState_regional__item__regionId._const_tab = ____MovementState_regional__item__regionId_tab
    ___MovementState_regional__item__regionId._const_tab_at = None
    ___MovementState_regional__item__regionId._const_tab_id = 'id'
    ___MovementState_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____MovementState_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____MovementState_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___MovementState_regional__item__regExtValue._const_tab = ____MovementState_regional__item__regExtValue_tab
    ___MovementState_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___MovementState_regional__item__regExtValue._const_tab_id = 'Type'
    __MovementState_regional__item_._cont = ASN1Dict([
        ('regionId', ___MovementState_regional__item__regionId),
        ('regExtValue', ___MovementState_regional__item__regExtValue),
        ])
    __MovementState_regional__item_._ext = None
    _MovementState_regional._cont = __MovementState_regional__item_
    _MovementState_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    MovementState._cont = ASN1Dict([
        ('movementName', _MovementState_movementName),
        ('signalGroup', _MovementState_signalGroup),
        ('state-time-speed', _MovementState_state_time_speed),
        ('maneuverAssistList', _MovementState_maneuverAssistList),
        ('regional', _MovementState_regional),
        ])
    MovementState._ext = []
    
    #-----< TimeChangeDetails >-----#
    TimeChangeDetails = SEQ(name='TimeChangeDetails', mode=MODE_TYPE)
    _TimeChangeDetails_startTime = INT(name='startTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeMark')), opt=True)
    _TimeChangeDetails_minEndTime = INT(name='minEndTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeMark')))
    _TimeChangeDetails_maxEndTime = INT(name='maxEndTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeMark')), opt=True)
    _TimeChangeDetails_likelyTime = INT(name='likelyTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeMark')), opt=True)
    _TimeChangeDetails_confidence = INT(name='confidence', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeIntervalConfidence')), opt=True)
    _TimeChangeDetails_nextTime = INT(name='nextTime', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'TimeMark')), opt=True)
    TimeChangeDetails._cont = ASN1Dict([
        ('startTime', _TimeChangeDetails_startTime),
        ('minEndTime', _TimeChangeDetails_minEndTime),
        ('maxEndTime', _TimeChangeDetails_maxEndTime),
        ('likelyTime', _TimeChangeDetails_likelyTime),
        ('confidence', _TimeChangeDetails_confidence),
        ('nextTime', _TimeChangeDetails_nextTime),
        ])
    TimeChangeDetails._ext = None
    
    #-----< AdvisorySpeedType >-----#
    AdvisorySpeedType = ENUM(name='AdvisorySpeedType', mode=MODE_TYPE)
    AdvisorySpeedType._cont = ASN1Dict([('none', 0), ('greenwave', 1), ('ecoDrive', 2), ('transit', 3)])
    AdvisorySpeedType._ext = []
    
    #-----< IntersectionStatusObject >-----#
    IntersectionStatusObject = BIT_STR(name='IntersectionStatusObject', mode=MODE_TYPE)
    IntersectionStatusObject._cont = ASN1Dict([('manualControlIsEnabled', 0), ('stopTimeIsActivated', 1), ('failureFlash', 2), ('preemptIsActive', 3), ('signalPriorityIsActive', 4), ('fixedTimeOperation', 5), ('trafficDependentOperation', 6), ('standbyOperation', 7), ('failureMode', 8), ('off', 9), ('recentMAPmessageUpdate', 10), ('recentChangeInMAPassignedLanesIDsUsed', 11), ('noValidMAPisAvailableAtThisTime', 12), ('noValidSPATisAvailableAtThisTime', 13)])
    IntersectionStatusObject._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< MovementPhaseState >-----#
    MovementPhaseState = ENUM(name='MovementPhaseState', mode=MODE_TYPE)
    MovementPhaseState._cont = ASN1Dict([('unavailable', 0), ('dark', 1), ('stop-Then-Proceed', 2), ('stop-And-Remain', 3), ('pre-Movement', 4), ('permissive-Movement-Allowed', 5), ('protected-Movement-Allowed', 6), ('permissive-clearance', 7), ('protected-clearance', 8), ('caution-Conflicting-Traffic', 9)])
    MovementPhaseState._ext = None
    
    #-----< PedestrianBicycleDetect >-----#
    PedestrianBicycleDetect = BOOL(name='PedestrianBicycleDetect', mode=MODE_TYPE)
    
    #-----< SpeedAdvice >-----#
    SpeedAdvice = INT(name='SpeedAdvice', mode=MODE_TYPE)
    SpeedAdvice._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=500)], ev=None, er=[])
    
    #-----< TimeIntervalConfidence >-----#
    TimeIntervalConfidence = INT(name='TimeIntervalConfidence', mode=MODE_TYPE)
    TimeIntervalConfidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< TimeMark >-----#
    TimeMark = INT(name='TimeMark', mode=MODE_TYPE)
    TimeMark._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=36111)], ev=None, er=[])
    
    #-----< WaitOnStopline >-----#
    WaitOnStopline = BOOL(name='WaitOnStopline', mode=MODE_TYPE)
    
    #-----< ZoneLength >-----#
    ZoneLength = INT(name='ZoneLength', mode=MODE_TYPE)
    ZoneLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10000)], ev=None, er=[])
    
    _all_ = [
        _SPAT_timeStamp,
        _SPAT_name,
        _SPAT_intersections,
        ____SPAT_regional__item__regionId_tab,
        ___SPAT_regional__item__regionId,
        ____SPAT_regional__item__regExtValue_tab,
        ___SPAT_regional__item__regExtValue,
        __SPAT_regional__item_,
        _SPAT_regional,
        SPAT,
        _AdvisorySpeed_type,
        _AdvisorySpeed_speed,
        _AdvisorySpeed_confidence,
        _AdvisorySpeed_distance,
        _AdvisorySpeed_class_,
        ____AdvisorySpeed_regional__item__regionId_tab,
        ___AdvisorySpeed_regional__item__regionId,
        ____AdvisorySpeed_regional__item__regExtValue_tab,
        ___AdvisorySpeed_regional__item__regExtValue,
        __AdvisorySpeed_regional__item_,
        _AdvisorySpeed_regional,
        AdvisorySpeed,
        _AdvisorySpeedList__item_,
        AdvisorySpeedList,
        _ConnectionManeuverAssist_connectionID,
        _ConnectionManeuverAssist_queueLength,
        _ConnectionManeuverAssist_availableStorageLength,
        _ConnectionManeuverAssist_waitOnStop,
        _ConnectionManeuverAssist_pedBicycleDetect,
        ____ConnectionManeuverAssist_regional__item__regionId_tab,
        _____ConnectionManeuverAssist_regional__item__regionId_tab_val_Type_0,
        ___ConnectionManeuverAssist_regional__item__regionId,
        ___ConnectionManeuverAssist_regional__item__regExtValue,
        __ConnectionManeuverAssist_regional__item_,
        _ConnectionManeuverAssist_regional,
        ConnectionManeuverAssist,
        _EnabledLaneList__item_,
        EnabledLaneList,
        _IntersectionState_name,
        _IntersectionState_id,
        _IntersectionState_revision,
        _IntersectionState_status,
        _IntersectionState_moy,
        _IntersectionState_timeStamp,
        _IntersectionState_enabledLanes,
        _IntersectionState_states,
        _IntersectionState_maneuverAssistList,
        ____IntersectionState_regional__item__regionId_tab,
        _____IntersectionState_regional__item__regionId_tab_val_Type_0,
        ___IntersectionState_regional__item__regionId,
        ___IntersectionState_regional__item__regExtValue,
        __IntersectionState_regional__item_,
        _IntersectionState_regional,
        _IntersectionState_roadAuthorityID,
        IntersectionState,
        _IntersectionStateList__item_,
        IntersectionStateList,
        _ManeuverAssistList__item_,
        ManeuverAssistList,
        _MovementEventList__item_,
        MovementEventList,
        _MovementEvent_eventState,
        _MovementEvent_timing,
        _MovementEvent_speeds,
        ____MovementEvent_regional__item__regionId_tab,
        _____MovementEvent_regional__item__regionId_tab_val_Type_0,
        ___MovementEvent_regional__item__regionId,
        ___MovementEvent_regional__item__regExtValue,
        __MovementEvent_regional__item_,
        _MovementEvent_regional,
        MovementEvent,
        _MovementList__item_,
        MovementList,
        _MovementState_movementName,
        _MovementState_signalGroup,
        _MovementState_state_time_speed,
        _MovementState_maneuverAssistList,
        ____MovementState_regional__item__regionId_tab,
        ___MovementState_regional__item__regionId,
        ____MovementState_regional__item__regExtValue_tab,
        ___MovementState_regional__item__regExtValue,
        __MovementState_regional__item_,
        _MovementState_regional,
        MovementState,
        _TimeChangeDetails_startTime,
        _TimeChangeDetails_minEndTime,
        _TimeChangeDetails_maxEndTime,
        _TimeChangeDetails_likelyTime,
        _TimeChangeDetails_confidence,
        _TimeChangeDetails_nextTime,
        TimeChangeDetails,
        AdvisorySpeedType,
        IntersectionStatusObject,
        MovementPhaseState,
        PedestrianBicycleDetect,
        SpeedAdvice,
        TimeIntervalConfidence,
        TimeMark,
        WaitOnStopline,
        ZoneLength,
    ]

class SignalRequestMessage:

    _name_  = 'SignalRequestMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 18, 1, 1]
    
    _obj_ = [
        'SignalRequestMessage',
        'RequestorDescription',
        'RequestorPositionVector',
        'SignalRequestList',
        'SignalRequestPackage',
        'SignalRequest',
        'DeltaTime',
        'PriorityRequestType',
        'TransitVehicleOccupancy',
        'TransitVehicleStatus',
        ]
    _type_ = [
        'SignalRequestMessage',
        'RequestorDescription',
        'RequestorPositionVector',
        'SignalRequestList',
        'SignalRequestPackage',
        'SignalRequest',
        'DeltaTime',
        'PriorityRequestType',
        'TransitVehicleOccupancy',
        'TransitVehicleStatus',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SignalRequestMessage >-----#
    SignalRequestMessage = SEQ(name='SignalRequestMessage', mode=MODE_TYPE)
    _SignalRequestMessage_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _SignalRequestMessage_second = INT(name='second', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')))
    _SignalRequestMessage_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')), opt=True)
    _SignalRequestMessage_requests = SEQ_OF(name='requests', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'SignalRequestList')), opt=True)
    _SignalRequestMessage_requestor = SEQ(name='requestor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'RequestorDescription')))
    _SignalRequestMessage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalRequestMessage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SignalRequestMessage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalRequestMessage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestMessage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestMessage_regional__item__regionId._const_tab = ____SignalRequestMessage_regional__item__regionId_tab
    ___SignalRequestMessage_regional__item__regionId._const_tab_at = None
    ___SignalRequestMessage_regional__item__regionId._const_tab_id = 'id'
    ___SignalRequestMessage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalRequestMessage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestMessage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestMessage_regional__item__regExtValue._const_tab = ____SignalRequestMessage_regional__item__regExtValue_tab
    ___SignalRequestMessage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalRequestMessage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalRequestMessage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalRequestMessage_regional__item__regionId),
        ('regExtValue', ___SignalRequestMessage_regional__item__regExtValue),
        ])
    __SignalRequestMessage_regional__item_._ext = None
    _SignalRequestMessage_regional._cont = __SignalRequestMessage_regional__item_
    _SignalRequestMessage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalRequestMessage._cont = ASN1Dict([
        ('timeStamp', _SignalRequestMessage_timeStamp),
        ('second', _SignalRequestMessage_second),
        ('sequenceNumber', _SignalRequestMessage_sequenceNumber),
        ('requests', _SignalRequestMessage_requests),
        ('requestor', _SignalRequestMessage_requestor),
        ('regional', _SignalRequestMessage_regional),
        ])
    SignalRequestMessage._ext = []
    
    #-----< RequestorDescription >-----#
    RequestorDescription = SEQ(name='RequestorDescription', mode=MODE_TYPE)
    _RequestorDescription_id = CHOICE(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'VehicleID')))
    _RequestorDescription_type = SEQ(name='type', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RequestorType')), opt=True)
    _RequestorDescription_position = SEQ(name='position', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'RequestorPositionVector')), opt=True)
    _RequestorDescription_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _RequestorDescription_routeName = STR_IA5(name='routeName', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _RequestorDescription_transitStatus = BIT_STR(name='transitStatus', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'TransitVehicleStatus')), opt=True)
    _RequestorDescription_transitOccupancy = ENUM(name='transitOccupancy', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'TransitVehicleOccupancy')), opt=True)
    _RequestorDescription_transitSchedule = INT(name='transitSchedule', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'DeltaTime')), opt=True)
    _RequestorDescription_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RequestorDescription_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___RequestorDescription_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RequestorDescription_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RequestorDescription_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RequestorDescription_regional__item__regionId._const_tab = ____RequestorDescription_regional__item__regionId_tab
    ___RequestorDescription_regional__item__regionId._const_tab_at = None
    ___RequestorDescription_regional__item__regionId._const_tab_id = 'id'
    ___RequestorDescription_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____RequestorDescription_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____RequestorDescription_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RequestorDescription_regional__item__regExtValue._const_tab = ____RequestorDescription_regional__item__regExtValue_tab
    ___RequestorDescription_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RequestorDescription_regional__item__regExtValue._const_tab_id = 'Type'
    __RequestorDescription_regional__item_._cont = ASN1Dict([
        ('regionId', ___RequestorDescription_regional__item__regionId),
        ('regExtValue', ___RequestorDescription_regional__item__regExtValue),
        ])
    __RequestorDescription_regional__item_._ext = None
    _RequestorDescription_regional._cont = __RequestorDescription_regional__item_
    _RequestorDescription_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RequestorDescription._cont = ASN1Dict([
        ('id', _RequestorDescription_id),
        ('type', _RequestorDescription_type),
        ('position', _RequestorDescription_position),
        ('name', _RequestorDescription_name),
        ('routeName', _RequestorDescription_routeName),
        ('transitStatus', _RequestorDescription_transitStatus),
        ('transitOccupancy', _RequestorDescription_transitOccupancy),
        ('transitSchedule', _RequestorDescription_transitSchedule),
        ('regional', _RequestorDescription_regional),
        ])
    RequestorDescription._ext = []
    
    #-----< RequestorPositionVector >-----#
    RequestorPositionVector = SEQ(name='RequestorPositionVector', mode=MODE_TYPE)
    _RequestorPositionVector_position = SEQ(name='position', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RequestorPositionVector_heading = INT(name='heading', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Angle')), opt=True)
    _RequestorPositionVector_speed = SEQ(name='speed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TransmissionAndSpeed')), opt=True)
    RequestorPositionVector._cont = ASN1Dict([
        ('position', _RequestorPositionVector_position),
        ('heading', _RequestorPositionVector_heading),
        ('speed', _RequestorPositionVector_speed),
        ])
    RequestorPositionVector._ext = []
    
    #-----< SignalRequestList >-----#
    SignalRequestList = SEQ_OF(name='SignalRequestList', mode=MODE_TYPE)
    _SignalRequestList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SignalRequestMessage', 'SignalRequestPackage')))
    SignalRequestList._cont = _SignalRequestList__item_
    SignalRequestList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SignalRequestPackage >-----#
    SignalRequestPackage = SEQ(name='SignalRequestPackage', mode=MODE_TYPE)
    _SignalRequestPackage_request = SEQ(name='request', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'SignalRequest')))
    _SignalRequestPackage_minute = INT(name='minute', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _SignalRequestPackage_second = INT(name='second', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')), opt=True)
    _SignalRequestPackage_duration = INT(name='duration', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')), opt=True)
    _SignalRequestPackage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalRequestPackage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SignalRequestPackage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalRequestPackage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestPackage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestPackage_regional__item__regionId._const_tab = ____SignalRequestPackage_regional__item__regionId_tab
    ___SignalRequestPackage_regional__item__regionId._const_tab_at = None
    ___SignalRequestPackage_regional__item__regionId._const_tab_id = 'id'
    ___SignalRequestPackage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalRequestPackage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestPackage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestPackage_regional__item__regExtValue._const_tab = ____SignalRequestPackage_regional__item__regExtValue_tab
    ___SignalRequestPackage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalRequestPackage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalRequestPackage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalRequestPackage_regional__item__regionId),
        ('regExtValue', ___SignalRequestPackage_regional__item__regExtValue),
        ])
    __SignalRequestPackage_regional__item_._ext = None
    _SignalRequestPackage_regional._cont = __SignalRequestPackage_regional__item_
    _SignalRequestPackage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalRequestPackage._cont = ASN1Dict([
        ('request', _SignalRequestPackage_request),
        ('minute', _SignalRequestPackage_minute),
        ('second', _SignalRequestPackage_second),
        ('duration', _SignalRequestPackage_duration),
        ('regional', _SignalRequestPackage_regional),
        ])
    SignalRequestPackage._ext = []
    
    #-----< SignalRequest >-----#
    SignalRequest = SEQ(name='SignalRequest', mode=MODE_TYPE)
    _SignalRequest_id = SEQ(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionReferenceID')))
    _SignalRequest_requestID = INT(name='requestID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RequestID')))
    _SignalRequest_requestType = ENUM(name='requestType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalRequestMessage', 'PriorityRequestType')))
    _SignalRequest_inBoundLane = CHOICE(name='inBoundLane', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'IntersectionAccessPoint')))
    _SignalRequest_outBoundLane = CHOICE(name='outBoundLane', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'IntersectionAccessPoint')), opt=True)
    _SignalRequest_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalRequest_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SignalRequest_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalRequest_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequest_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequest_regional__item__regionId._const_tab = ____SignalRequest_regional__item__regionId_tab
    ___SignalRequest_regional__item__regionId._const_tab_at = None
    ___SignalRequest_regional__item__regionId._const_tab_id = 'id'
    ___SignalRequest_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalRequest_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequest_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequest_regional__item__regExtValue._const_tab = ____SignalRequest_regional__item__regExtValue_tab
    ___SignalRequest_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalRequest_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalRequest_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalRequest_regional__item__regionId),
        ('regExtValue', ___SignalRequest_regional__item__regExtValue),
        ])
    __SignalRequest_regional__item_._ext = None
    _SignalRequest_regional._cont = __SignalRequest_regional__item_
    _SignalRequest_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalRequest._cont = ASN1Dict([
        ('id', _SignalRequest_id),
        ('requestID', _SignalRequest_requestID),
        ('requestType', _SignalRequest_requestType),
        ('inBoundLane', _SignalRequest_inBoundLane),
        ('outBoundLane', _SignalRequest_outBoundLane),
        ('regional', _SignalRequest_regional),
        ])
    SignalRequest._ext = []
    
    #-----< DeltaTime >-----#
    DeltaTime = INT(name='DeltaTime', mode=MODE_TYPE)
    DeltaTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-122, ub=121)], ev=None, er=[])
    
    #-----< PriorityRequestType >-----#
    PriorityRequestType = ENUM(name='PriorityRequestType', mode=MODE_TYPE)
    PriorityRequestType._cont = ASN1Dict([('priorityRequestTypeReserved', 0), ('priorityRequest', 1), ('priorityRequestUpdate', 2), ('priorityCancellation', 3)])
    PriorityRequestType._ext = []
    
    #-----< TransitVehicleOccupancy >-----#
    TransitVehicleOccupancy = ENUM(name='TransitVehicleOccupancy', mode=MODE_TYPE)
    TransitVehicleOccupancy._cont = ASN1Dict([('occupancyUnknown', 0), ('occupancyEmpty', 1), ('occupancyVeryLow', 2), ('occupancyLow', 3), ('occupancyMed', 4), ('occupancyHigh', 5), ('occupancyNearlyFull', 6), ('occupancyFull', 7)])
    TransitVehicleOccupancy._ext = None
    
    #-----< TransitVehicleStatus >-----#
    TransitVehicleStatus = BIT_STR(name='TransitVehicleStatus', mode=MODE_TYPE)
    TransitVehicleStatus._cont = ASN1Dict([('loading', 0), ('anADAuse', 1), ('aBikeLoad', 2), ('doorOpen', 3), ('charging', 4), ('atStopLine', 5)])
    TransitVehicleStatus._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    _all_ = [
        _SignalRequestMessage_timeStamp,
        _SignalRequestMessage_second,
        _SignalRequestMessage_sequenceNumber,
        _SignalRequestMessage_requests,
        _SignalRequestMessage_requestor,
        ____SignalRequestMessage_regional__item__regionId_tab,
        ___SignalRequestMessage_regional__item__regionId,
        ____SignalRequestMessage_regional__item__regExtValue_tab,
        ___SignalRequestMessage_regional__item__regExtValue,
        __SignalRequestMessage_regional__item_,
        _SignalRequestMessage_regional,
        SignalRequestMessage,
        _RequestorDescription_id,
        _RequestorDescription_type,
        _RequestorDescription_position,
        _RequestorDescription_name,
        _RequestorDescription_routeName,
        _RequestorDescription_transitStatus,
        _RequestorDescription_transitOccupancy,
        _RequestorDescription_transitSchedule,
        ____RequestorDescription_regional__item__regionId_tab,
        ___RequestorDescription_regional__item__regionId,
        ____RequestorDescription_regional__item__regExtValue_tab,
        ___RequestorDescription_regional__item__regExtValue,
        __RequestorDescription_regional__item_,
        _RequestorDescription_regional,
        RequestorDescription,
        _RequestorPositionVector_position,
        _RequestorPositionVector_heading,
        _RequestorPositionVector_speed,
        RequestorPositionVector,
        _SignalRequestList__item_,
        SignalRequestList,
        _SignalRequestPackage_request,
        _SignalRequestPackage_minute,
        _SignalRequestPackage_second,
        _SignalRequestPackage_duration,
        ____SignalRequestPackage_regional__item__regionId_tab,
        ___SignalRequestPackage_regional__item__regionId,
        ____SignalRequestPackage_regional__item__regExtValue_tab,
        ___SignalRequestPackage_regional__item__regExtValue,
        __SignalRequestPackage_regional__item_,
        _SignalRequestPackage_regional,
        SignalRequestPackage,
        _SignalRequest_id,
        _SignalRequest_requestID,
        _SignalRequest_requestType,
        _SignalRequest_inBoundLane,
        _SignalRequest_outBoundLane,
        ____SignalRequest_regional__item__regionId_tab,
        ___SignalRequest_regional__item__regionId,
        ____SignalRequest_regional__item__regExtValue_tab,
        ___SignalRequest_regional__item__regExtValue,
        __SignalRequest_regional__item_,
        _SignalRequest_regional,
        SignalRequest,
        DeltaTime,
        PriorityRequestType,
        TransitVehicleOccupancy,
        TransitVehicleStatus,
    ]

class SignalStatusMessage:

    _name_  = 'SignalStatusMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 19, 1, 1]
    
    _obj_ = [
        'SignalStatusMessage',
        'SignalRequesterInfo',
        'SignalStatusList',
        'SignalStatusPackageList',
        'SignalStatusPackage',
        'SignalStatus',
        ]
    _type_ = [
        'SignalStatusMessage',
        'SignalRequesterInfo',
        'SignalStatusList',
        'SignalStatusPackageList',
        'SignalStatusPackage',
        'SignalStatus',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SignalStatusMessage >-----#
    SignalStatusMessage = SEQ(name='SignalStatusMessage', mode=MODE_TYPE)
    _SignalStatusMessage_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _SignalStatusMessage_second = INT(name='second', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')))
    _SignalStatusMessage_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')), opt=True)
    _SignalStatusMessage_status = SEQ_OF(name='status', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalStatusMessage', 'SignalStatusList')))
    _SignalStatusMessage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalStatusMessage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SignalStatusMessage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalStatusMessage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatusMessage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatusMessage_regional__item__regionId._const_tab = ____SignalStatusMessage_regional__item__regionId_tab
    ___SignalStatusMessage_regional__item__regionId._const_tab_at = None
    ___SignalStatusMessage_regional__item__regionId._const_tab_id = 'id'
    ___SignalStatusMessage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalStatusMessage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatusMessage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatusMessage_regional__item__regExtValue._const_tab = ____SignalStatusMessage_regional__item__regExtValue_tab
    ___SignalStatusMessage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalStatusMessage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalStatusMessage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalStatusMessage_regional__item__regionId),
        ('regExtValue', ___SignalStatusMessage_regional__item__regExtValue),
        ])
    __SignalStatusMessage_regional__item_._ext = None
    _SignalStatusMessage_regional._cont = __SignalStatusMessage_regional__item_
    _SignalStatusMessage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalStatusMessage._cont = ASN1Dict([
        ('timeStamp', _SignalStatusMessage_timeStamp),
        ('second', _SignalStatusMessage_second),
        ('sequenceNumber', _SignalStatusMessage_sequenceNumber),
        ('status', _SignalStatusMessage_status),
        ('regional', _SignalStatusMessage_regional),
        ])
    SignalStatusMessage._ext = []
    
    #-----< SignalRequesterInfo >-----#
    SignalRequesterInfo = SEQ(name='SignalRequesterInfo', mode=MODE_TYPE)
    _SignalRequesterInfo_id = CHOICE(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'VehicleID')))
    _SignalRequesterInfo_request = INT(name='request', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RequestID')))
    _SignalRequesterInfo_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _SignalRequesterInfo_role = ENUM(name='role', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BasicVehicleRole')), opt=True)
    _SignalRequesterInfo_typeData = SEQ(name='typeData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RequestorType')), opt=True)
    SignalRequesterInfo._cont = ASN1Dict([
        ('id', _SignalRequesterInfo_id),
        ('request', _SignalRequesterInfo_request),
        ('sequenceNumber', _SignalRequesterInfo_sequenceNumber),
        ('role', _SignalRequesterInfo_role),
        ('typeData', _SignalRequesterInfo_typeData),
        ])
    SignalRequesterInfo._ext = []
    
    #-----< SignalStatusList >-----#
    SignalStatusList = SEQ_OF(name='SignalStatusList', mode=MODE_TYPE)
    _SignalStatusList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SignalStatusMessage', 'SignalStatus')))
    SignalStatusList._cont = _SignalStatusList__item_
    SignalStatusList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SignalStatusPackageList >-----#
    SignalStatusPackageList = SEQ_OF(name='SignalStatusPackageList', mode=MODE_TYPE)
    _SignalStatusPackageList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SignalStatusMessage', 'SignalStatusPackage')))
    SignalStatusPackageList._cont = _SignalStatusPackageList__item_
    SignalStatusPackageList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SignalStatusPackage >-----#
    SignalStatusPackage = SEQ(name='SignalStatusPackage', mode=MODE_TYPE)
    _SignalStatusPackage_requester = SEQ(name='requester', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalStatusMessage', 'SignalRequesterInfo')), opt=True)
    _SignalStatusPackage_inboundOn = CHOICE(name='inboundOn', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'IntersectionAccessPoint')))
    _SignalStatusPackage_outboundOn = CHOICE(name='outboundOn', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'IntersectionAccessPoint')), opt=True)
    _SignalStatusPackage_minute = INT(name='minute', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _SignalStatusPackage_second = INT(name='second', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')), opt=True)
    _SignalStatusPackage_duration = INT(name='duration', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DSecond')), opt=True)
    _SignalStatusPackage_status = ENUM(name='status', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PrioritizationResponseStatus')))
    _SignalStatusPackage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalStatusPackage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SignalStatusPackage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalStatusPackage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatusPackage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatusPackage_regional__item__regionId._const_tab = ____SignalStatusPackage_regional__item__regionId_tab
    ___SignalStatusPackage_regional__item__regionId._const_tab_at = None
    ___SignalStatusPackage_regional__item__regionId._const_tab_id = 'id'
    ___SignalStatusPackage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalStatusPackage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatusPackage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatusPackage_regional__item__regExtValue._const_tab = ____SignalStatusPackage_regional__item__regExtValue_tab
    ___SignalStatusPackage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalStatusPackage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalStatusPackage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalStatusPackage_regional__item__regionId),
        ('regExtValue', ___SignalStatusPackage_regional__item__regExtValue),
        ])
    __SignalStatusPackage_regional__item_._ext = None
    _SignalStatusPackage_regional._cont = __SignalStatusPackage_regional__item_
    _SignalStatusPackage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalStatusPackage._cont = ASN1Dict([
        ('requester', _SignalStatusPackage_requester),
        ('inboundOn', _SignalStatusPackage_inboundOn),
        ('outboundOn', _SignalStatusPackage_outboundOn),
        ('minute', _SignalStatusPackage_minute),
        ('second', _SignalStatusPackage_second),
        ('duration', _SignalStatusPackage_duration),
        ('status', _SignalStatusPackage_status),
        ('regional', _SignalStatusPackage_regional),
        ])
    SignalStatusPackage._ext = []
    
    #-----< SignalStatus >-----#
    SignalStatus = SEQ(name='SignalStatus', mode=MODE_TYPE)
    _SignalStatus_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _SignalStatus_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionReferenceID')))
    _SignalStatus_sigStatus = SEQ_OF(name='sigStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SignalStatusMessage', 'SignalStatusPackageList')))
    _SignalStatus_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalStatus_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___SignalStatus_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalStatus_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatus_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatus_regional__item__regionId._const_tab = ____SignalStatus_regional__item__regionId_tab
    ___SignalStatus_regional__item__regionId._const_tab_at = None
    ___SignalStatus_regional__item__regionId._const_tab_id = 'id'
    ___SignalStatus_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalStatus_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatus_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatus_regional__item__regExtValue._const_tab = ____SignalStatus_regional__item__regExtValue_tab
    ___SignalStatus_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalStatus_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalStatus_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalStatus_regional__item__regionId),
        ('regExtValue', ___SignalStatus_regional__item__regExtValue),
        ])
    __SignalStatus_regional__item_._ext = None
    _SignalStatus_regional._cont = __SignalStatus_regional__item_
    _SignalStatus_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalStatus._cont = ASN1Dict([
        ('sequenceNumber', _SignalStatus_sequenceNumber),
        ('id', _SignalStatus_id),
        ('sigStatus', _SignalStatus_sigStatus),
        ('regional', _SignalStatus_regional),
        ])
    SignalStatus._ext = []
    
    _all_ = [
        _SignalStatusMessage_timeStamp,
        _SignalStatusMessage_second,
        _SignalStatusMessage_sequenceNumber,
        _SignalStatusMessage_status,
        ____SignalStatusMessage_regional__item__regionId_tab,
        ___SignalStatusMessage_regional__item__regionId,
        ____SignalStatusMessage_regional__item__regExtValue_tab,
        ___SignalStatusMessage_regional__item__regExtValue,
        __SignalStatusMessage_regional__item_,
        _SignalStatusMessage_regional,
        SignalStatusMessage,
        _SignalRequesterInfo_id,
        _SignalRequesterInfo_request,
        _SignalRequesterInfo_sequenceNumber,
        _SignalRequesterInfo_role,
        _SignalRequesterInfo_typeData,
        SignalRequesterInfo,
        _SignalStatusList__item_,
        SignalStatusList,
        _SignalStatusPackageList__item_,
        SignalStatusPackageList,
        _SignalStatusPackage_requester,
        _SignalStatusPackage_inboundOn,
        _SignalStatusPackage_outboundOn,
        _SignalStatusPackage_minute,
        _SignalStatusPackage_second,
        _SignalStatusPackage_duration,
        _SignalStatusPackage_status,
        ____SignalStatusPackage_regional__item__regionId_tab,
        ___SignalStatusPackage_regional__item__regionId,
        ____SignalStatusPackage_regional__item__regExtValue_tab,
        ___SignalStatusPackage_regional__item__regExtValue,
        __SignalStatusPackage_regional__item_,
        _SignalStatusPackage_regional,
        SignalStatusPackage,
        _SignalStatus_sequenceNumber,
        _SignalStatus_id,
        _SignalStatus_sigStatus,
        ____SignalStatus_regional__item__regionId_tab,
        ___SignalStatus_regional__item__regionId,
        ____SignalStatus_regional__item__regExtValue_tab,
        ___SignalStatus_regional__item__regExtValue,
        __SignalStatus_regional__item_,
        _SignalStatus_regional,
        SignalStatus,
    ]

class TrafficSignalPhaseAndTiming:

    _name_  = 'TrafficSignalPhaseAndTiming'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 45, 1, 1]
    
    _obj_ = [
        'TrafficSignalPhaseAndTiming',
        ]
    _type_ = [
        'TrafficSignalPhaseAndTiming',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TrafficSignalPhaseAndTiming >-----#
    TrafficSignalPhaseAndTiming = NULL(name='TrafficSignalPhaseAndTiming', mode=MODE_TYPE)
    
    _all_ = [
        TrafficSignalPhaseAndTiming,
    ]

class TestMessage00:

    _name_  = 'TestMessage00'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 22, 1, 1]
    
    _obj_ = [
        'TestMessage00',
        ]
    _type_ = [
        'TestMessage00',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage00 >-----#
    TestMessage00 = SEQ(name='TestMessage00', mode=MODE_TYPE)
    _TestMessage00_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage00_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage00_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage00_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage00_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage00_regional_regionId._const_tab = ___TestMessage00_regional_regionId_tab
    __TestMessage00_regional_regionId._const_tab_at = None
    __TestMessage00_regional_regionId._const_tab_id = 'id'
    __TestMessage00_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage00_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage00_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage00_regional_regExtValue._const_tab = ___TestMessage00_regional_regExtValue_tab
    __TestMessage00_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage00_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage00_regional._cont = ASN1Dict([
        ('regionId', __TestMessage00_regional_regionId),
        ('regExtValue', __TestMessage00_regional_regExtValue),
        ])
    _TestMessage00_regional._ext = None
    TestMessage00._cont = ASN1Dict([
        ('header', _TestMessage00_header),
        ('regional', _TestMessage00_regional),
        ])
    TestMessage00._ext = []
    
    _all_ = [
        _TestMessage00_header,
        ___TestMessage00_regional_regionId_tab,
        __TestMessage00_regional_regionId,
        ___TestMessage00_regional_regExtValue_tab,
        __TestMessage00_regional_regExtValue,
        _TestMessage00_regional,
        TestMessage00,
    ]

class TestMessage01:

    _name_  = 'TestMessage01'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 23, 1, 1]
    
    _obj_ = [
        'TestMessage01',
        ]
    _type_ = [
        'TestMessage01',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage01 >-----#
    TestMessage01 = SEQ(name='TestMessage01', mode=MODE_TYPE)
    _TestMessage01_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage01_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage01_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage01_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage01_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage01_regional_regionId._const_tab = ___TestMessage01_regional_regionId_tab
    __TestMessage01_regional_regionId._const_tab_at = None
    __TestMessage01_regional_regionId._const_tab_id = 'id'
    __TestMessage01_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage01_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage01_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage01_regional_regExtValue._const_tab = ___TestMessage01_regional_regExtValue_tab
    __TestMessage01_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage01_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage01_regional._cont = ASN1Dict([
        ('regionId', __TestMessage01_regional_regionId),
        ('regExtValue', __TestMessage01_regional_regExtValue),
        ])
    _TestMessage01_regional._ext = None
    TestMessage01._cont = ASN1Dict([
        ('header', _TestMessage01_header),
        ('regional', _TestMessage01_regional),
        ])
    TestMessage01._ext = []
    
    _all_ = [
        _TestMessage01_header,
        ___TestMessage01_regional_regionId_tab,
        __TestMessage01_regional_regionId,
        ___TestMessage01_regional_regExtValue_tab,
        __TestMessage01_regional_regExtValue,
        _TestMessage01_regional,
        TestMessage01,
    ]

class TestMessage02:

    _name_  = 'TestMessage02'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 24, 1, 1]
    
    _obj_ = [
        'TestMessage02',
        ]
    _type_ = [
        'TestMessage02',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage02 >-----#
    TestMessage02 = SEQ(name='TestMessage02', mode=MODE_TYPE)
    _TestMessage02_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage02_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage02_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage02_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage02_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage02_regional_regionId._const_tab = ___TestMessage02_regional_regionId_tab
    __TestMessage02_regional_regionId._const_tab_at = None
    __TestMessage02_regional_regionId._const_tab_id = 'id'
    __TestMessage02_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage02_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage02_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage02_regional_regExtValue._const_tab = ___TestMessage02_regional_regExtValue_tab
    __TestMessage02_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage02_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage02_regional._cont = ASN1Dict([
        ('regionId', __TestMessage02_regional_regionId),
        ('regExtValue', __TestMessage02_regional_regExtValue),
        ])
    _TestMessage02_regional._ext = None
    TestMessage02._cont = ASN1Dict([
        ('header', _TestMessage02_header),
        ('regional', _TestMessage02_regional),
        ])
    TestMessage02._ext = []
    
    _all_ = [
        _TestMessage02_header,
        ___TestMessage02_regional_regionId_tab,
        __TestMessage02_regional_regionId,
        ___TestMessage02_regional_regExtValue_tab,
        __TestMessage02_regional_regExtValue,
        _TestMessage02_regional,
        TestMessage02,
    ]

class TestMessage03:

    _name_  = 'TestMessage03'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 25, 1, 1]
    
    _obj_ = [
        'TestMessage03',
        ]
    _type_ = [
        'TestMessage03',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage03 >-----#
    TestMessage03 = SEQ(name='TestMessage03', mode=MODE_TYPE)
    _TestMessage03_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage03_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage03_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage03_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage03_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage03_regional_regionId._const_tab = ___TestMessage03_regional_regionId_tab
    __TestMessage03_regional_regionId._const_tab_at = None
    __TestMessage03_regional_regionId._const_tab_id = 'id'
    __TestMessage03_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage03_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage03_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage03_regional_regExtValue._const_tab = ___TestMessage03_regional_regExtValue_tab
    __TestMessage03_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage03_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage03_regional._cont = ASN1Dict([
        ('regionId', __TestMessage03_regional_regionId),
        ('regExtValue', __TestMessage03_regional_regExtValue),
        ])
    _TestMessage03_regional._ext = None
    TestMessage03._cont = ASN1Dict([
        ('header', _TestMessage03_header),
        ('regional', _TestMessage03_regional),
        ])
    TestMessage03._ext = []
    
    _all_ = [
        _TestMessage03_header,
        ___TestMessage03_regional_regionId_tab,
        __TestMessage03_regional_regionId,
        ___TestMessage03_regional_regExtValue_tab,
        __TestMessage03_regional_regExtValue,
        _TestMessage03_regional,
        TestMessage03,
    ]

class TestMessage04:

    _name_  = 'TestMessage04'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 26, 1, 1]
    
    _obj_ = [
        'TestMessage04',
        ]
    _type_ = [
        'TestMessage04',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage04 >-----#
    TestMessage04 = SEQ(name='TestMessage04', mode=MODE_TYPE)
    _TestMessage04_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage04_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage04_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage04_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage04_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage04_regional_regionId._const_tab = ___TestMessage04_regional_regionId_tab
    __TestMessage04_regional_regionId._const_tab_at = None
    __TestMessage04_regional_regionId._const_tab_id = 'id'
    __TestMessage04_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage04_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage04_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage04_regional_regExtValue._const_tab = ___TestMessage04_regional_regExtValue_tab
    __TestMessage04_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage04_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage04_regional._cont = ASN1Dict([
        ('regionId', __TestMessage04_regional_regionId),
        ('regExtValue', __TestMessage04_regional_regExtValue),
        ])
    _TestMessage04_regional._ext = None
    TestMessage04._cont = ASN1Dict([
        ('header', _TestMessage04_header),
        ('regional', _TestMessage04_regional),
        ])
    TestMessage04._ext = []
    
    _all_ = [
        _TestMessage04_header,
        ___TestMessage04_regional_regionId_tab,
        __TestMessage04_regional_regionId,
        ___TestMessage04_regional_regExtValue_tab,
        __TestMessage04_regional_regExtValue,
        _TestMessage04_regional,
        TestMessage04,
    ]

class TestMessage05:

    _name_  = 'TestMessage05'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 27, 1, 1]
    
    _obj_ = [
        'TestMessage05',
        ]
    _type_ = [
        'TestMessage05',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage05 >-----#
    TestMessage05 = SEQ(name='TestMessage05', mode=MODE_TYPE)
    _TestMessage05_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage05_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage05_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage05_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage05_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage05_regional_regionId._const_tab = ___TestMessage05_regional_regionId_tab
    __TestMessage05_regional_regionId._const_tab_at = None
    __TestMessage05_regional_regionId._const_tab_id = 'id'
    __TestMessage05_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage05_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage05_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage05_regional_regExtValue._const_tab = ___TestMessage05_regional_regExtValue_tab
    __TestMessage05_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage05_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage05_regional._cont = ASN1Dict([
        ('regionId', __TestMessage05_regional_regionId),
        ('regExtValue', __TestMessage05_regional_regExtValue),
        ])
    _TestMessage05_regional._ext = None
    TestMessage05._cont = ASN1Dict([
        ('header', _TestMessage05_header),
        ('regional', _TestMessage05_regional),
        ])
    TestMessage05._ext = []
    
    _all_ = [
        _TestMessage05_header,
        ___TestMessage05_regional_regionId_tab,
        __TestMessage05_regional_regionId,
        ___TestMessage05_regional_regExtValue_tab,
        __TestMessage05_regional_regExtValue,
        _TestMessage05_regional,
        TestMessage05,
    ]

class TestMessage06:

    _name_  = 'TestMessage06'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 28, 1, 1]
    
    _obj_ = [
        'TestMessage06',
        ]
    _type_ = [
        'TestMessage06',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage06 >-----#
    TestMessage06 = SEQ(name='TestMessage06', mode=MODE_TYPE)
    _TestMessage06_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage06_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage06_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage06_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage06_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage06_regional_regionId._const_tab = ___TestMessage06_regional_regionId_tab
    __TestMessage06_regional_regionId._const_tab_at = None
    __TestMessage06_regional_regionId._const_tab_id = 'id'
    __TestMessage06_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage06_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage06_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage06_regional_regExtValue._const_tab = ___TestMessage06_regional_regExtValue_tab
    __TestMessage06_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage06_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage06_regional._cont = ASN1Dict([
        ('regionId', __TestMessage06_regional_regionId),
        ('regExtValue', __TestMessage06_regional_regExtValue),
        ])
    _TestMessage06_regional._ext = None
    TestMessage06._cont = ASN1Dict([
        ('header', _TestMessage06_header),
        ('regional', _TestMessage06_regional),
        ])
    TestMessage06._ext = []
    
    _all_ = [
        _TestMessage06_header,
        ___TestMessage06_regional_regionId_tab,
        __TestMessage06_regional_regionId,
        ___TestMessage06_regional_regExtValue_tab,
        __TestMessage06_regional_regExtValue,
        _TestMessage06_regional,
        TestMessage06,
    ]

class TestMessage07:

    _name_  = 'TestMessage07'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 29, 1, 1]
    
    _obj_ = [
        'TestMessage07',
        ]
    _type_ = [
        'TestMessage07',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage07 >-----#
    TestMessage07 = SEQ(name='TestMessage07', mode=MODE_TYPE)
    _TestMessage07_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage07_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage07_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage07_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage07_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage07_regional_regionId._const_tab = ___TestMessage07_regional_regionId_tab
    __TestMessage07_regional_regionId._const_tab_at = None
    __TestMessage07_regional_regionId._const_tab_id = 'id'
    __TestMessage07_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage07_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage07_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage07_regional_regExtValue._const_tab = ___TestMessage07_regional_regExtValue_tab
    __TestMessage07_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage07_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage07_regional._cont = ASN1Dict([
        ('regionId', __TestMessage07_regional_regionId),
        ('regExtValue', __TestMessage07_regional_regExtValue),
        ])
    _TestMessage07_regional._ext = None
    TestMessage07._cont = ASN1Dict([
        ('header', _TestMessage07_header),
        ('regional', _TestMessage07_regional),
        ])
    TestMessage07._ext = []
    
    _all_ = [
        _TestMessage07_header,
        ___TestMessage07_regional_regionId_tab,
        __TestMessage07_regional_regionId,
        ___TestMessage07_regional_regExtValue_tab,
        __TestMessage07_regional_regExtValue,
        _TestMessage07_regional,
        TestMessage07,
    ]

class TestMessage08:

    _name_  = 'TestMessage08'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 30, 1, 1]
    
    _obj_ = [
        'TestMessage08',
        ]
    _type_ = [
        'TestMessage08',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage08 >-----#
    TestMessage08 = SEQ(name='TestMessage08', mode=MODE_TYPE)
    _TestMessage08_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage08_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage08_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage08_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage08_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage08_regional_regionId._const_tab = ___TestMessage08_regional_regionId_tab
    __TestMessage08_regional_regionId._const_tab_at = None
    __TestMessage08_regional_regionId._const_tab_id = 'id'
    __TestMessage08_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage08_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage08_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage08_regional_regExtValue._const_tab = ___TestMessage08_regional_regExtValue_tab
    __TestMessage08_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage08_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage08_regional._cont = ASN1Dict([
        ('regionId', __TestMessage08_regional_regionId),
        ('regExtValue', __TestMessage08_regional_regExtValue),
        ])
    _TestMessage08_regional._ext = None
    TestMessage08._cont = ASN1Dict([
        ('header', _TestMessage08_header),
        ('regional', _TestMessage08_regional),
        ])
    TestMessage08._ext = []
    
    _all_ = [
        _TestMessage08_header,
        ___TestMessage08_regional_regionId_tab,
        __TestMessage08_regional_regionId,
        ___TestMessage08_regional_regExtValue_tab,
        __TestMessage08_regional_regExtValue,
        _TestMessage08_regional,
        TestMessage08,
    ]

class TestMessage09:

    _name_  = 'TestMessage09'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 31, 1, 1]
    
    _obj_ = [
        'TestMessage09',
        ]
    _type_ = [
        'TestMessage09',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage09 >-----#
    TestMessage09 = SEQ(name='TestMessage09', mode=MODE_TYPE)
    _TestMessage09_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage09_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage09_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage09_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage09_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage09_regional_regionId._const_tab = ___TestMessage09_regional_regionId_tab
    __TestMessage09_regional_regionId._const_tab_at = None
    __TestMessage09_regional_regionId._const_tab_id = 'id'
    __TestMessage09_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage09_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage09_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage09_regional_regExtValue._const_tab = ___TestMessage09_regional_regExtValue_tab
    __TestMessage09_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage09_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage09_regional._cont = ASN1Dict([
        ('regionId', __TestMessage09_regional_regionId),
        ('regExtValue', __TestMessage09_regional_regExtValue),
        ])
    _TestMessage09_regional._ext = None
    TestMessage09._cont = ASN1Dict([
        ('header', _TestMessage09_header),
        ('regional', _TestMessage09_regional),
        ])
    TestMessage09._ext = []
    
    _all_ = [
        _TestMessage09_header,
        ___TestMessage09_regional_regionId_tab,
        __TestMessage09_regional_regionId,
        ___TestMessage09_regional_regExtValue_tab,
        __TestMessage09_regional_regExtValue,
        _TestMessage09_regional,
        TestMessage09,
    ]

class TestMessage10:

    _name_  = 'TestMessage10'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 32, 1, 1]
    
    _obj_ = [
        'TestMessage10',
        ]
    _type_ = [
        'TestMessage10',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage10 >-----#
    TestMessage10 = SEQ(name='TestMessage10', mode=MODE_TYPE)
    _TestMessage10_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage10_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage10_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage10_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage10_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage10_regional_regionId._const_tab = ___TestMessage10_regional_regionId_tab
    __TestMessage10_regional_regionId._const_tab_at = None
    __TestMessage10_regional_regionId._const_tab_id = 'id'
    __TestMessage10_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage10_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage10_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage10_regional_regExtValue._const_tab = ___TestMessage10_regional_regExtValue_tab
    __TestMessage10_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage10_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage10_regional._cont = ASN1Dict([
        ('regionId', __TestMessage10_regional_regionId),
        ('regExtValue', __TestMessage10_regional_regExtValue),
        ])
    _TestMessage10_regional._ext = None
    TestMessage10._cont = ASN1Dict([
        ('header', _TestMessage10_header),
        ('regional', _TestMessage10_regional),
        ])
    TestMessage10._ext = []
    
    _all_ = [
        _TestMessage10_header,
        ___TestMessage10_regional_regionId_tab,
        __TestMessage10_regional_regionId,
        ___TestMessage10_regional_regExtValue_tab,
        __TestMessage10_regional_regExtValue,
        _TestMessage10_regional,
        TestMessage10,
    ]

class TestMessage11:

    _name_  = 'TestMessage11'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 33, 1, 1]
    
    _obj_ = [
        'TestMessage11',
        ]
    _type_ = [
        'TestMessage11',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage11 >-----#
    TestMessage11 = SEQ(name='TestMessage11', mode=MODE_TYPE)
    _TestMessage11_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage11_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage11_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage11_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage11_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage11_regional_regionId._const_tab = ___TestMessage11_regional_regionId_tab
    __TestMessage11_regional_regionId._const_tab_at = None
    __TestMessage11_regional_regionId._const_tab_id = 'id'
    __TestMessage11_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage11_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage11_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage11_regional_regExtValue._const_tab = ___TestMessage11_regional_regExtValue_tab
    __TestMessage11_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage11_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage11_regional._cont = ASN1Dict([
        ('regionId', __TestMessage11_regional_regionId),
        ('regExtValue', __TestMessage11_regional_regExtValue),
        ])
    _TestMessage11_regional._ext = None
    TestMessage11._cont = ASN1Dict([
        ('header', _TestMessage11_header),
        ('regional', _TestMessage11_regional),
        ])
    TestMessage11._ext = []
    
    _all_ = [
        _TestMessage11_header,
        ___TestMessage11_regional_regionId_tab,
        __TestMessage11_regional_regionId,
        ___TestMessage11_regional_regExtValue_tab,
        __TestMessage11_regional_regExtValue,
        _TestMessage11_regional,
        TestMessage11,
    ]

class TestMessage12:

    _name_  = 'TestMessage12'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 34, 1, 1]
    
    _obj_ = [
        'TestMessage12',
        ]
    _type_ = [
        'TestMessage12',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage12 >-----#
    TestMessage12 = SEQ(name='TestMessage12', mode=MODE_TYPE)
    _TestMessage12_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage12_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage12_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage12_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage12_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage12_regional_regionId._const_tab = ___TestMessage12_regional_regionId_tab
    __TestMessage12_regional_regionId._const_tab_at = None
    __TestMessage12_regional_regionId._const_tab_id = 'id'
    __TestMessage12_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage12_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage12_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage12_regional_regExtValue._const_tab = ___TestMessage12_regional_regExtValue_tab
    __TestMessage12_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage12_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage12_regional._cont = ASN1Dict([
        ('regionId', __TestMessage12_regional_regionId),
        ('regExtValue', __TestMessage12_regional_regExtValue),
        ])
    _TestMessage12_regional._ext = None
    TestMessage12._cont = ASN1Dict([
        ('header', _TestMessage12_header),
        ('regional', _TestMessage12_regional),
        ])
    TestMessage12._ext = []
    
    _all_ = [
        _TestMessage12_header,
        ___TestMessage12_regional_regionId_tab,
        __TestMessage12_regional_regionId,
        ___TestMessage12_regional_regExtValue_tab,
        __TestMessage12_regional_regExtValue,
        _TestMessage12_regional,
        TestMessage12,
    ]

class TestMessage13:

    _name_  = 'TestMessage13'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 35, 1, 1]
    
    _obj_ = [
        'TestMessage13',
        ]
    _type_ = [
        'TestMessage13',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage13 >-----#
    TestMessage13 = SEQ(name='TestMessage13', mode=MODE_TYPE)
    _TestMessage13_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage13_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage13_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage13_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage13_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage13_regional_regionId._const_tab = ___TestMessage13_regional_regionId_tab
    __TestMessage13_regional_regionId._const_tab_at = None
    __TestMessage13_regional_regionId._const_tab_id = 'id'
    __TestMessage13_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage13_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage13_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage13_regional_regExtValue._const_tab = ___TestMessage13_regional_regExtValue_tab
    __TestMessage13_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage13_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage13_regional._cont = ASN1Dict([
        ('regionId', __TestMessage13_regional_regionId),
        ('regExtValue', __TestMessage13_regional_regExtValue),
        ])
    _TestMessage13_regional._ext = None
    TestMessage13._cont = ASN1Dict([
        ('header', _TestMessage13_header),
        ('regional', _TestMessage13_regional),
        ])
    TestMessage13._ext = []
    
    _all_ = [
        _TestMessage13_header,
        ___TestMessage13_regional_regionId_tab,
        __TestMessage13_regional_regionId,
        ___TestMessage13_regional_regExtValue_tab,
        __TestMessage13_regional_regExtValue,
        _TestMessage13_regional,
        TestMessage13,
    ]

class TestMessage14:

    _name_  = 'TestMessage14'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 36, 1, 1]
    
    _obj_ = [
        'TestMessage14',
        ]
    _type_ = [
        'TestMessage14',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage14 >-----#
    TestMessage14 = SEQ(name='TestMessage14', mode=MODE_TYPE)
    _TestMessage14_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage14_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage14_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage14_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage14_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage14_regional_regionId._const_tab = ___TestMessage14_regional_regionId_tab
    __TestMessage14_regional_regionId._const_tab_at = None
    __TestMessage14_regional_regionId._const_tab_id = 'id'
    __TestMessage14_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage14_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage14_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage14_regional_regExtValue._const_tab = ___TestMessage14_regional_regExtValue_tab
    __TestMessage14_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage14_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage14_regional._cont = ASN1Dict([
        ('regionId', __TestMessage14_regional_regionId),
        ('regExtValue', __TestMessage14_regional_regExtValue),
        ])
    _TestMessage14_regional._ext = None
    TestMessage14._cont = ASN1Dict([
        ('header', _TestMessage14_header),
        ('regional', _TestMessage14_regional),
        ])
    TestMessage14._ext = []
    
    _all_ = [
        _TestMessage14_header,
        ___TestMessage14_regional_regionId_tab,
        __TestMessage14_regional_regionId,
        ___TestMessage14_regional_regExtValue_tab,
        __TestMessage14_regional_regExtValue,
        _TestMessage14_regional,
        TestMessage14,
    ]

class TestMessage15:

    _name_  = 'TestMessage15'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 37, 1, 1]
    
    _obj_ = [
        'TestMessage15',
        ]
    _type_ = [
        'TestMessage15',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TestMessage15 >-----#
    TestMessage15 = SEQ(name='TestMessage15', mode=MODE_TYPE)
    _TestMessage15_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Header')), opt=True)
    _TestMessage15_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')), opt=True)
    __TestMessage15_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___TestMessage15_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage15_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage15_regional_regionId._const_tab = ___TestMessage15_regional_regionId_tab
    __TestMessage15_regional_regionId._const_tab_at = None
    __TestMessage15_regional_regionId._const_tab_id = 'id'
    __TestMessage15_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___TestMessage15_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___TestMessage15_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TestMessage15_regional_regExtValue._const_tab = ___TestMessage15_regional_regExtValue_tab
    __TestMessage15_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __TestMessage15_regional_regExtValue._const_tab_id = 'Type'
    _TestMessage15_regional._cont = ASN1Dict([
        ('regionId', __TestMessage15_regional_regionId),
        ('regExtValue', __TestMessage15_regional_regExtValue),
        ])
    _TestMessage15_regional._ext = None
    TestMessage15._cont = ASN1Dict([
        ('header', _TestMessage15_header),
        ('regional', _TestMessage15_regional),
        ])
    TestMessage15._ext = []
    
    _all_ = [
        _TestMessage15_header,
        ___TestMessage15_regional_regionId_tab,
        __TestMessage15_regional_regionId,
        ___TestMessage15_regional_regExtValue_tab,
        __TestMessage15_regional_regExtValue,
        _TestMessage15_regional,
        TestMessage15,
    ]

class TrafficLightStatusMessage:

    _name_  = 'TrafficLightStatusMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 50, 1, 1]
    
    _obj_ = [
        'TrafficLightStatusMessage',
        'TrafficLightStatusList',
        'TrafficLightStatus',
        'ActuatedInterval',
        'ConsecutiveTrafficLight',
        'PedestrianCall',
        'PermissiveNonProtected',
        'ReservedBit',
        'TimeInSecond-B16',
        'TimeInSecond-B8',
        'TrafficLightControllerStatus',
        'TrafficLightDirectionCode',
        'TrafficLightID',
        'TrafficLightIntervalType',
        'TrafficLightOperationStatus',
        'TrafficLightingStatus',
        'TrafficLightType',
        ]
    _type_ = [
        'TrafficLightStatusMessage',
        'TrafficLightStatusList',
        'TrafficLightStatus',
        'ActuatedInterval',
        'ConsecutiveTrafficLight',
        'PedestrianCall',
        'PermissiveNonProtected',
        'ReservedBit',
        'TimeInSecond-B16',
        'TimeInSecond-B8',
        'TrafficLightControllerStatus',
        'TrafficLightDirectionCode',
        'TrafficLightID',
        'TrafficLightIntervalType',
        'TrafficLightOperationStatus',
        'TrafficLightingStatus',
        'TrafficLightType',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TrafficLightStatusMessage >-----#
    TrafficLightStatusMessage = SEQ(name='TrafficLightStatusMessage', mode=MODE_TYPE)
    _TrafficLightStatusMessage_trafficLightID = CHOICE(name='trafficLightID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightID')))
    _TrafficLightStatusMessage_long = INT(name='long', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Longitude')), opt=True)
    _TrafficLightStatusMessage_lat = INT(name='lat', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Latitude')), opt=True)
    _TrafficLightStatusMessage_operationStatus = BIT_STR(name='operationStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightOperationStatus')))
    _TrafficLightStatusMessage_controllerStatus = BIT_STR(name='controllerStatus', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightControllerStatus')))
    _TrafficLightStatusMessage_cyclecounter = INT(name='cyclecounter', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TimeInSecond-B16')))
    _TrafficLightStatusMessage_cycletime = INT(name='cycletime', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TimeInSecond-B16')))
    _TrafficLightStatusMessage_currentTime = SEQ(name='currentTime', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _TrafficLightStatusMessage_trafficLightStatus = SEQ_OF(name='trafficLightStatus', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightStatusList')))
    TrafficLightStatusMessage._cont = ASN1Dict([
        ('trafficLightID', _TrafficLightStatusMessage_trafficLightID),
        ('long', _TrafficLightStatusMessage_long),
        ('lat', _TrafficLightStatusMessage_lat),
        ('operationStatus', _TrafficLightStatusMessage_operationStatus),
        ('controllerStatus', _TrafficLightStatusMessage_controllerStatus),
        ('cyclecounter', _TrafficLightStatusMessage_cyclecounter),
        ('cycletime', _TrafficLightStatusMessage_cycletime),
        ('currentTime', _TrafficLightStatusMessage_currentTime),
        ('trafficLightStatus', _TrafficLightStatusMessage_trafficLightStatus),
        ])
    TrafficLightStatusMessage._ext = []
    
    #-----< TrafficLightStatusList >-----#
    TrafficLightStatusList = SEQ_OF(name='TrafficLightStatusList', mode=MODE_TYPE)
    _TrafficLightStatusList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightStatus')))
    TrafficLightStatusList._cont = _TrafficLightStatusList__item_
    TrafficLightStatusList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< TrafficLightStatus >-----#
    TrafficLightStatus = SEQ(name='TrafficLightStatus', mode=MODE_TYPE)
    _TrafficLightStatus_trafficLightType = ENUM(name='trafficLightType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightType')))
    _TrafficLightStatus_consecutiveTrafficLight = ENUM(name='consecutiveTrafficLight', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'ConsecutiveTrafficLight')))
    _TrafficLightStatus_trafficLightIntervalType = ENUM(name='trafficLightIntervalType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightIntervalType')))
    _TrafficLightStatus_pedestrianCall = BOOL(name='pedestrianCall', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'PedestrianCall')))
    _TrafficLightStatus_actuatedinterval = BOOL(name='actuatedinterval', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'ActuatedInterval')))
    _TrafficLightStatus_permissiveNonProtected = ENUM(name='permissiveNonProtected', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'PermissiveNonProtected')))
    _TrafficLightStatus_lightingStatus = ENUM(name='lightingStatus', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightingStatus')))
    _TrafficLightStatus_maxIntervalLength = INT(name='maxIntervalLength', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TimeInSecond-B8')))
    _TrafficLightStatus_remainingTime = INT(name='remainingTime', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TimeInSecond-B8')))
    _TrafficLightStatus_directionCode = INT(name='directionCode', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'TrafficLightDirectionCode')))
    _TrafficLightStatus_reserved = BOOL(name='reserved', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TrafficLightStatusMessage', 'ReservedBit')))
    TrafficLightStatus._cont = ASN1Dict([
        ('trafficLightType', _TrafficLightStatus_trafficLightType),
        ('consecutiveTrafficLight', _TrafficLightStatus_consecutiveTrafficLight),
        ('trafficLightIntervalType', _TrafficLightStatus_trafficLightIntervalType),
        ('pedestrianCall', _TrafficLightStatus_pedestrianCall),
        ('actuatedinterval', _TrafficLightStatus_actuatedinterval),
        ('permissiveNonProtected', _TrafficLightStatus_permissiveNonProtected),
        ('lightingStatus', _TrafficLightStatus_lightingStatus),
        ('maxIntervalLength', _TrafficLightStatus_maxIntervalLength),
        ('remainingTime', _TrafficLightStatus_remainingTime),
        ('directionCode', _TrafficLightStatus_directionCode),
        ('reserved', _TrafficLightStatus_reserved),
        ])
    TrafficLightStatus._ext = []
    
    #-----< ActuatedInterval >-----#
    ActuatedInterval = BOOL(name='ActuatedInterval', mode=MODE_TYPE)
    
    #-----< ConsecutiveTrafficLight >-----#
    ConsecutiveTrafficLight = ENUM(name='ConsecutiveTrafficLight', mode=MODE_TYPE)
    ConsecutiveTrafficLight._cont = ASN1Dict([('none', 0), ('first', 1), ('second', 2)])
    ConsecutiveTrafficLight._ext = []
    
    #-----< PedestrianCall >-----#
    PedestrianCall = BOOL(name='PedestrianCall', mode=MODE_TYPE)
    
    #-----< PermissiveNonProtected >-----#
    PermissiveNonProtected = ENUM(name='PermissiveNonProtected', mode=MODE_TYPE)
    PermissiveNonProtected._cont = ASN1Dict([('none', 0), ('permissive', 1)])
    PermissiveNonProtected._ext = []
    
    #-----< ReservedBit >-----#
    ReservedBit = BOOL(name='ReservedBit', mode=MODE_TYPE)
    
    #-----< TimeInSecond-B16 >-----#
    TimeInSecond_B16 = INT(name='TimeInSecond-B16', mode=MODE_TYPE)
    TimeInSecond_B16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< TimeInSecond-B8 >-----#
    TimeInSecond_B8 = INT(name='TimeInSecond-B8', mode=MODE_TYPE)
    TimeInSecond_B8._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< TrafficLightControllerStatus >-----#
    TrafficLightControllerStatus = BIT_STR(name='TrafficLightControllerStatus', mode=MODE_TYPE)
    TrafficLightControllerStatus._cont = ASN1Dict([('conflict', 0), ('center-comm-error', 1), ('scu-comm-error', 2), ('reserved1', 3), ('reserved2', 4), ('reserved3', 5), ('reserved4', 6), ('reserved5', 7)])
    TrafficLightControllerStatus._const_sz = ASN1Set(rv=[8], rr=[], ev=[], er=[])
    
    #-----< TrafficLightDirectionCode >-----#
    TrafficLightDirectionCode = INT(name='TrafficLightDirectionCode', mode=MODE_TYPE)
    TrafficLightDirectionCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    
    #-----< TrafficLightID >-----#
    TrafficLightID = CHOICE(name='TrafficLightID', mode=MODE_TYPE)
    _TrafficLightID_id = INT(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TrafficLightID_oid = OID(name='oid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    TrafficLightID._cont = ASN1Dict([
        ('id', _TrafficLightID_id),
        ('oid', _TrafficLightID_oid),
        ])
    TrafficLightID._ext = None
    
    #-----< TrafficLightIntervalType >-----#
    TrafficLightIntervalType = ENUM(name='TrafficLightIntervalType', mode=MODE_TYPE)
    TrafficLightIntervalType._cont = ASN1Dict([('static', 0), ('variable', 1)])
    TrafficLightIntervalType._ext = []
    
    #-----< TrafficLightOperationStatus >-----#
    TrafficLightOperationStatus = BIT_STR(name='TrafficLightOperationStatus', mode=MODE_TYPE)
    TrafficLightOperationStatus._cont = ASN1Dict([('manual', 0), ('flashing', 1), ('off', 2), ('actuated', 3), ('transition', 4), ('priority', 5), ('holding-phase', 6), ('reserved', 7)])
    TrafficLightOperationStatus._const_sz = ASN1Set(rv=[8], rr=[], ev=[], er=[])
    
    #-----< TrafficLightingStatus >-----#
    TrafficLightingStatus = ENUM(name='TrafficLightingStatus', mode=MODE_TYPE)
    TrafficLightingStatus._cont = ASN1Dict([('off', 0), ('red-on', 1), ('yellow-on', 2), ('green-on', 3), ('red-blinking', 4), ('yellow-blinking', 5), ('green-blinking', 6)])
    TrafficLightingStatus._ext = []
    
    #-----< TrafficLightType >-----#
    TrafficLightType = ENUM(name='TrafficLightType', mode=MODE_TYPE)
    TrafficLightType._cont = ASN1Dict([('reserved', 0), ('straight', 1), ('left-turn', 2), ('pedestrian', 3), ('bicycle', 4), ('right-turn', 5), ('bus', 6), ('u-turn', 7)])
    TrafficLightType._ext = []
    
    _all_ = [
        _TrafficLightStatusMessage_trafficLightID,
        _TrafficLightStatusMessage_long,
        _TrafficLightStatusMessage_lat,
        _TrafficLightStatusMessage_operationStatus,
        _TrafficLightStatusMessage_controllerStatus,
        _TrafficLightStatusMessage_cyclecounter,
        _TrafficLightStatusMessage_cycletime,
        _TrafficLightStatusMessage_currentTime,
        _TrafficLightStatusMessage_trafficLightStatus,
        TrafficLightStatusMessage,
        _TrafficLightStatusList__item_,
        TrafficLightStatusList,
        _TrafficLightStatus_trafficLightType,
        _TrafficLightStatus_consecutiveTrafficLight,
        _TrafficLightStatus_trafficLightIntervalType,
        _TrafficLightStatus_pedestrianCall,
        _TrafficLightStatus_actuatedinterval,
        _TrafficLightStatus_permissiveNonProtected,
        _TrafficLightStatus_lightingStatus,
        _TrafficLightStatus_maxIntervalLength,
        _TrafficLightStatus_remainingTime,
        _TrafficLightStatus_directionCode,
        _TrafficLightStatus_reserved,
        TrafficLightStatus,
        ActuatedInterval,
        ConsecutiveTrafficLight,
        PedestrianCall,
        PermissiveNonProtected,
        ReservedBit,
        TimeInSecond_B16,
        TimeInSecond_B8,
        TrafficLightControllerStatus,
        TrafficLightDirectionCode,
        _TrafficLightID_id,
        _TrafficLightID_oid,
        TrafficLightID,
        TrafficLightIntervalType,
        TrafficLightOperationStatus,
        TrafficLightingStatus,
        TrafficLightType,
    ]

class TravelerInformation:

    _name_  = 'TravelerInformation'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2735, 0, 1, 20, 1, 1]
    
    _obj_ = [
        'TravelerInformation',
        'Circle',
        'GeographicalPath',
        'GeometricProjection',
        'ExitService',
        'GenericSignage',
        'SpeedLimit',
        'WorkZone',
        'Node-LL-24B',
        'Node-LL-28B',
        'Node-LL-32B',
        'Node-LL-36B',
        'Node-LL-44B',
        'Node-LL-48B',
        'NodeAttributeLLList',
        'NodeAttributeSetLL',
        'NodeListLL',
        'NodeLL',
        'NodeOffsetPointLL',
        'NodeSetLL',
        'OffsetSystem',
        'RegionList',
        'RegionOffsets',
        'RegionPointSet',
        'RoadSignID',
        'SegmentAttributeLLList',
        'ShapePointSet',
        'TravelerDataFrameList',
        'TravelerDataFrame',
        'TravelerDataFrameNewPartIIIContent',
        'ValidRegion',
        'DirectionOfUse',
        'DistanceUnits',
        'ITIStextPhrase',
        'MinutesDuration',
        'MsgCRC',
        'MUTCDCode',
        'NodeAttributeLL',
        'OffsetLL-B12',
        'OffsetLL-B14',
        'OffsetLL-B16',
        'OffsetLL-B22',
        'OffsetLL-B24',
        'Radius-B12',
        'SegmentAttributeLL',
        'SignPriority',
        'TravelerInfoType',
        'UniqueMSGID',
        'URL-Base',
        'URL-Short',
        'Zoom',
        ]
    _type_ = [
        'TravelerInformation',
        'Circle',
        'GeographicalPath',
        'GeometricProjection',
        'ExitService',
        'GenericSignage',
        'SpeedLimit',
        'WorkZone',
        'Node-LL-24B',
        'Node-LL-28B',
        'Node-LL-32B',
        'Node-LL-36B',
        'Node-LL-44B',
        'Node-LL-48B',
        'NodeAttributeLLList',
        'NodeAttributeSetLL',
        'NodeListLL',
        'NodeLL',
        'NodeOffsetPointLL',
        'NodeSetLL',
        'OffsetSystem',
        'RegionList',
        'RegionOffsets',
        'RegionPointSet',
        'RoadSignID',
        'SegmentAttributeLLList',
        'ShapePointSet',
        'TravelerDataFrameList',
        'TravelerDataFrame',
        'TravelerDataFrameNewPartIIIContent',
        'ValidRegion',
        'DirectionOfUse',
        'DistanceUnits',
        'ITIStextPhrase',
        'MinutesDuration',
        'MsgCRC',
        'MUTCDCode',
        'NodeAttributeLL',
        'OffsetLL-B12',
        'OffsetLL-B14',
        'OffsetLL-B16',
        'OffsetLL-B22',
        'OffsetLL-B24',
        'Radius-B12',
        'SegmentAttributeLL',
        'SignPriority',
        'TravelerInfoType',
        'UniqueMSGID',
        'URL-Base',
        'URL-Short',
        'Zoom',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TravelerInformation >-----#
    TravelerInformation = SEQ(name='TravelerInformation', mode=MODE_TYPE)
    _TravelerInformation_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _TravelerInformation_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')), opt=True)
    _TravelerInformation_packetID = OCT_STR(name='packetID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'UniqueMSGID')), opt=True)
    _TravelerInformation_urlB = STR_IA5(name='urlB', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'URL-Base')), opt=True)
    _TravelerInformation_dataFrames = SEQ_OF(name='dataFrames', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'TravelerDataFrameList')))
    _TravelerInformation_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TravelerInformation_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___TravelerInformation_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____TravelerInformation_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____TravelerInformation_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___TravelerInformation_regional__item__regionId._const_tab = ____TravelerInformation_regional__item__regionId_tab
    ___TravelerInformation_regional__item__regionId._const_tab_at = None
    ___TravelerInformation_regional__item__regionId._const_tab_id = 'id'
    ___TravelerInformation_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____TravelerInformation_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____TravelerInformation_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___TravelerInformation_regional__item__regExtValue._const_tab = ____TravelerInformation_regional__item__regExtValue_tab
    ___TravelerInformation_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___TravelerInformation_regional__item__regExtValue._const_tab_id = 'Type'
    __TravelerInformation_regional__item_._cont = ASN1Dict([
        ('regionId', ___TravelerInformation_regional__item__regionId),
        ('regExtValue', ___TravelerInformation_regional__item__regExtValue),
        ])
    __TravelerInformation_regional__item_._ext = None
    _TravelerInformation_regional._cont = __TravelerInformation_regional__item_
    _TravelerInformation_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    TravelerInformation._cont = ASN1Dict([
        ('msgCnt', _TravelerInformation_msgCnt),
        ('timeStamp', _TravelerInformation_timeStamp),
        ('packetID', _TravelerInformation_packetID),
        ('urlB', _TravelerInformation_urlB),
        ('dataFrames', _TravelerInformation_dataFrames),
        ('regional', _TravelerInformation_regional),
        ])
    TravelerInformation._ext = []
    
    #-----< Circle >-----#
    Circle = SEQ(name='Circle', mode=MODE_TYPE)
    _Circle_center = SEQ(name='center', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _Circle_radius = INT(name='radius', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Radius-B12')))
    _Circle_units = ENUM(name='units', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'DistanceUnits')))
    Circle._cont = ASN1Dict([
        ('center', _Circle_center),
        ('radius', _Circle_radius),
        ('units', _Circle_units),
        ])
    Circle._ext = None
    
    #-----< GeographicalPath >-----#
    GeographicalPath = SEQ(name='GeographicalPath', mode=MODE_TYPE)
    _GeographicalPath_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _GeographicalPath_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadSegmentReferenceID')), opt=True)
    _GeographicalPath_anchor = SEQ(name='anchor', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')), opt=True)
    _GeographicalPath_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneWidth')), opt=True)
    _GeographicalPath_directionality = ENUM(name='directionality', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'DirectionOfUse')), opt=True)
    _GeographicalPath_closedPath = BOOL(name='closedPath', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GeographicalPath_direction = BIT_STR(name='direction', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingSlice')), opt=True)
    _GeographicalPath_description = CHOICE(name='description', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    __GeographicalPath_description_path = SEQ(name='path', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetSystem')))
    __GeographicalPath_description_geometry = SEQ(name='geometry', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'GeometricProjection')))
    __GeographicalPath_description_oldRegion = SEQ(name='oldRegion', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ValidRegion')))
    _GeographicalPath_description._cont = ASN1Dict([
        ('path', __GeographicalPath_description_path),
        ('geometry', __GeographicalPath_description_geometry),
        ('oldRegion', __GeographicalPath_description_oldRegion),
        ])
    _GeographicalPath_description._ext = []
    _GeographicalPath_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GeographicalPath_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___GeographicalPath_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____GeographicalPath_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____GeographicalPath_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___GeographicalPath_regional__item__regionId._const_tab = ____GeographicalPath_regional__item__regionId_tab
    ___GeographicalPath_regional__item__regionId._const_tab_at = None
    ___GeographicalPath_regional__item__regionId._const_tab_id = 'id'
    ___GeographicalPath_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____GeographicalPath_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____GeographicalPath_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___GeographicalPath_regional__item__regExtValue._const_tab = ____GeographicalPath_regional__item__regExtValue_tab
    ___GeographicalPath_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___GeographicalPath_regional__item__regExtValue._const_tab_id = 'Type'
    __GeographicalPath_regional__item_._cont = ASN1Dict([
        ('regionId', ___GeographicalPath_regional__item__regionId),
        ('regExtValue', ___GeographicalPath_regional__item__regExtValue),
        ])
    __GeographicalPath_regional__item_._ext = None
    _GeographicalPath_regional._cont = __GeographicalPath_regional__item_
    _GeographicalPath_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    GeographicalPath._cont = ASN1Dict([
        ('name', _GeographicalPath_name),
        ('id', _GeographicalPath_id),
        ('anchor', _GeographicalPath_anchor),
        ('laneWidth', _GeographicalPath_laneWidth),
        ('directionality', _GeographicalPath_directionality),
        ('closedPath', _GeographicalPath_closedPath),
        ('direction', _GeographicalPath_direction),
        ('description', _GeographicalPath_description),
        ('regional', _GeographicalPath_regional),
        ])
    GeographicalPath._ext = []
    
    #-----< GeometricProjection >-----#
    GeometricProjection = SEQ(name='GeometricProjection', mode=MODE_TYPE)
    _GeometricProjection_direction = BIT_STR(name='direction', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingSlice')))
    _GeometricProjection_extent = ENUM(name='extent', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Extent')), opt=True)
    _GeometricProjection_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneWidth')), opt=True)
    _GeometricProjection_circle = SEQ(name='circle', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Circle')))
    _GeometricProjection_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GeometricProjection_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___GeometricProjection_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____GeometricProjection_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____GeometricProjection_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___GeometricProjection_regional__item__regionId._const_tab = ____GeometricProjection_regional__item__regionId_tab
    ___GeometricProjection_regional__item__regionId._const_tab_at = None
    ___GeometricProjection_regional__item__regionId._const_tab_id = 'id'
    ___GeometricProjection_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____GeometricProjection_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____GeometricProjection_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___GeometricProjection_regional__item__regExtValue._const_tab = ____GeometricProjection_regional__item__regExtValue_tab
    ___GeometricProjection_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___GeometricProjection_regional__item__regExtValue._const_tab_id = 'Type'
    __GeometricProjection_regional__item_._cont = ASN1Dict([
        ('regionId', ___GeometricProjection_regional__item__regionId),
        ('regExtValue', ___GeometricProjection_regional__item__regExtValue),
        ])
    __GeometricProjection_regional__item_._ext = None
    _GeometricProjection_regional._cont = __GeometricProjection_regional__item_
    _GeometricProjection_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    GeometricProjection._cont = ASN1Dict([
        ('direction', _GeometricProjection_direction),
        ('extent', _GeometricProjection_extent),
        ('laneWidth', _GeometricProjection_laneWidth),
        ('circle', _GeometricProjection_circle),
        ('regional', _GeometricProjection_regional),
        ])
    GeometricProjection._ext = []
    
    #-----< ExitService >-----#
    ExitService = SEQ_OF(name='ExitService', mode=MODE_TYPE)
    _ExitService__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __ExitService__item__item = CHOICE(name='item', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___ExitService__item__item_itis = INT(name='itis', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    ___ExitService__item__item_text = STR_IA5(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ITIStextPhrase')))
    __ExitService__item__item._cont = ASN1Dict([
        ('itis', ___ExitService__item__item_itis),
        ('text', ___ExitService__item__item_text),
        ])
    __ExitService__item__item._ext = None
    _ExitService__item_._cont = ASN1Dict([
        ('item', __ExitService__item__item),
        ])
    _ExitService__item_._ext = None
    ExitService._cont = _ExitService__item_
    ExitService._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< GenericSignage >-----#
    GenericSignage = SEQ_OF(name='GenericSignage', mode=MODE_TYPE)
    _GenericSignage__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __GenericSignage__item__item = CHOICE(name='item', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___GenericSignage__item__item_itis = INT(name='itis', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    ___GenericSignage__item__item_text = STR_IA5(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ITIStextPhrase')))
    __GenericSignage__item__item._cont = ASN1Dict([
        ('itis', ___GenericSignage__item__item_itis),
        ('text', ___GenericSignage__item__item_text),
        ])
    __GenericSignage__item__item._ext = None
    _GenericSignage__item_._cont = ASN1Dict([
        ('item', __GenericSignage__item__item),
        ])
    _GenericSignage__item_._ext = None
    GenericSignage._cont = _GenericSignage__item_
    GenericSignage._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< SpeedLimit >-----#
    SpeedLimit = SEQ_OF(name='SpeedLimit', mode=MODE_TYPE)
    _SpeedLimit__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __SpeedLimit__item__item = CHOICE(name='item', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___SpeedLimit__item__item_itis = INT(name='itis', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    ___SpeedLimit__item__item_text = STR_IA5(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ITIStextPhrase')))
    __SpeedLimit__item__item._cont = ASN1Dict([
        ('itis', ___SpeedLimit__item__item_itis),
        ('text', ___SpeedLimit__item__item_text),
        ])
    __SpeedLimit__item__item._ext = None
    _SpeedLimit__item_._cont = ASN1Dict([
        ('item', __SpeedLimit__item__item),
        ])
    _SpeedLimit__item_._ext = None
    SpeedLimit._cont = _SpeedLimit__item_
    SpeedLimit._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< WorkZone >-----#
    WorkZone = SEQ_OF(name='WorkZone', mode=MODE_TYPE)
    _WorkZone__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __WorkZone__item__item = CHOICE(name='item', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___WorkZone__item__item_itis = INT(name='itis', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')))
    ___WorkZone__item__item_text = STR_IA5(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ITIStextPhrase')))
    __WorkZone__item__item._cont = ASN1Dict([
        ('itis', ___WorkZone__item__item_itis),
        ('text', ___WorkZone__item__item_text),
        ])
    __WorkZone__item__item._ext = None
    _WorkZone__item_._cont = ASN1Dict([
        ('item', __WorkZone__item__item),
        ])
    _WorkZone__item_._ext = None
    WorkZone._cont = _WorkZone__item_
    WorkZone._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< Node-LL-24B >-----#
    Node_LL_24B = SEQ(name='Node-LL-24B', mode=MODE_TYPE)
    _Node_LL_24B_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B12')))
    _Node_LL_24B_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B12')))
    Node_LL_24B._cont = ASN1Dict([
        ('lon', _Node_LL_24B_lon),
        ('lat', _Node_LL_24B_lat),
        ])
    Node_LL_24B._ext = None
    
    #-----< Node-LL-28B >-----#
    Node_LL_28B = SEQ(name='Node-LL-28B', mode=MODE_TYPE)
    _Node_LL_28B_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B14')))
    _Node_LL_28B_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B14')))
    Node_LL_28B._cont = ASN1Dict([
        ('lon', _Node_LL_28B_lon),
        ('lat', _Node_LL_28B_lat),
        ])
    Node_LL_28B._ext = None
    
    #-----< Node-LL-32B >-----#
    Node_LL_32B = SEQ(name='Node-LL-32B', mode=MODE_TYPE)
    _Node_LL_32B_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B16')))
    _Node_LL_32B_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B16')))
    Node_LL_32B._cont = ASN1Dict([
        ('lon', _Node_LL_32B_lon),
        ('lat', _Node_LL_32B_lat),
        ])
    Node_LL_32B._ext = None
    
    #-----< Node-LL-36B >-----#
    Node_LL_36B = SEQ(name='Node-LL-36B', mode=MODE_TYPE)
    _Node_LL_36B_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'OffsetLL-B18')))
    _Node_LL_36B_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'OffsetLL-B18')))
    Node_LL_36B._cont = ASN1Dict([
        ('lon', _Node_LL_36B_lon),
        ('lat', _Node_LL_36B_lat),
        ])
    Node_LL_36B._ext = None
    
    #-----< Node-LL-44B >-----#
    Node_LL_44B = SEQ(name='Node-LL-44B', mode=MODE_TYPE)
    _Node_LL_44B_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B22')))
    _Node_LL_44B_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B22')))
    Node_LL_44B._cont = ASN1Dict([
        ('lon', _Node_LL_44B_lon),
        ('lat', _Node_LL_44B_lat),
        ])
    Node_LL_44B._ext = None
    
    #-----< Node-LL-48B >-----#
    Node_LL_48B = SEQ(name='Node-LL-48B', mode=MODE_TYPE)
    _Node_LL_48B_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B24')))
    _Node_LL_48B_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B24')))
    Node_LL_48B._cont = ASN1Dict([
        ('lon', _Node_LL_48B_lon),
        ('lat', _Node_LL_48B_lat),
        ])
    Node_LL_48B._ext = None
    
    #-----< NodeAttributeLLList >-----#
    NodeAttributeLLList = SEQ_OF(name='NodeAttributeLLList', mode=MODE_TYPE)
    _NodeAttributeLLList__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'NodeAttributeLL')))
    NodeAttributeLLList._cont = _NodeAttributeLLList__item_
    NodeAttributeLLList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< NodeAttributeSetLL >-----#
    NodeAttributeSetLL = SEQ(name='NodeAttributeSetLL', mode=MODE_TYPE)
    _NodeAttributeSetLL_localNode = SEQ_OF(name='localNode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'NodeAttributeLLList')), opt=True)
    _NodeAttributeSetLL_disabled = SEQ_OF(name='disabled', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'SegmentAttributeLLList')), opt=True)
    _NodeAttributeSetLL_enabled = SEQ_OF(name='enabled', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'SegmentAttributeLLList')), opt=True)
    _NodeAttributeSetLL_data = SEQ_OF(name='data', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneDataAttributeList')), opt=True)
    _NodeAttributeSetLL_dWidth = INT(name='dWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B10')), opt=True)
    _NodeAttributeSetLL_dElevation = INT(name='dElevation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Offset-B10')), opt=True)
    _NodeAttributeSetLL_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __NodeAttributeSetLL_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'RegionalExtension')))
    ___NodeAttributeSetLL_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____NodeAttributeSetLL_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____NodeAttributeSetLL_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___NodeAttributeSetLL_regional__item__regionId._const_tab = ____NodeAttributeSetLL_regional__item__regionId_tab
    ___NodeAttributeSetLL_regional__item__regionId._const_tab_at = None
    ___NodeAttributeSetLL_regional__item__regionId._const_tab_id = 'id'
    ___NodeAttributeSetLL_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____NodeAttributeSetLL_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ____NodeAttributeSetLL_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___NodeAttributeSetLL_regional__item__regExtValue._const_tab = ____NodeAttributeSetLL_regional__item__regExtValue_tab
    ___NodeAttributeSetLL_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___NodeAttributeSetLL_regional__item__regExtValue._const_tab_id = 'Type'
    __NodeAttributeSetLL_regional__item_._cont = ASN1Dict([
        ('regionId', ___NodeAttributeSetLL_regional__item__regionId),
        ('regExtValue', ___NodeAttributeSetLL_regional__item__regExtValue),
        ])
    __NodeAttributeSetLL_regional__item_._ext = None
    _NodeAttributeSetLL_regional._cont = __NodeAttributeSetLL_regional__item_
    _NodeAttributeSetLL_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    NodeAttributeSetLL._cont = ASN1Dict([
        ('localNode', _NodeAttributeSetLL_localNode),
        ('disabled', _NodeAttributeSetLL_disabled),
        ('enabled', _NodeAttributeSetLL_enabled),
        ('data', _NodeAttributeSetLL_data),
        ('dWidth', _NodeAttributeSetLL_dWidth),
        ('dElevation', _NodeAttributeSetLL_dElevation),
        ('regional', _NodeAttributeSetLL_regional),
        ])
    NodeAttributeSetLL._ext = []
    
    #-----< NodeListLL >-----#
    NodeListLL = CHOICE(name='NodeListLL', mode=MODE_TYPE)
    _NodeListLL_nodes = SEQ_OF(name='nodes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'NodeSetLL')))
    NodeListLL._cont = ASN1Dict([
        ('nodes', _NodeListLL_nodes),
        ])
    NodeListLL._ext = []
    
    #-----< NodeLL >-----#
    NodeLL = SEQ(name='NodeLL', mode=MODE_TYPE)
    _NodeLL_delta = CHOICE(name='delta', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TravelerInformation', 'NodeOffsetPointLL')))
    _NodeLL_attributes = SEQ(name='attributes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'NodeAttributeSetLL')), opt=True)
    NodeLL._cont = ASN1Dict([
        ('delta', _NodeLL_delta),
        ('attributes', _NodeLL_attributes),
        ])
    NodeLL._ext = []
    
    #-----< NodeOffsetPointLL >-----#
    NodeOffsetPointLL = CHOICE(name='NodeOffsetPointLL', mode=MODE_TYPE)
    _NodeOffsetPointLL_node_LL1 = SEQ(name='node-LL1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Node-LL-24B')))
    _NodeOffsetPointLL_node_LL2 = SEQ(name='node-LL2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Node-LL-28B')))
    _NodeOffsetPointLL_node_LL3 = SEQ(name='node-LL3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Node-LL-32B')))
    _NodeOffsetPointLL_node_LL4 = SEQ(name='node-LL4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Node-LL-36B')))
    _NodeOffsetPointLL_node_LL5 = SEQ(name='node-LL5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Node-LL-44B')))
    _NodeOffsetPointLL_node_LL6 = SEQ(name='node-LL6', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Node-LL-48B')))
    _NodeOffsetPointLL_node_LatLon = SEQ(name='node-LatLon', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Node-LLmD-64b')))
    _NodeOffsetPointLL_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegionalExtension')))
    __NodeOffsetPointLL_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___NodeOffsetPointLL_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___NodeOffsetPointLL_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __NodeOffsetPointLL_regional_regionId._const_tab = ___NodeOffsetPointLL_regional_regionId_tab
    __NodeOffsetPointLL_regional_regionId._const_tab_at = None
    __NodeOffsetPointLL_regional_regionId._const_tab_id = 'id'
    __NodeOffsetPointLL_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('Common', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___NodeOffsetPointLL_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('Common', 'REG-EXT-ID-AND-TYPE')))
    ___NodeOffsetPointLL_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __NodeOffsetPointLL_regional_regExtValue._const_tab = ___NodeOffsetPointLL_regional_regExtValue_tab
    __NodeOffsetPointLL_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __NodeOffsetPointLL_regional_regExtValue._const_tab_id = 'Type'
    _NodeOffsetPointLL_regional._cont = ASN1Dict([
        ('regionId', __NodeOffsetPointLL_regional_regionId),
        ('regExtValue', __NodeOffsetPointLL_regional_regExtValue),
        ])
    _NodeOffsetPointLL_regional._ext = None
    NodeOffsetPointLL._cont = ASN1Dict([
        ('node-LL1', _NodeOffsetPointLL_node_LL1),
        ('node-LL2', _NodeOffsetPointLL_node_LL2),
        ('node-LL3', _NodeOffsetPointLL_node_LL3),
        ('node-LL4', _NodeOffsetPointLL_node_LL4),
        ('node-LL5', _NodeOffsetPointLL_node_LL5),
        ('node-LL6', _NodeOffsetPointLL_node_LL6),
        ('node-LatLon', _NodeOffsetPointLL_node_LatLon),
        ('regional', _NodeOffsetPointLL_regional),
        ])
    NodeOffsetPointLL._ext = None
    
    #-----< NodeSetLL >-----#
    NodeSetLL = SEQ_OF(name='NodeSetLL', mode=MODE_TYPE)
    _NodeSetLL__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'NodeLL')))
    NodeSetLL._cont = _NodeSetLL__item_
    NodeSetLL._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=63)], ev=None, er=[])
    
    #-----< OffsetSystem >-----#
    OffsetSystem = SEQ(name='OffsetSystem', mode=MODE_TYPE)
    _OffsetSystem_scale = INT(name='scale', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Zoom')), opt=True)
    _OffsetSystem_offset = CHOICE(name='offset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __OffsetSystem_offset_xy = CHOICE(name='xy', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'NodeListXY')))
    __OffsetSystem_offset_ll = CHOICE(name='ll', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TravelerInformation', 'NodeListLL')))
    _OffsetSystem_offset._cont = ASN1Dict([
        ('xy', __OffsetSystem_offset_xy),
        ('ll', __OffsetSystem_offset_ll),
        ])
    _OffsetSystem_offset._ext = None
    OffsetSystem._cont = ASN1Dict([
        ('scale', _OffsetSystem_scale),
        ('offset', _OffsetSystem_offset),
        ])
    OffsetSystem._ext = None
    
    #-----< RegionList >-----#
    RegionList = SEQ_OF(name='RegionList', mode=MODE_TYPE)
    _RegionList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'RegionOffsets')))
    RegionList._cont = _RegionList__item_
    RegionList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    
    #-----< RegionOffsets >-----#
    RegionOffsets = SEQ(name='RegionOffsets', mode=MODE_TYPE)
    _RegionOffsets_xOffset = INT(name='xOffset', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B16')))
    _RegionOffsets_yOffset = INT(name='yOffset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B16')))
    _RegionOffsets_zOffset = INT(name='zOffset', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'OffsetLL-B16')), opt=True)
    RegionOffsets._cont = ASN1Dict([
        ('xOffset', _RegionOffsets_xOffset),
        ('yOffset', _RegionOffsets_yOffset),
        ('zOffset', _RegionOffsets_zOffset),
        ])
    RegionOffsets._ext = None
    
    #-----< RegionPointSet >-----#
    RegionPointSet = SEQ(name='RegionPointSet', mode=MODE_TYPE)
    _RegionPointSet_anchor = SEQ(name='anchor', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')), opt=True)
    _RegionPointSet_scale = INT(name='scale', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Zoom')), opt=True)
    _RegionPointSet_nodeList = SEQ_OF(name='nodeList', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'RegionList')))
    RegionPointSet._cont = ASN1Dict([
        ('anchor', _RegionPointSet_anchor),
        ('scale', _RegionPointSet_scale),
        ('nodeList', _RegionPointSet_nodeList),
        ])
    RegionPointSet._ext = []
    
    #-----< RoadSignID >-----#
    RoadSignID = SEQ(name='RoadSignID', mode=MODE_TYPE)
    _RoadSignID_position = SEQ(name='position', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RoadSignID_viewAngle = BIT_STR(name='viewAngle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingSlice')))
    _RoadSignID_mutcdCode = ENUM(name='mutcdCode', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'MUTCDCode')), opt=True)
    _RoadSignID_crc = OCT_STR(name='crc', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'MsgCRC')), opt=True)
    RoadSignID._cont = ASN1Dict([
        ('position', _RoadSignID_position),
        ('viewAngle', _RoadSignID_viewAngle),
        ('mutcdCode', _RoadSignID_mutcdCode),
        ('crc', _RoadSignID_crc),
        ])
    RoadSignID._ext = None
    
    #-----< SegmentAttributeLLList >-----#
    SegmentAttributeLLList = SEQ_OF(name='SegmentAttributeLLList', mode=MODE_TYPE)
    _SegmentAttributeLLList__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'SegmentAttributeLL')))
    SegmentAttributeLLList._cont = _SegmentAttributeLLList__item_
    SegmentAttributeLLList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< ShapePointSet >-----#
    ShapePointSet = SEQ(name='ShapePointSet', mode=MODE_TYPE)
    _ShapePointSet_anchor = SEQ(name='anchor', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')), opt=True)
    _ShapePointSet_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneWidth')), opt=True)
    _ShapePointSet_directionality = ENUM(name='directionality', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'DirectionOfUse')), opt=True)
    _ShapePointSet_nodeList = CHOICE(name='nodeList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'NodeListXY')))
    ShapePointSet._cont = ASN1Dict([
        ('anchor', _ShapePointSet_anchor),
        ('laneWidth', _ShapePointSet_laneWidth),
        ('directionality', _ShapePointSet_directionality),
        ('nodeList', _ShapePointSet_nodeList),
        ])
    ShapePointSet._ext = []
    
    #-----< TravelerDataFrameList >-----#
    TravelerDataFrameList = SEQ_OF(name='TravelerDataFrameList', mode=MODE_TYPE)
    _TravelerDataFrameList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'TravelerDataFrame')))
    TravelerDataFrameList._cont = _TravelerDataFrameList__item_
    TravelerDataFrameList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< TravelerDataFrame >-----#
    TravelerDataFrame = SEQ(name='TravelerDataFrame', mode=MODE_TYPE)
    _TravelerDataFrame_doNotUse1 = INT(name='doNotUse1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SSPindex')))
    _TravelerDataFrame_frameType = ENUM(name='frameType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'TravelerInfoType')))
    _TravelerDataFrame_msgId = CHOICE(name='msgId', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __TravelerDataFrame_msgId_furtherInfoID = OCT_STR(name='furtherInfoID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FurtherInfoID')))
    __TravelerDataFrame_msgId_roadSignID = SEQ(name='roadSignID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'RoadSignID')))
    _TravelerDataFrame_msgId._cont = ASN1Dict([
        ('furtherInfoID', __TravelerDataFrame_msgId_furtherInfoID),
        ('roadSignID', __TravelerDataFrame_msgId_roadSignID),
        ])
    _TravelerDataFrame_msgId._ext = None
    _TravelerDataFrame_startYear = INT(name='startYear', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DYear')), opt=True)
    _TravelerDataFrame_startTime = INT(name='startTime', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MinuteOfTheYear')))
    _TravelerDataFrame_durationTime = INT(name='durationTime', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'MinutesDuration')))
    _TravelerDataFrame_priority = INT(name='priority', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'SignPriority')))
    _TravelerDataFrame_doNotUse2 = INT(name='doNotUse2', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SSPindex')))
    _TravelerDataFrame_regions = SEQ_OF(name='regions', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TravelerDataFrame_regions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TravelerInformation', 'GeographicalPath')))
    _TravelerDataFrame_regions._cont = __TravelerDataFrame_regions__item_
    _TravelerDataFrame_regions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _TravelerDataFrame_doNotUse3 = INT(name='doNotUse3', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SSPindex')))
    _TravelerDataFrame_doNotUse4 = INT(name='doNotUse4', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SSPindex')))
    _TravelerDataFrame_content = CHOICE(name='content', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __TravelerDataFrame_content_advisory = SEQ_OF(name='advisory', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodesAndText')))
    __TravelerDataFrame_content_workZone = SEQ_OF(name='workZone', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'WorkZone')))
    __TravelerDataFrame_content_genericSign = SEQ_OF(name='genericSign', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'GenericSignage')))
    __TravelerDataFrame_content_speedLimit = SEQ_OF(name='speedLimit', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'SpeedLimit')))
    __TravelerDataFrame_content_exitService = SEQ_OF(name='exitService', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ExitService')))
    _TravelerDataFrame_content._cont = ASN1Dict([
        ('advisory', __TravelerDataFrame_content_advisory),
        ('workZone', __TravelerDataFrame_content_workZone),
        ('genericSign', __TravelerDataFrame_content_genericSign),
        ('speedLimit', __TravelerDataFrame_content_speedLimit),
        ('exitService', __TravelerDataFrame_content_exitService),
        ])
    _TravelerDataFrame_content._ext = None
    _TravelerDataFrame_url = STR_IA5(name='url', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'URL-Short')), opt=True)
    _TravelerDataFrame_contentNew = CHOICE(name='contentNew', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TravelerInformation', 'TravelerDataFrameNewPartIIIContent')))
    TravelerDataFrame._cont = ASN1Dict([
        ('doNotUse1', _TravelerDataFrame_doNotUse1),
        ('frameType', _TravelerDataFrame_frameType),
        ('msgId', _TravelerDataFrame_msgId),
        ('startYear', _TravelerDataFrame_startYear),
        ('startTime', _TravelerDataFrame_startTime),
        ('durationTime', _TravelerDataFrame_durationTime),
        ('priority', _TravelerDataFrame_priority),
        ('doNotUse2', _TravelerDataFrame_doNotUse2),
        ('regions', _TravelerDataFrame_regions),
        ('doNotUse3', _TravelerDataFrame_doNotUse3),
        ('doNotUse4', _TravelerDataFrame_doNotUse4),
        ('content', _TravelerDataFrame_content),
        ('url', _TravelerDataFrame_url),
        ('contentNew', _TravelerDataFrame_contentNew),
        ])
    TravelerDataFrame._ext = ['contentNew']
    
    #-----< TravelerDataFrameNewPartIIIContent >-----#
    TravelerDataFrameNewPartIIIContent = CHOICE(name='TravelerDataFrameNewPartIIIContent', mode=MODE_TYPE)
    _TravelerDataFrameNewPartIIIContent_frictionInfo = SEQ(name='frictionInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FrictionInformation')))
    TravelerDataFrameNewPartIIIContent._cont = ASN1Dict([
        ('frictionInfo', _TravelerDataFrameNewPartIIIContent_frictionInfo),
        ])
    TravelerDataFrameNewPartIIIContent._ext = []
    
    #-----< ValidRegion >-----#
    ValidRegion = SEQ(name='ValidRegion', mode=MODE_TYPE)
    _ValidRegion_direction = BIT_STR(name='direction', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingSlice')))
    _ValidRegion_extent = ENUM(name='extent', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Extent')), opt=True)
    _ValidRegion_area = CHOICE(name='area', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ValidRegion_area_shapePointSet = SEQ(name='shapePointSet', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ShapePointSet')))
    __ValidRegion_area_circle = SEQ(name='circle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Circle')))
    __ValidRegion_area_regionPointSet = SEQ(name='regionPointSet', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'RegionPointSet')))
    _ValidRegion_area._cont = ASN1Dict([
        ('shapePointSet', __ValidRegion_area_shapePointSet),
        ('circle', __ValidRegion_area_circle),
        ('regionPointSet', __ValidRegion_area_regionPointSet),
        ])
    _ValidRegion_area._ext = None
    ValidRegion._cont = ASN1Dict([
        ('direction', _ValidRegion_direction),
        ('extent', _ValidRegion_extent),
        ('area', _ValidRegion_area),
        ])
    ValidRegion._ext = None
    
    #-----< DirectionOfUse >-----#
    DirectionOfUse = ENUM(name='DirectionOfUse', mode=MODE_TYPE)
    DirectionOfUse._cont = ASN1Dict([('unavailable', 0), ('forward', 1), ('reverse', 2), ('both', 3)])
    DirectionOfUse._ext = None
    
    #-----< DistanceUnits >-----#
    DistanceUnits = ENUM(name='DistanceUnits', mode=MODE_TYPE)
    DistanceUnits._cont = ASN1Dict([('centimeter', 0), ('cm2-5', 1), ('decimeter', 2), ('meter', 3), ('kilometer', 4), ('foot', 5), ('yard', 6), ('mile', 7)])
    DistanceUnits._ext = None
    
    #-----< ITIStextPhrase >-----#
    ITIStextPhrase = STR_IA5(name='ITIStextPhrase', mode=MODE_TYPE)
    ITIStextPhrase._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< MinutesDuration >-----#
    MinutesDuration = INT(name='MinutesDuration', mode=MODE_TYPE)
    MinutesDuration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32000)], ev=None, er=[])
    
    #-----< MsgCRC >-----#
    MsgCRC = OCT_STR(name='MsgCRC', mode=MODE_TYPE)
    MsgCRC._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< MUTCDCode >-----#
    MUTCDCode = ENUM(name='MUTCDCode', mode=MODE_TYPE)
    MUTCDCode._cont = ASN1Dict([('none', 0), ('regulatory', 1), ('warning', 2), ('maintenance', 3), ('motoristService', 4), ('guide', 5), ('rec', 6)])
    MUTCDCode._ext = []
    
    #-----< NodeAttributeLL >-----#
    NodeAttributeLL = ENUM(name='NodeAttributeLL', mode=MODE_TYPE)
    NodeAttributeLL._cont = ASN1Dict([('reserved', 0), ('stopLine', 1), ('roundedCapStyleA', 2), ('roundedCapStyleB', 3), ('mergePoint', 4), ('divergePoint', 5), ('downstreamStopLine', 6), ('downstreamStartNode', 7), ('closedToTraffic', 8), ('safeIsland', 9), ('curbPresentAtStepOff', 10), ('hydrantPresent', 11)])
    NodeAttributeLL._ext = []
    
    #-----< OffsetLL-B12 >-----#
    OffsetLL_B12 = INT(name='OffsetLL-B12', mode=MODE_TYPE)
    OffsetLL_B12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2048, ub=2047)], ev=None, er=[])
    
    #-----< OffsetLL-B14 >-----#
    OffsetLL_B14 = INT(name='OffsetLL-B14', mode=MODE_TYPE)
    OffsetLL_B14._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8192, ub=8191)], ev=None, er=[])
    
    #-----< OffsetLL-B16 >-----#
    OffsetLL_B16 = INT(name='OffsetLL-B16', mode=MODE_TYPE)
    OffsetLL_B16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    
    #-----< OffsetLL-B22 >-----#
    OffsetLL_B22 = INT(name='OffsetLL-B22', mode=MODE_TYPE)
    OffsetLL_B22._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2097152, ub=2097151)], ev=None, er=[])
    
    #-----< OffsetLL-B24 >-----#
    OffsetLL_B24 = INT(name='OffsetLL-B24', mode=MODE_TYPE)
    OffsetLL_B24._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8388608, ub=8388607)], ev=None, er=[])
    
    #-----< Radius-B12 >-----#
    Radius_B12 = INT(name='Radius-B12', mode=MODE_TYPE)
    Radius_B12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    
    #-----< SegmentAttributeLL >-----#
    SegmentAttributeLL = ENUM(name='SegmentAttributeLL', mode=MODE_TYPE)
    SegmentAttributeLL._cont = ASN1Dict([('reserved', 0), ('doNotBlock', 1), ('whiteLine', 2), ('mergingLaneLeft', 3), ('mergingLaneRight', 4), ('curbOnLeft', 5), ('curbOnRight', 6), ('loadingzoneOnLeft', 7), ('loadingzoneOnRight', 8), ('turnOutPointOnLeft', 9), ('turnOutPointOnRight', 10), ('adjacentParkingOnLeft', 11), ('adjacentParkingOnRight', 12), ('adjacentBikeLaneOnLeft', 13), ('adjacentBikeLaneOnRight', 14), ('sharedBikeLane', 15), ('bikeBoxInFront', 16), ('transitStopOnLeft', 17), ('transitStopOnRight', 18), ('transitStopInLane', 19), ('sharedWithTrackedVehicle', 20), ('safeIsland', 21), ('lowCurbsPresent', 22), ('rumbleStripPresent', 23), ('audibleSignalingPresent', 24), ('adaptiveTimingPresent', 25), ('rfSignalRequestPresent', 26), ('partialCurbIntrusion', 27), ('taperToLeft', 28), ('taperToRight', 29), ('taperToCenterLine', 30), ('parallelParking', 31), ('headInParking', 32), ('freeParking', 33), ('timeRestrictionsOnParking', 34), ('costToPark', 35), ('midBlockCurbPresent', 36), ('unEvenPavementPresent', 37)])
    SegmentAttributeLL._ext = []
    
    #-----< SignPriority >-----#
    SignPriority = INT(name='SignPriority', mode=MODE_TYPE)
    SignPriority._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< TravelerInfoType >-----#
    TravelerInfoType = ENUM(name='TravelerInfoType', mode=MODE_TYPE)
    TravelerInfoType._cont = ASN1Dict([('unknown', 0), ('advisory', 1), ('roadSignage', 2), ('commercialSignage', 3)])
    TravelerInfoType._ext = []
    
    #-----< UniqueMSGID >-----#
    UniqueMSGID = OCT_STR(name='UniqueMSGID', mode=MODE_TYPE)
    UniqueMSGID._const_sz = ASN1Set(rv=[9], rr=[], ev=None, er=[])
    
    #-----< URL-Base >-----#
    URL_Base = STR_IA5(name='URL-Base', mode=MODE_TYPE)
    URL_Base._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=45)], ev=None, er=[])
    
    #-----< URL-Short >-----#
    URL_Short = STR_IA5(name='URL-Short', mode=MODE_TYPE)
    URL_Short._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    
    #-----< Zoom >-----#
    Zoom = INT(name='Zoom', mode=MODE_TYPE)
    Zoom._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    _all_ = [
        _TravelerInformation_msgCnt,
        _TravelerInformation_timeStamp,
        _TravelerInformation_packetID,
        _TravelerInformation_urlB,
        _TravelerInformation_dataFrames,
        ____TravelerInformation_regional__item__regionId_tab,
        ___TravelerInformation_regional__item__regionId,
        ____TravelerInformation_regional__item__regExtValue_tab,
        ___TravelerInformation_regional__item__regExtValue,
        __TravelerInformation_regional__item_,
        _TravelerInformation_regional,
        TravelerInformation,
        _Circle_center,
        _Circle_radius,
        _Circle_units,
        Circle,
        _GeographicalPath_name,
        _GeographicalPath_id,
        _GeographicalPath_anchor,
        _GeographicalPath_laneWidth,
        _GeographicalPath_directionality,
        _GeographicalPath_closedPath,
        _GeographicalPath_direction,
        __GeographicalPath_description_path,
        __GeographicalPath_description_geometry,
        __GeographicalPath_description_oldRegion,
        _GeographicalPath_description,
        ____GeographicalPath_regional__item__regionId_tab,
        ___GeographicalPath_regional__item__regionId,
        ____GeographicalPath_regional__item__regExtValue_tab,
        ___GeographicalPath_regional__item__regExtValue,
        __GeographicalPath_regional__item_,
        _GeographicalPath_regional,
        GeographicalPath,
        _GeometricProjection_direction,
        _GeometricProjection_extent,
        _GeometricProjection_laneWidth,
        _GeometricProjection_circle,
        ____GeometricProjection_regional__item__regionId_tab,
        ___GeometricProjection_regional__item__regionId,
        ____GeometricProjection_regional__item__regExtValue_tab,
        ___GeometricProjection_regional__item__regExtValue,
        __GeometricProjection_regional__item_,
        _GeometricProjection_regional,
        GeometricProjection,
        ___ExitService__item__item_itis,
        ___ExitService__item__item_text,
        __ExitService__item__item,
        _ExitService__item_,
        ExitService,
        ___GenericSignage__item__item_itis,
        ___GenericSignage__item__item_text,
        __GenericSignage__item__item,
        _GenericSignage__item_,
        GenericSignage,
        ___SpeedLimit__item__item_itis,
        ___SpeedLimit__item__item_text,
        __SpeedLimit__item__item,
        _SpeedLimit__item_,
        SpeedLimit,
        ___WorkZone__item__item_itis,
        ___WorkZone__item__item_text,
        __WorkZone__item__item,
        _WorkZone__item_,
        WorkZone,
        _Node_LL_24B_lon,
        _Node_LL_24B_lat,
        Node_LL_24B,
        _Node_LL_28B_lon,
        _Node_LL_28B_lat,
        Node_LL_28B,
        _Node_LL_32B_lon,
        _Node_LL_32B_lat,
        Node_LL_32B,
        _Node_LL_36B_lon,
        _Node_LL_36B_lat,
        Node_LL_36B,
        _Node_LL_44B_lon,
        _Node_LL_44B_lat,
        Node_LL_44B,
        _Node_LL_48B_lon,
        _Node_LL_48B_lat,
        Node_LL_48B,
        _NodeAttributeLLList__item_,
        NodeAttributeLLList,
        _NodeAttributeSetLL_localNode,
        _NodeAttributeSetLL_disabled,
        _NodeAttributeSetLL_enabled,
        _NodeAttributeSetLL_data,
        _NodeAttributeSetLL_dWidth,
        _NodeAttributeSetLL_dElevation,
        ____NodeAttributeSetLL_regional__item__regionId_tab,
        ___NodeAttributeSetLL_regional__item__regionId,
        ____NodeAttributeSetLL_regional__item__regExtValue_tab,
        ___NodeAttributeSetLL_regional__item__regExtValue,
        __NodeAttributeSetLL_regional__item_,
        _NodeAttributeSetLL_regional,
        NodeAttributeSetLL,
        _NodeListLL_nodes,
        NodeListLL,
        _NodeLL_delta,
        _NodeLL_attributes,
        NodeLL,
        _NodeOffsetPointLL_node_LL1,
        _NodeOffsetPointLL_node_LL2,
        _NodeOffsetPointLL_node_LL3,
        _NodeOffsetPointLL_node_LL4,
        _NodeOffsetPointLL_node_LL5,
        _NodeOffsetPointLL_node_LL6,
        _NodeOffsetPointLL_node_LatLon,
        ___NodeOffsetPointLL_regional_regionId_tab,
        __NodeOffsetPointLL_regional_regionId,
        ___NodeOffsetPointLL_regional_regExtValue_tab,
        __NodeOffsetPointLL_regional_regExtValue,
        _NodeOffsetPointLL_regional,
        NodeOffsetPointLL,
        _NodeSetLL__item_,
        NodeSetLL,
        _OffsetSystem_scale,
        __OffsetSystem_offset_xy,
        __OffsetSystem_offset_ll,
        _OffsetSystem_offset,
        OffsetSystem,
        _RegionList__item_,
        RegionList,
        _RegionOffsets_xOffset,
        _RegionOffsets_yOffset,
        _RegionOffsets_zOffset,
        RegionOffsets,
        _RegionPointSet_anchor,
        _RegionPointSet_scale,
        _RegionPointSet_nodeList,
        RegionPointSet,
        _RoadSignID_position,
        _RoadSignID_viewAngle,
        _RoadSignID_mutcdCode,
        _RoadSignID_crc,
        RoadSignID,
        _SegmentAttributeLLList__item_,
        SegmentAttributeLLList,
        _ShapePointSet_anchor,
        _ShapePointSet_laneWidth,
        _ShapePointSet_directionality,
        _ShapePointSet_nodeList,
        ShapePointSet,
        _TravelerDataFrameList__item_,
        TravelerDataFrameList,
        _TravelerDataFrame_doNotUse1,
        _TravelerDataFrame_frameType,
        __TravelerDataFrame_msgId_furtherInfoID,
        __TravelerDataFrame_msgId_roadSignID,
        _TravelerDataFrame_msgId,
        _TravelerDataFrame_startYear,
        _TravelerDataFrame_startTime,
        _TravelerDataFrame_durationTime,
        _TravelerDataFrame_priority,
        _TravelerDataFrame_doNotUse2,
        __TravelerDataFrame_regions__item_,
        _TravelerDataFrame_regions,
        _TravelerDataFrame_doNotUse3,
        _TravelerDataFrame_doNotUse4,
        __TravelerDataFrame_content_advisory,
        __TravelerDataFrame_content_workZone,
        __TravelerDataFrame_content_genericSign,
        __TravelerDataFrame_content_speedLimit,
        __TravelerDataFrame_content_exitService,
        _TravelerDataFrame_content,
        _TravelerDataFrame_url,
        _TravelerDataFrame_contentNew,
        TravelerDataFrame,
        _TravelerDataFrameNewPartIIIContent_frictionInfo,
        TravelerDataFrameNewPartIIIContent,
        _ValidRegion_direction,
        _ValidRegion_extent,
        __ValidRegion_area_shapePointSet,
        __ValidRegion_area_circle,
        __ValidRegion_area_regionPointSet,
        _ValidRegion_area,
        ValidRegion,
        DirectionOfUse,
        DistanceUnits,
        ITIStextPhrase,
        MinutesDuration,
        MsgCRC,
        MUTCDCode,
        NodeAttributeLL,
        OffsetLL_B12,
        OffsetLL_B14,
        OffsetLL_B16,
        OffsetLL_B22,
        OffsetLL_B24,
        Radius_B12,
        SegmentAttributeLL,
        SignPriority,
        TravelerInfoType,
        UniqueMSGID,
        URL_Base,
        URL_Short,
        Zoom,
    ]

class RoadWeatherMessage:

    _name_  = 'RoadWeatherMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2945, 3, 1, 0, 2, 1]
    
    _obj_ = [
        'RoadWeatherMessage',
        'RoadWeatherUpload',
        'VehicleReport',
        'RoadWeatherDownload',
        'WDMSFleetData',
        'NtcipPavementTreatment',
        'NTCIPEssPavementTreatmentLatitude',
        'NTCIPEssPavementTreatmentLongitude',
        'NTCIPEssPavementTreatmentLocation',
        'NTCIPEssPaveTreatProductType',
        'NTCIPEssPaveTreatProductForm',
        'NTCIPEssPercentProductMix',
        'NTCIPEssPaveTreatmentAmount',
        'NTCIPEssPaveTreatmentWidth',
        'SnapShot',
        'NtcipEssData',
        'NtcipAirTemperature',
        'NTCIPEssAirTemperature',
        'NTCIPEssTemperatureSensorHeight',
        'NtcipAtmosphericPressure',
        'NTCIPEssPressureSensorAtmosphericPressure',
        'NtcipWind',
        'NTCIPWindSensorAvgSpeed',
        'NTCIPWindSensorAvgDirection',
        'NTCIPWindSensorSpotSpeed',
        'NTCIPWindSensorSpotDirection',
        'NTCIPWindSensorGustSpeed',
        'NTCIPWindSensorGustDirection',
        'NtcipRelativeHumidity',
        'NTCIPHumiditySensorRelativeHumidity',
        'NtcipDewPoint',
        'NTCIPEssDewpointTemp',
        'NtcipPavement',
        'NTCIPEssSurfaceTemperature',
        'NTCIPPavementSensorSurfaceCondition',
        'NTCIPEssSurfaceIceOrWaterDepth',
        'NtcipVisibility',
        'NTCIPEssVisibility',
        'NtcipVisibilitySituation',
        'NTCIPEssVisibilitySituation',
        'NtcipCloudSituation',
        'NTCIPEssCloudSituationV4',
        'NtcipPrecipitation',
        'NTCIPPrecipitationSensorPrecipSituation',
        'NtcipSolarRadiation',
        'NTCIPEssTotalRadiationV4',
        'NTCIPEssTotalRadiationPeriod',
        'TemperatureMeasurementStdDev',
        'AtmosPressureMeasurementStdDev',
        'DewPointTempMeasurementStdDev',
        'SurfaceTempMeasurementStdDev',
        'DataSourceInfo',
        ]
    _type_ = [
        'RoadWeatherMessage',
        'RoadWeatherUpload',
        'VehicleReport',
        'RoadWeatherDownload',
        'WDMSFleetData',
        'NtcipPavementTreatment',
        'NTCIPEssPavementTreatmentLatitude',
        'NTCIPEssPavementTreatmentLongitude',
        'NTCIPEssPavementTreatmentLocation',
        'NTCIPEssPaveTreatProductType',
        'NTCIPEssPaveTreatProductForm',
        'NTCIPEssPercentProductMix',
        'NTCIPEssPaveTreatmentAmount',
        'NTCIPEssPaveTreatmentWidth',
        'SnapShot',
        'NtcipEssData',
        'NtcipAirTemperature',
        'NTCIPEssAirTemperature',
        'NTCIPEssTemperatureSensorHeight',
        'NtcipAtmosphericPressure',
        'NTCIPEssPressureSensorAtmosphericPressure',
        'NtcipWind',
        'NTCIPWindSensorAvgSpeed',
        'NTCIPWindSensorAvgDirection',
        'NTCIPWindSensorSpotSpeed',
        'NTCIPWindSensorSpotDirection',
        'NTCIPWindSensorGustSpeed',
        'NTCIPWindSensorGustDirection',
        'NtcipRelativeHumidity',
        'NTCIPHumiditySensorRelativeHumidity',
        'NtcipDewPoint',
        'NTCIPEssDewpointTemp',
        'NtcipPavement',
        'NTCIPEssSurfaceTemperature',
        'NTCIPPavementSensorSurfaceCondition',
        'NTCIPEssSurfaceIceOrWaterDepth',
        'NtcipVisibility',
        'NTCIPEssVisibility',
        'NtcipVisibilitySituation',
        'NTCIPEssVisibilitySituation',
        'NtcipCloudSituation',
        'NTCIPEssCloudSituationV4',
        'NtcipPrecipitation',
        'NTCIPPrecipitationSensorPrecipSituation',
        'NtcipSolarRadiation',
        'NTCIPEssTotalRadiationV4',
        'NTCIPEssTotalRadiationPeriod',
        'TemperatureMeasurementStdDev',
        'AtmosPressureMeasurementStdDev',
        'DewPointTempMeasurementStdDev',
        'SurfaceTempMeasurementStdDev',
        'DataSourceInfo',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< RoadWeatherMessage >-----#
    RoadWeatherMessage = CHOICE(name='RoadWeatherMessage', mode=MODE_TYPE)
    _RoadWeatherMessage_upload = CHOICE(name='upload', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'RoadWeatherUpload')))
    _RoadWeatherMessage_download = SEQ(name='download', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'RoadWeatherDownload')))
    RoadWeatherMessage._cont = ASN1Dict([
        ('upload', _RoadWeatherMessage_upload),
        ('download', _RoadWeatherMessage_download),
        ])
    RoadWeatherMessage._ext = []
    
    #-----< RoadWeatherUpload >-----#
    RoadWeatherUpload = CHOICE(name='RoadWeatherUpload', mode=MODE_TYPE)
    _RoadWeatherUpload_vehicleReport = SEQ_OF(name='vehicleReport', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RoadWeatherUpload_vehicleReport__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadWeatherMessage', 'VehicleReport')))
    _RoadWeatherUpload_vehicleReport._cont = __RoadWeatherUpload_vehicleReport__item_
    _RoadWeatherUpload_vehicleReport._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _RoadWeatherUpload_citizenReport = SEQ(name='citizenReport', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'SnapShot')))
    RoadWeatherUpload._cont = ASN1Dict([
        ('vehicleReport', _RoadWeatherUpload_vehicleReport),
        ('citizenReport', _RoadWeatherUpload_citizenReport),
        ])
    RoadWeatherUpload._ext = []
    
    #-----< VehicleReport >-----#
    VehicleReport = SEQ(name='VehicleReport', mode=MODE_TYPE)
    _VehicleReport_snapShot = SEQ(name='snapShot', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'SnapShot')))
    _VehicleReport_wdmsFleetData = SEQ(name='wdmsFleetData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'WDMSFleetData')), opt=True)
    VehicleReport._cont = ASN1Dict([
        ('snapShot', _VehicleReport_snapShot),
        ('wdmsFleetData', _VehicleReport_wdmsFleetData),
        ])
    VehicleReport._ext = []
    
    #-----< RoadWeatherDownload >-----#
    RoadWeatherDownload = SEQ(name='RoadWeatherDownload', mode=MODE_TYPE)
    _RoadWeatherDownload_travelerData = SEQ_OF(name='travelerData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'TravelerDataFrameList')))
    _RoadWeatherDownload_wdmsFleetData = SEQ(name='wdmsFleetData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'WDMSFleetData')), opt=True)
    RoadWeatherDownload._cont = ASN1Dict([
        ('travelerData', _RoadWeatherDownload_travelerData),
        ('wdmsFleetData', _RoadWeatherDownload_wdmsFleetData),
        ])
    RoadWeatherDownload._ext = []
    
    #-----< WDMSFleetData >-----#
    WDMSFleetData = SEQ(name='WDMSFleetData', mode=MODE_TYPE)
    _WDMSFleetData_pavementTreat = SEQ(name='pavementTreat', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipPavementTreatment')), opt=True)
    _WDMSFleetData_routingAdvice = STR_IA5(name='routingAdvice', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIStext')), opt=True)
    WDMSFleetData._cont = ASN1Dict([
        ('pavementTreat', _WDMSFleetData_pavementTreat),
        ('routingAdvice', _WDMSFleetData_routingAdvice),
        ])
    WDMSFleetData._ext = []
    
    #-----< NtcipPavementTreatment >-----#
    NtcipPavementTreatment = SEQ(name='NtcipPavementTreatment', mode=MODE_TYPE)
    _NtcipPavementTreatment_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPavementTreatmentLatitude')))
    _NtcipPavementTreatment_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPavementTreatmentLongitude')))
    _NtcipPavementTreatment_location = STR_IA5(name='location', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPavementTreatmentLocation')))
    _NtcipPavementTreatment_productType = ENUM(name='productType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPaveTreatProductType')), opt=True)
    _NtcipPavementTreatment_form = ENUM(name='form', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPaveTreatProductForm')), opt=True)
    _NtcipPavementTreatment_percentage = INT(name='percentage', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPercentProductMix')), opt=True)
    _NtcipPavementTreatment_amount = INT(name='amount', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPaveTreatmentAmount')), opt=True)
    _NtcipPavementTreatment_width = INT(name='width', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPaveTreatmentWidth')), opt=True)
    NtcipPavementTreatment._cont = ASN1Dict([
        ('latitude', _NtcipPavementTreatment_latitude),
        ('longitude', _NtcipPavementTreatment_longitude),
        ('location', _NtcipPavementTreatment_location),
        ('productType', _NtcipPavementTreatment_productType),
        ('form', _NtcipPavementTreatment_form),
        ('percentage', _NtcipPavementTreatment_percentage),
        ('amount', _NtcipPavementTreatment_amount),
        ('width', _NtcipPavementTreatment_width),
        ])
    NtcipPavementTreatment._ext = []
    
    #-----< NTCIPEssPavementTreatmentLatitude >-----#
    NTCIPEssPavementTreatmentLatitude = INT(name='NTCIPEssPavementTreatmentLatitude', mode=MODE_TYPE)
    NTCIPEssPavementTreatmentLatitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-90000000, ub=90000001)], ev=None, er=[])
    
    #-----< NTCIPEssPavementTreatmentLongitude >-----#
    NTCIPEssPavementTreatmentLongitude = INT(name='NTCIPEssPavementTreatmentLongitude', mode=MODE_TYPE)
    NTCIPEssPavementTreatmentLongitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-180000000, ub=180000001)], ev=None, er=[])
    
    #-----< NTCIPEssPavementTreatmentLocation >-----#
    NTCIPEssPavementTreatmentLocation = STR_IA5(name='NTCIPEssPavementTreatmentLocation', mode=MODE_TYPE)
    NTCIPEssPavementTreatmentLocation._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< NTCIPEssPaveTreatProductType >-----#
    NTCIPEssPaveTreatProductType = ENUM(name='NTCIPEssPaveTreatProductType', mode=MODE_TYPE)
    NTCIPEssPaveTreatProductType._cont = ASN1Dict([('other', 1), ('sand', 2), ('dirt', 3), ('gravel', 4), ('cinders', 5), ('water', 6), ('enhancedSalts', 7), ('naCl', 8), ('caCl', 9), ('mgCl', 10), ('cMA', 11), ('kAC', 12), ('naFormate', 13), ('naA', 14)])
    NTCIPEssPaveTreatProductType._ext = []
    
    #-----< NTCIPEssPaveTreatProductForm >-----#
    NTCIPEssPaveTreatProductForm = ENUM(name='NTCIPEssPaveTreatProductForm', mode=MODE_TYPE)
    NTCIPEssPaveTreatProductForm._cont = ASN1Dict([('other', 1), ('dry', 2), ('prewet', 3), ('liquid', 4)])
    NTCIPEssPaveTreatProductForm._ext = []
    
    #-----< NTCIPEssPercentProductMix >-----#
    NTCIPEssPercentProductMix = INT(name='NTCIPEssPercentProductMix', mode=MODE_TYPE)
    NTCIPEssPercentProductMix._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=100)], ev=None, er=[])
    
    #-----< NTCIPEssPaveTreatmentAmount >-----#
    NTCIPEssPaveTreatmentAmount = INT(name='NTCIPEssPaveTreatmentAmount', mode=MODE_TYPE)
    NTCIPEssPaveTreatmentAmount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< NTCIPEssPaveTreatmentWidth >-----#
    NTCIPEssPaveTreatmentWidth = INT(name='NTCIPEssPaveTreatmentWidth', mode=MODE_TYPE)
    NTCIPEssPaveTreatmentWidth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SnapShot >-----#
    SnapShot = SEQ(name='SnapShot', mode=MODE_TYPE)
    _SnapShot_thePosition = SEQ(name='thePosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FullPositionVector')))
    _SnapShot_safetyExt = SEQ(name='safetyExt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleSafetyExtensions')), opt=True)
    _SnapShot_dataSet = SEQ(name='dataSet', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'VehicleStatus')), opt=True)
    _SnapShot_weatherData = SEQ(name='weatherData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipEssData')), opt=True)
    SnapShot._cont = ASN1Dict([
        ('thePosition', _SnapShot_thePosition),
        ('safetyExt', _SnapShot_safetyExt),
        ('dataSet', _SnapShot_dataSet),
        ('weatherData', _SnapShot_weatherData),
        ])
    SnapShot._ext = ['weatherData']
    
    #-----< NtcipEssData >-----#
    NtcipEssData = SEQ(name='NtcipEssData', mode=MODE_TYPE)
    _NtcipEssData_airTemp = SEQ(name='airTemp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipAirTemperature')), opt=True)
    _NtcipEssData_atmosphere = SEQ(name='atmosphere', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipAtmosphericPressure')), opt=True)
    _NtcipEssData_wind = SEQ(name='wind', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipWind')), opt=True)
    _NtcipEssData_humidity = SEQ(name='humidity', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipRelativeHumidity')), opt=True)
    _NtcipEssData_dewpoint = SEQ(name='dewpoint', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipDewPoint')), opt=True)
    _NtcipEssData_pavement = SEQ(name='pavement', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipPavement')), opt=True)
    _NtcipEssData_visibility = SEQ(name='visibility', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipVisibility')), opt=True)
    _NtcipEssData_visSituation = SEQ(name='visSituation', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipVisibilitySituation')), opt=True)
    _NtcipEssData_cloudSitiation = SEQ(name='cloudSitiation', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipCloudSituation')), opt=True)
    _NtcipEssData_precipitation = SEQ(name='precipitation', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipPrecipitation')), opt=True)
    _NtcipEssData_solarRadiation = SEQ(name='solarRadiation', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipSolarRadiation')), opt=True)
    NtcipEssData._cont = ASN1Dict([
        ('airTemp', _NtcipEssData_airTemp),
        ('atmosphere', _NtcipEssData_atmosphere),
        ('wind', _NtcipEssData_wind),
        ('humidity', _NtcipEssData_humidity),
        ('dewpoint', _NtcipEssData_dewpoint),
        ('pavement', _NtcipEssData_pavement),
        ('visibility', _NtcipEssData_visibility),
        ('visSituation', _NtcipEssData_visSituation),
        ('cloudSitiation', _NtcipEssData_cloudSitiation),
        ('precipitation', _NtcipEssData_precipitation),
        ('solarRadiation', _NtcipEssData_solarRadiation),
        ])
    NtcipEssData._ext = []
    
    #-----< NtcipAirTemperature >-----#
    NtcipAirTemperature = SEQ(name='NtcipAirTemperature', mode=MODE_TYPE)
    _NtcipAirTemperature_temperature = INT(name='temperature', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssAirTemperature')))
    _NtcipAirTemperature_measurementStdDev = INT(name='measurementStdDev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'TemperatureMeasurementStdDev')), opt=True)
    _NtcipAirTemperature_tempSensorHeight = INT(name='tempSensorHeight', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssTemperatureSensorHeight')), opt=True)
    NtcipAirTemperature._cont = ASN1Dict([
        ('temperature', _NtcipAirTemperature_temperature),
        ('measurementStdDev', _NtcipAirTemperature_measurementStdDev),
        ('tempSensorHeight', _NtcipAirTemperature_tempSensorHeight),
        ])
    NtcipAirTemperature._ext = []
    
    #-----< NTCIPEssAirTemperature >-----#
    NTCIPEssAirTemperature = INT(name='NTCIPEssAirTemperature', mode=MODE_TYPE)
    NTCIPEssAirTemperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1000, ub=1001)], ev=None, er=[])
    
    #-----< NTCIPEssTemperatureSensorHeight >-----#
    NTCIPEssTemperatureSensorHeight = INT(name='NTCIPEssTemperatureSensorHeight', mode=MODE_TYPE)
    NTCIPEssTemperatureSensorHeight._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1000, ub=1001)], ev=None, er=[])
    
    #-----< NtcipAtmosphericPressure >-----#
    NtcipAtmosphericPressure = SEQ(name='NtcipAtmosphericPressure', mode=MODE_TYPE)
    _NtcipAtmosphericPressure_pressure = INT(name='pressure', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssPressureSensorAtmosphericPressure')))
    _NtcipAtmosphericPressure_measurementStdDev = INT(name='measurementStdDev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'AtmosPressureMeasurementStdDev')), opt=True)
    NtcipAtmosphericPressure._cont = ASN1Dict([
        ('pressure', _NtcipAtmosphericPressure_pressure),
        ('measurementStdDev', _NtcipAtmosphericPressure_measurementStdDev),
        ])
    NtcipAtmosphericPressure._ext = []
    
    #-----< NTCIPEssPressureSensorAtmosphericPressure >-----#
    NTCIPEssPressureSensorAtmosphericPressure = INT(name='NTCIPEssPressureSensorAtmosphericPressure', mode=MODE_TYPE)
    NTCIPEssPressureSensorAtmosphericPressure._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NtcipWind >-----#
    NtcipWind = SEQ(name='NtcipWind', mode=MODE_TYPE)
    _NtcipWind_avgSpeed = INT(name='avgSpeed', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPWindSensorAvgSpeed')), opt=True)
    _NtcipWind_avgDirection = INT(name='avgDirection', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPWindSensorAvgDirection')), opt=True)
    _NtcipWind_currentSpeed = INT(name='currentSpeed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPWindSensorSpotSpeed')), opt=True)
    _NtcipWind_curDirection = INT(name='curDirection', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPWindSensorSpotDirection')), opt=True)
    _NtcipWind_gustSpeed = INT(name='gustSpeed', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPWindSensorGustSpeed')), opt=True)
    _NtcipWind_gustDirection = INT(name='gustDirection', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPWindSensorGustDirection')), opt=True)
    NtcipWind._cont = ASN1Dict([
        ('avgSpeed', _NtcipWind_avgSpeed),
        ('avgDirection', _NtcipWind_avgDirection),
        ('currentSpeed', _NtcipWind_currentSpeed),
        ('curDirection', _NtcipWind_curDirection),
        ('gustSpeed', _NtcipWind_gustSpeed),
        ('gustDirection', _NtcipWind_gustDirection),
        ])
    NtcipWind._ext = []
    
    #-----< NTCIPWindSensorAvgSpeed >-----#
    NTCIPWindSensorAvgSpeed = INT(name='NTCIPWindSensorAvgSpeed', mode=MODE_TYPE)
    NTCIPWindSensorAvgSpeed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NTCIPWindSensorAvgDirection >-----#
    NTCIPWindSensorAvgDirection = INT(name='NTCIPWindSensorAvgDirection', mode=MODE_TYPE)
    NTCIPWindSensorAvgDirection._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=361)], ev=None, er=[])
    
    #-----< NTCIPWindSensorSpotSpeed >-----#
    NTCIPWindSensorSpotSpeed = INT(name='NTCIPWindSensorSpotSpeed', mode=MODE_TYPE)
    NTCIPWindSensorSpotSpeed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NTCIPWindSensorSpotDirection >-----#
    NTCIPWindSensorSpotDirection = INT(name='NTCIPWindSensorSpotDirection', mode=MODE_TYPE)
    NTCIPWindSensorSpotDirection._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=361)], ev=None, er=[])
    
    #-----< NTCIPWindSensorGustSpeed >-----#
    NTCIPWindSensorGustSpeed = INT(name='NTCIPWindSensorGustSpeed', mode=MODE_TYPE)
    NTCIPWindSensorGustSpeed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NTCIPWindSensorGustDirection >-----#
    NTCIPWindSensorGustDirection = INT(name='NTCIPWindSensorGustDirection', mode=MODE_TYPE)
    NTCIPWindSensorGustDirection._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=361)], ev=None, er=[])
    
    #-----< NtcipRelativeHumidity >-----#
    NtcipRelativeHumidity = SEQ(name='NtcipRelativeHumidity', mode=MODE_TYPE)
    _NtcipRelativeHumidity_relHumidity = INT(name='relHumidity', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPHumiditySensorRelativeHumidity')))
    _NtcipRelativeHumidity_source = ENUM(name='source', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'DataSourceInfo')), opt=True)
    NtcipRelativeHumidity._cont = ASN1Dict([
        ('relHumidity', _NtcipRelativeHumidity_relHumidity),
        ('source', _NtcipRelativeHumidity_source),
        ])
    NtcipRelativeHumidity._ext = []
    
    #-----< NTCIPHumiditySensorRelativeHumidity >-----#
    NTCIPHumiditySensorRelativeHumidity = INT(name='NTCIPHumiditySensorRelativeHumidity', mode=MODE_TYPE)
    NTCIPHumiditySensorRelativeHumidity._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=101)], ev=None, er=[])
    
    #-----< NtcipDewPoint >-----#
    NtcipDewPoint = SEQ(name='NtcipDewPoint', mode=MODE_TYPE)
    _NtcipDewPoint_dewTemp = INT(name='dewTemp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssDewpointTemp')))
    _NtcipDewPoint_source = ENUM(name='source', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'DataSourceInfo')), opt=True)
    _NtcipDewPoint_measurementStdDev = INT(name='measurementStdDev', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'DewPointTempMeasurementStdDev')), opt=True)
    NtcipDewPoint._cont = ASN1Dict([
        ('dewTemp', _NtcipDewPoint_dewTemp),
        ('source', _NtcipDewPoint_source),
        ('measurementStdDev', _NtcipDewPoint_measurementStdDev),
        ])
    NtcipDewPoint._ext = []
    
    #-----< NTCIPEssDewpointTemp >-----#
    NTCIPEssDewpointTemp = INT(name='NTCIPEssDewpointTemp', mode=MODE_TYPE)
    NTCIPEssDewpointTemp._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1000, ub=1001)], ev=None, er=[])
    
    #-----< NtcipPavement >-----#
    NtcipPavement = SEQ(name='NtcipPavement', mode=MODE_TYPE)
    _NtcipPavement_surfaceTemp = INT(name='surfaceTemp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssSurfaceTemperature')), opt=True)
    _NtcipPavement_tempStdDev = INT(name='tempStdDev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'SurfaceTempMeasurementStdDev')), opt=True)
    _NtcipPavement_condition = ENUM(name='condition', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPPavementSensorSurfaceCondition')), opt=True)
    _NtcipPavement_moistureDepth = INT(name='moistureDepth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssSurfaceIceOrWaterDepth')), opt=True)
    _NtcipPavement_roadRoughness = SEQ(name='roadRoughness', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RoadRoughness')), opt=True)
    NtcipPavement._cont = ASN1Dict([
        ('surfaceTemp', _NtcipPavement_surfaceTemp),
        ('tempStdDev', _NtcipPavement_tempStdDev),
        ('condition', _NtcipPavement_condition),
        ('moistureDepth', _NtcipPavement_moistureDepth),
        ('roadRoughness', _NtcipPavement_roadRoughness),
        ])
    NtcipPavement._ext = []
    
    #-----< NTCIPEssSurfaceTemperature >-----#
    NTCIPEssSurfaceTemperature = INT(name='NTCIPEssSurfaceTemperature', mode=MODE_TYPE)
    NTCIPEssSurfaceTemperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1000, ub=1001)], ev=None, er=[])
    
    #-----< NTCIPPavementSensorSurfaceCondition >-----#
    NTCIPPavementSensorSurfaceCondition = ENUM(name='NTCIPPavementSensorSurfaceCondition', mode=MODE_TYPE)
    NTCIPPavementSensorSurfaceCondition._cont = ASN1Dict([('other', 1), ('error', 2), ('dry', 3), ('moist', 4), ('chemicallyMoist', 5), ('wet', 6), ('chemicallyWet', 7), ('standingWater', 8), ('frost', 9), ('slush', 10), ('snow', 11), ('ice', 12), ('noReport', 13)])
    NTCIPPavementSensorSurfaceCondition._ext = []
    
    #-----< NTCIPEssSurfaceIceOrWaterDepth >-----#
    NTCIPEssSurfaceIceOrWaterDepth = INT(name='NTCIPEssSurfaceIceOrWaterDepth', mode=MODE_TYPE)
    NTCIPEssSurfaceIceOrWaterDepth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NtcipVisibility >-----#
    NtcipVisibility = SEQ(name='NtcipVisibility', mode=MODE_TYPE)
    _NtcipVisibility_visibility = INT(name='visibility', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssVisibility')))
    NtcipVisibility._cont = ASN1Dict([
        ('visibility', _NtcipVisibility_visibility),
        ])
    NtcipVisibility._ext = []
    
    #-----< NTCIPEssVisibility >-----#
    NTCIPEssVisibility = INT(name='NTCIPEssVisibility', mode=MODE_TYPE)
    NTCIPEssVisibility._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1000001)], ev=None, er=[])
    
    #-----< NtcipVisibilitySituation >-----#
    NtcipVisibilitySituation = SEQ(name='NtcipVisibilitySituation', mode=MODE_TYPE)
    _NtcipVisibilitySituation_situation = ENUM(name='situation', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssVisibilitySituation')))
    NtcipVisibilitySituation._cont = ASN1Dict([
        ('situation', _NtcipVisibilitySituation_situation),
        ])
    NtcipVisibilitySituation._ext = []
    
    #-----< NTCIPEssVisibilitySituation >-----#
    NTCIPEssVisibilitySituation = ENUM(name='NTCIPEssVisibilitySituation', mode=MODE_TYPE)
    NTCIPEssVisibilitySituation._cont = ASN1Dict([('other', 1), ('unknown', 2), ('clear', 3), ('fogNotPatchy', 4), ('patchyFog', 5), ('blowingSnow', 6), ('smoke', 7), ('seaSpray', 8), ('vehicleSpray', 9), ('blowingDustOrSand', 10), ('sunGlare', 11), ('swarmsOfInsects', 12)])
    NTCIPEssVisibilitySituation._ext = []
    
    #-----< NtcipCloudSituation >-----#
    NtcipCloudSituation = SEQ(name='NtcipCloudSituation', mode=MODE_TYPE)
    _NtcipCloudSituation_situation = INT(name='situation', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssCloudSituationV4')))
    NtcipCloudSituation._cont = ASN1Dict([
        ('situation', _NtcipCloudSituation_situation),
        ])
    NtcipCloudSituation._ext = []
    
    #-----< NTCIPEssCloudSituationV4 >-----#
    NTCIPEssCloudSituationV4 = INT(name='NTCIPEssCloudSituationV4', mode=MODE_TYPE)
    NTCIPEssCloudSituationV4._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8)], ev=None, er=[])
    
    #-----< NtcipPrecipitation >-----#
    NtcipPrecipitation = SEQ(name='NtcipPrecipitation', mode=MODE_TYPE)
    _NtcipPrecipitation_precipitation = ENUM(name='precipitation', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPPrecipitationSensorPrecipSituation')))
    NtcipPrecipitation._cont = ASN1Dict([
        ('precipitation', _NtcipPrecipitation_precipitation),
        ])
    NtcipPrecipitation._ext = []
    
    #-----< NTCIPPrecipitationSensorPrecipSituation >-----#
    NTCIPPrecipitationSensorPrecipSituation = ENUM(name='NTCIPPrecipitationSensorPrecipSituation', mode=MODE_TYPE)
    NTCIPPrecipitationSensorPrecipSituation._cont = ASN1Dict([('other', 1), ('unknown', 2), ('noPrecipitation', 3), ('unidentifiedSlight', 4), ('unidentifiedModerate', 5), ('unidentifiedHeavy', 6), ('snowSlight', 7), ('snowModerate', 8), ('snowHeavy', 9), ('rainSlight', 10), ('rainModerate', 11), ('rainHeavy', 12), ('frozenPrecipitationSlight', 13), ('frozenPrecipitationModerate', 14), ('frozenPrecipitationHeavy', 15)])
    NTCIPPrecipitationSensorPrecipSituation._ext = []
    
    #-----< NtcipSolarRadiation >-----#
    NtcipSolarRadiation = SEQ(name='NtcipSolarRadiation', mode=MODE_TYPE)
    _NtcipSolarRadiation_solarRadiation = INT(name='solarRadiation', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssTotalRadiationV4')))
    _NtcipSolarRadiation_measurementPeriod = INT(name='measurementPeriod', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssTotalRadiationPeriod')))
    NtcipSolarRadiation._cont = ASN1Dict([
        ('solarRadiation', _NtcipSolarRadiation_solarRadiation),
        ('measurementPeriod', _NtcipSolarRadiation_measurementPeriod),
        ])
    NtcipSolarRadiation._ext = []
    
    #-----< NTCIPEssTotalRadiationV4 >-----#
    NTCIPEssTotalRadiationV4 = INT(name='NTCIPEssTotalRadiationV4', mode=MODE_TYPE)
    NTCIPEssTotalRadiationV4._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2048, ub=2049)], ev=None, er=[])
    
    #-----< NTCIPEssTotalRadiationPeriod >-----#
    NTCIPEssTotalRadiationPeriod = INT(name='NTCIPEssTotalRadiationPeriod', mode=MODE_TYPE)
    NTCIPEssTotalRadiationPeriod._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=86400)], ev=None, er=[])
    
    #-----< TemperatureMeasurementStdDev >-----#
    TemperatureMeasurementStdDev = INT(name='TemperatureMeasurementStdDev', mode=MODE_TYPE)
    TemperatureMeasurementStdDev._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< AtmosPressureMeasurementStdDev >-----#
    AtmosPressureMeasurementStdDev = INT(name='AtmosPressureMeasurementStdDev', mode=MODE_TYPE)
    AtmosPressureMeasurementStdDev._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< DewPointTempMeasurementStdDev >-----#
    DewPointTempMeasurementStdDev = INT(name='DewPointTempMeasurementStdDev', mode=MODE_TYPE)
    DewPointTempMeasurementStdDev._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< SurfaceTempMeasurementStdDev >-----#
    SurfaceTempMeasurementStdDev = INT(name='SurfaceTempMeasurementStdDev', mode=MODE_TYPE)
    SurfaceTempMeasurementStdDev._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< DataSourceInfo >-----#
    DataSourceInfo = ENUM(name='DataSourceInfo', mode=MODE_TYPE)
    DataSourceInfo._cont = ASN1Dict([('measured', 0), ('derived', 1)])
    DataSourceInfo._ext = []
    
    _all_ = [
        _RoadWeatherMessage_upload,
        _RoadWeatherMessage_download,
        RoadWeatherMessage,
        __RoadWeatherUpload_vehicleReport__item_,
        _RoadWeatherUpload_vehicleReport,
        _RoadWeatherUpload_citizenReport,
        RoadWeatherUpload,
        _VehicleReport_snapShot,
        _VehicleReport_wdmsFleetData,
        VehicleReport,
        _RoadWeatherDownload_travelerData,
        _RoadWeatherDownload_wdmsFleetData,
        RoadWeatherDownload,
        _WDMSFleetData_pavementTreat,
        _WDMSFleetData_routingAdvice,
        WDMSFleetData,
        _NtcipPavementTreatment_latitude,
        _NtcipPavementTreatment_longitude,
        _NtcipPavementTreatment_location,
        _NtcipPavementTreatment_productType,
        _NtcipPavementTreatment_form,
        _NtcipPavementTreatment_percentage,
        _NtcipPavementTreatment_amount,
        _NtcipPavementTreatment_width,
        NtcipPavementTreatment,
        NTCIPEssPavementTreatmentLatitude,
        NTCIPEssPavementTreatmentLongitude,
        NTCIPEssPavementTreatmentLocation,
        NTCIPEssPaveTreatProductType,
        NTCIPEssPaveTreatProductForm,
        NTCIPEssPercentProductMix,
        NTCIPEssPaveTreatmentAmount,
        NTCIPEssPaveTreatmentWidth,
        _SnapShot_thePosition,
        _SnapShot_safetyExt,
        _SnapShot_dataSet,
        _SnapShot_weatherData,
        SnapShot,
        _NtcipEssData_airTemp,
        _NtcipEssData_atmosphere,
        _NtcipEssData_wind,
        _NtcipEssData_humidity,
        _NtcipEssData_dewpoint,
        _NtcipEssData_pavement,
        _NtcipEssData_visibility,
        _NtcipEssData_visSituation,
        _NtcipEssData_cloudSitiation,
        _NtcipEssData_precipitation,
        _NtcipEssData_solarRadiation,
        NtcipEssData,
        _NtcipAirTemperature_temperature,
        _NtcipAirTemperature_measurementStdDev,
        _NtcipAirTemperature_tempSensorHeight,
        NtcipAirTemperature,
        NTCIPEssAirTemperature,
        NTCIPEssTemperatureSensorHeight,
        _NtcipAtmosphericPressure_pressure,
        _NtcipAtmosphericPressure_measurementStdDev,
        NtcipAtmosphericPressure,
        NTCIPEssPressureSensorAtmosphericPressure,
        _NtcipWind_avgSpeed,
        _NtcipWind_avgDirection,
        _NtcipWind_currentSpeed,
        _NtcipWind_curDirection,
        _NtcipWind_gustSpeed,
        _NtcipWind_gustDirection,
        NtcipWind,
        NTCIPWindSensorAvgSpeed,
        NTCIPWindSensorAvgDirection,
        NTCIPWindSensorSpotSpeed,
        NTCIPWindSensorSpotDirection,
        NTCIPWindSensorGustSpeed,
        NTCIPWindSensorGustDirection,
        _NtcipRelativeHumidity_relHumidity,
        _NtcipRelativeHumidity_source,
        NtcipRelativeHumidity,
        NTCIPHumiditySensorRelativeHumidity,
        _NtcipDewPoint_dewTemp,
        _NtcipDewPoint_source,
        _NtcipDewPoint_measurementStdDev,
        NtcipDewPoint,
        NTCIPEssDewpointTemp,
        _NtcipPavement_surfaceTemp,
        _NtcipPavement_tempStdDev,
        _NtcipPavement_condition,
        _NtcipPavement_moistureDepth,
        _NtcipPavement_roadRoughness,
        NtcipPavement,
        NTCIPEssSurfaceTemperature,
        NTCIPPavementSensorSurfaceCondition,
        NTCIPEssSurfaceIceOrWaterDepth,
        _NtcipVisibility_visibility,
        NtcipVisibility,
        NTCIPEssVisibility,
        _NtcipVisibilitySituation_situation,
        NtcipVisibilitySituation,
        NTCIPEssVisibilitySituation,
        _NtcipCloudSituation_situation,
        NtcipCloudSituation,
        NTCIPEssCloudSituationV4,
        _NtcipPrecipitation_precipitation,
        NtcipPrecipitation,
        NTCIPPrecipitationSensorPrecipSituation,
        _NtcipSolarRadiation_solarRadiation,
        _NtcipSolarRadiation_measurementPeriod,
        NtcipSolarRadiation,
        NTCIPEssTotalRadiationV4,
        NTCIPEssTotalRadiationPeriod,
        TemperatureMeasurementStdDev,
        AtmosPressureMeasurementStdDev,
        DewPointTempMeasurementStdDev,
        SurfaceTempMeasurementStdDev,
        DataSourceInfo,
    ]

class RoadSafetyMessage:

    _name_  = 'RoadSafetyMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2945, 4, 1, 39, 1, 1]
    
    _obj_ = [
        'RoadSafetyMessage',
        'CommonContainer',
        'ContentContainer',
        'CurveContainer',
        'DynamicInfoContainer',
        'IncidentsContainer',
        'LaneClosureContainer',
        'ReducedSpeedZoneContainer',
        'SituationalContainer',
        'ApplicableHeading',
        'AreaType',
        'AudioLink',
        'BroadRegion',
        'BroadRegionArea',
        'CrossLinking',
        'EventIdentifier',
        'EventInfo',
        'EventRecurrence',
        'LaneInfo',
        'NodePointLLE',
        'Obstructions',
        'Offset3D',
        'Path',
        'PathList',
        'PathPoints',
        'RegionInfo',
        'RegionUncertainty',
        'RSMPolygon',
        'VisualLink',
        'Activity',
        'LatOffset',
        'LongOffset',
        'ElevOffset',
        'BankAngle',
        'HeadingDeg',
        'LaneClosed',
        'Radius',
        'ReferencePointType',
        'RSMLanePosition',
        'ShortString',
        'Tolerance',
        ]
    _type_ = [
        'RoadSafetyMessage',
        'CommonContainer',
        'ContentContainer',
        'CurveContainer',
        'DynamicInfoContainer',
        'IncidentsContainer',
        'LaneClosureContainer',
        'ReducedSpeedZoneContainer',
        'SituationalContainer',
        'ApplicableHeading',
        'AreaType',
        'AudioLink',
        'BroadRegion',
        'BroadRegionArea',
        'CrossLinking',
        'EventIdentifier',
        'EventInfo',
        'EventRecurrence',
        'LaneInfo',
        'NodePointLLE',
        'Obstructions',
        'Offset3D',
        'Path',
        'PathList',
        'PathPoints',
        'RegionInfo',
        'RegionUncertainty',
        'RSMPolygon',
        'VisualLink',
        'Activity',
        'LatOffset',
        'LongOffset',
        'ElevOffset',
        'BankAngle',
        'HeadingDeg',
        'LaneClosed',
        'Radius',
        'ReferencePointType',
        'RSMLanePosition',
        'ShortString',
        'Tolerance',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< RoadSafetyMessage >-----#
    RoadSafetyMessage = SEQ(name='RoadSafetyMessage', mode=MODE_TYPE)
    _RoadSafetyMessage_commonContainer = SEQ(name='commonContainer', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'CommonContainer')))
    _RoadSafetyMessage_content = SEQ_OF(name='content', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RoadSafetyMessage_content__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'ContentContainer')))
    _RoadSafetyMessage_content._cont = __RoadSafetyMessage_content__item_
    _RoadSafetyMessage_content._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RoadSafetyMessage._cont = ASN1Dict([
        ('commonContainer', _RoadSafetyMessage_commonContainer),
        ('content', _RoadSafetyMessage_content),
        ])
    RoadSafetyMessage._ext = []
    
    #-----< CommonContainer >-----#
    CommonContainer = SEQ(name='CommonContainer', mode=MODE_TYPE)
    _CommonContainer_eventInfo = SEQ(name='eventInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'EventInfo')))
    _CommonContainer_regionInfo = SEQ_OF(name='regionInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CommonContainer_regionInfo__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'RegionInfo')))
    _CommonContainer_regionInfo._cont = __CommonContainer_regionInfo__item_
    _CommonContainer_regionInfo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    _CommonContainer_crossLinking = SEQ(name='crossLinking', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'CrossLinking')), opt=True)
    CommonContainer._cont = ASN1Dict([
        ('eventInfo', _CommonContainer_eventInfo),
        ('regionInfo', _CommonContainer_regionInfo),
        ('crossLinking', _CommonContainer_crossLinking),
        ])
    CommonContainer._ext = []
    
    #-----< ContentContainer >-----#
    ContentContainer = CHOICE(name='ContentContainer', mode=MODE_TYPE)
    _ContentContainer_rszContainer = SEQ(name='rszContainer', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'ReducedSpeedZoneContainer')))
    _ContentContainer_laneClosureContainer = SEQ(name='laneClosureContainer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'LaneClosureContainer')))
    _ContentContainer_curveContainer = SEQ(name='curveContainer', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'CurveContainer')))
    _ContentContainer_dynamicInfoContainer = SEQ(name='dynamicInfoContainer', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'DynamicInfoContainer')))
    _ContentContainer_incidentsContainer = SEQ(name='incidentsContainer', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'IncidentsContainer')))
    _ContentContainer_situationalContainer = SEQ(name='situationalContainer', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'SituationalContainer')))
    ContentContainer._cont = ASN1Dict([
        ('rszContainer', _ContentContainer_rszContainer),
        ('laneClosureContainer', _ContentContainer_laneClosureContainer),
        ('curveContainer', _ContentContainer_curveContainer),
        ('dynamicInfoContainer', _ContentContainer_dynamicInfoContainer),
        ('incidentsContainer', _ContentContainer_incidentsContainer),
        ('situationalContainer', _ContentContainer_situationalContainer),
        ])
    ContentContainer._ext = []
    
    #-----< CurveContainer >-----#
    CurveContainer = SEQ(name='CurveContainer', mode=MODE_TYPE)
    _CurveContainer_advisorySpeed = INT(name='advisorySpeed', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SPAT', 'SpeedAdvice')))
    _CurveContainer_surfaceCondition = SEQ(name='surfaceCondition', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'FrictionInformation')), opt=True)
    _CurveContainer_minRadius = INT(name='minRadius', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Radius')), opt=True)
    _CurveContainer_bankAngle = INT(name='bankAngle', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'BankAngle')), opt=True)
    _CurveContainer_curveRegion = SEQ(name='curveRegion', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RegionInfo')), opt=True)
    CurveContainer._cont = ASN1Dict([
        ('advisorySpeed', _CurveContainer_advisorySpeed),
        ('surfaceCondition', _CurveContainer_surfaceCondition),
        ('minRadius', _CurveContainer_minRadius),
        ('bankAngle', _CurveContainer_bankAngle),
        ('curveRegion', _CurveContainer_curveRegion),
        ])
    CurveContainer._ext = []
    
    #-----< DynamicInfoContainer >-----#
    DynamicInfoContainer = SEQ(name='DynamicInfoContainer', mode=MODE_TYPE)
    _DynamicInfoContainer_priority = ENUM(name='priority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DynamicInfoContainer_priority._cont = ASN1Dict([('low-priority', 0), ('medium-priority', 1), ('high-priority', 2), ('critical', 3)])
    _DynamicInfoContainer_priority._ext = None
    _DynamicInfoContainer_dmsSignString = SEQ_OF(name='dmsSignString', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __DynamicInfoContainer_dmsSignString__item_ = STR_IA5(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'ShortString')))
    _DynamicInfoContainer_dmsSignString._cont = __DynamicInfoContainer_dmsSignString__item_
    _DynamicInfoContainer_dmsSignString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=12)], ev=None, er=[])
    _DynamicInfoContainer_applicableRegion = SEQ(name='applicableRegion', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RegionInfo')))
    DynamicInfoContainer._cont = ASN1Dict([
        ('priority', _DynamicInfoContainer_priority),
        ('dmsSignString', _DynamicInfoContainer_dmsSignString),
        ('applicableRegion', _DynamicInfoContainer_applicableRegion),
        ])
    DynamicInfoContainer._ext = []
    
    #-----< IncidentsContainer >-----#
    IncidentsContainer = SEQ(name='IncidentsContainer', mode=MODE_TYPE)
    _IncidentsContainer_responderType = SEQ_OF(name='responderType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IncidentsContainer_responderType__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITIS', 'ResponderGroupAffected')))
    _IncidentsContainer_responderType._cont = __IncidentsContainer_responderType__item_
    _IncidentsContainer_responderType._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    _IncidentsContainer_incidentLocation = SEQ(name='incidentLocation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RegionInfo')))
    IncidentsContainer._cont = ASN1Dict([
        ('responderType', _IncidentsContainer_responderType),
        ('incidentLocation', _IncidentsContainer_incidentLocation),
        ])
    IncidentsContainer._ext = []
    
    #-----< LaneClosureContainer >-----#
    LaneClosureContainer = SEQ(name='LaneClosureContainer', mode=MODE_TYPE)
    _LaneClosureContainer_laneStatus = SEQ_OF(name='laneStatus', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __LaneClosureContainer_laneStatus__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'LaneInfo')))
    _LaneClosureContainer_laneStatus._cont = __LaneClosureContainer_laneStatus__item_
    _LaneClosureContainer_laneStatus._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    _LaneClosureContainer_laneStatusVaries = BOOL(name='laneStatusVaries', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Activity')), opt=True)
    _LaneClosureContainer_closureRegion = SEQ(name='closureRegion', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RegionInfo')))
    LaneClosureContainer._cont = ASN1Dict([
        ('laneStatus', _LaneClosureContainer_laneStatus),
        ('laneStatusVaries', _LaneClosureContainer_laneStatusVaries),
        ('closureRegion', _LaneClosureContainer_closureRegion),
        ])
    LaneClosureContainer._ext = []
    
    #-----< ReducedSpeedZoneContainer >-----#
    ReducedSpeedZoneContainer = SEQ(name='ReducedSpeedZoneContainer', mode=MODE_TYPE)
    _ReducedSpeedZoneContainer_speedLimit = SEQ(name='speedLimit', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegulatorySpeedLimit')))
    _ReducedSpeedZoneContainer_rszRegion = SEQ(name='rszRegion', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RegionInfo')))
    ReducedSpeedZoneContainer._cont = ASN1Dict([
        ('speedLimit', _ReducedSpeedZoneContainer_speedLimit),
        ('rszRegion', _ReducedSpeedZoneContainer_rszRegion),
        ])
    ReducedSpeedZoneContainer._ext = []
    
    #-----< SituationalContainer >-----#
    SituationalContainer = SEQ(name='SituationalContainer', mode=MODE_TYPE)
    _SituationalContainer_obstructions = SEQ(name='obstructions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Obstructions')), opt=True)
    _SituationalContainer_visibility = INT(name='visibility', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadWeatherMessage', 'NTCIPEssVisibility')), opt=True)
    _SituationalContainer_peoplePresent = BOOL(name='peoplePresent', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Activity')), opt=True)
    _SituationalContainer_anomalousTraffic = BOOL(name='anomalousTraffic', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Activity')), opt=True)
    _SituationalContainer_applicableRegion = SEQ(name='applicableRegion', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RegionInfo')))
    SituationalContainer._cont = ASN1Dict([
        ('obstructions', _SituationalContainer_obstructions),
        ('visibility', _SituationalContainer_visibility),
        ('peoplePresent', _SituationalContainer_peoplePresent),
        ('anomalousTraffic', _SituationalContainer_anomalousTraffic),
        ('applicableRegion', _SituationalContainer_applicableRegion),
        ])
    SituationalContainer._ext = []
    
    #-----< ApplicableHeading >-----#
    ApplicableHeading = SEQ(name='ApplicableHeading', mode=MODE_TYPE)
    _ApplicableHeading_heading = INT(name='heading', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'HeadingDeg')))
    _ApplicableHeading_tolerance = INT(name='tolerance', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Tolerance')))
    ApplicableHeading._cont = ASN1Dict([
        ('heading', _ApplicableHeading_heading),
        ('tolerance', _ApplicableHeading_tolerance),
        ])
    ApplicableHeading._ext = []
    
    #-----< AreaType >-----#
    AreaType = CHOICE(name='AreaType', mode=MODE_TYPE)
    _AreaType_broadRegion = SEQ(name='broadRegion', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'BroadRegion')))
    _AreaType_paths = SEQ_OF(name='paths', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'PathList')))
    AreaType._cont = ASN1Dict([
        ('broadRegion', _AreaType_broadRegion),
        ('paths', _AreaType_paths),
        ])
    AreaType._ext = []
    
    #-----< AudioLink >-----#
    AudioLink = SEQ(name='AudioLink', mode=MODE_TYPE)
    _AudioLink_amChannel = INT(name='amChannel', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _AudioLink_amChannel._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=531, ub=1710)], ev=None, er=[])
    _AudioLink_fmChannel = INT(name='fmChannel', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _AudioLink_fmChannel._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=65800, ub=108009)], ev=None, er=[])
    _AudioLink_satelliteChannel = INT(name='satelliteChannel', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _AudioLink_satelliteChannel._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9999)], ev=None, er=[])
    _AudioLink_urlChannel = STR_IA5(name='urlChannel', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _AudioLink_urlChannel._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=500)], ev=None, er=[])
    AudioLink._cont = ASN1Dict([
        ('amChannel', _AudioLink_amChannel),
        ('fmChannel', _AudioLink_fmChannel),
        ('satelliteChannel', _AudioLink_satelliteChannel),
        ('urlChannel', _AudioLink_urlChannel),
        ])
    AudioLink._ext = []
    
    #-----< BroadRegion >-----#
    BroadRegion = SEQ(name='BroadRegion', mode=MODE_TYPE)
    _BroadRegion_applicableHeading = SEQ(name='applicableHeading', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'ApplicableHeading')))
    _BroadRegion_broadArea = CHOICE(name='broadArea', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'BroadRegionArea')))
    BroadRegion._cont = ASN1Dict([
        ('applicableHeading', _BroadRegion_applicableHeading),
        ('broadArea', _BroadRegion_broadArea),
        ])
    BroadRegion._ext = []
    
    #-----< BroadRegionArea >-----#
    BroadRegionArea = CHOICE(name='BroadRegionArea', mode=MODE_TYPE)
    _BroadRegionArea_polygon = SEQ_OF(name='polygon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RSMPolygon')))
    _BroadRegionArea_circle = SEQ(name='circle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Circle')))
    BroadRegionArea._cont = ASN1Dict([
        ('polygon', _BroadRegionArea_polygon),
        ('circle', _BroadRegionArea_circle),
        ])
    BroadRegionArea._ext = []
    
    #-----< CrossLinking >-----#
    CrossLinking = SEQ(name='CrossLinking', mode=MODE_TYPE)
    _CrossLinking_audioLinks = SEQ_OF(name='audioLinks', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CrossLinking_audioLinks__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'AudioLink')))
    _CrossLinking_audioLinks._cont = __CrossLinking_audioLinks__item_
    _CrossLinking_audioLinks._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _CrossLinking_visualLink = SEQ_OF(name='visualLink', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CrossLinking_visualLink__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'VisualLink')))
    _CrossLinking_visualLink._cont = __CrossLinking_visualLink__item_
    _CrossLinking_visualLink._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _CrossLinking_rsmLink = SEQ_OF(name='rsmLink', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CrossLinking_rsmLink__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'EventIdentifier')))
    _CrossLinking_rsmLink._cont = __CrossLinking_rsmLink__item_
    _CrossLinking_rsmLink._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    CrossLinking._cont = ASN1Dict([
        ('audioLinks', _CrossLinking_audioLinks),
        ('visualLink', _CrossLinking_visualLink),
        ('rsmLink', _CrossLinking_rsmLink),
        ])
    CrossLinking._ext = []
    
    #-----< EventIdentifier >-----#
    EventIdentifier = SEQ(name='EventIdentifier', mode=MODE_TYPE)
    _EventIdentifier_operatorID = CHOICE(name='operatorID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'RoadAuthorityID')))
    _EventIdentifier_uniqueID = OCT_STR(name='uniqueID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    EventIdentifier._cont = ASN1Dict([
        ('operatorID', _EventIdentifier_operatorID),
        ('uniqueID', _EventIdentifier_uniqueID),
        ])
    EventIdentifier._ext = []
    
    #-----< EventInfo >-----#
    EventInfo = SEQ(name='EventInfo', mode=MODE_TYPE)
    _EventInfo_eventID = SEQ(name='eventID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'EventIdentifier')))
    _EventInfo_eventUpdate = INT(name='eventUpdate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _EventInfo_eventCancellation = BOOL(name='eventCancellation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Activity')))
    _EventInfo_startDateTime = SEQ(name='startDateTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _EventInfo_endDateTime = SEQ(name='endDateTime', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')), opt=True)
    _EventInfo_eventRecurrence = SEQ_OF(name='eventRecurrence', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __EventInfo_eventRecurrence__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'EventRecurrence')))
    _EventInfo_eventRecurrence._cont = __EventInfo_eventRecurrence__item_
    _EventInfo_eventRecurrence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=[], er=[])
    _EventInfo_causeCode = INT(name='causeCode', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('J2540ITIS', 'ITISgroups')))
    _EventInfo_subCauseCode = INT(name='subCauseCode', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')), opt=True)
    _EventInfo_affectedVehicles = SEQ_OF(name='affectedVehicles', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __EventInfo_affectedVehicles__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITIS', 'VehicleGroupAffected')))
    _EventInfo_affectedVehicles._cont = __EventInfo_affectedVehicles__item_
    _EventInfo_affectedVehicles._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    EventInfo._cont = ASN1Dict([
        ('eventID', _EventInfo_eventID),
        ('eventUpdate', _EventInfo_eventUpdate),
        ('eventCancellation', _EventInfo_eventCancellation),
        ('startDateTime', _EventInfo_startDateTime),
        ('endDateTime', _EventInfo_endDateTime),
        ('eventRecurrence', _EventInfo_eventRecurrence),
        ('causeCode', _EventInfo_causeCode),
        ('subCauseCode', _EventInfo_subCauseCode),
        ('affectedVehicles', _EventInfo_affectedVehicles),
        ])
    EventInfo._ext = []
    
    #-----< EventRecurrence >-----#
    EventRecurrence = SEQ(name='EventRecurrence', mode=MODE_TYPE)
    _EventRecurrence_startTime = SEQ(name='startTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DTime')), opt=True)
    _EventRecurrence_endTime = SEQ(name='endTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DTime')), opt=True)
    _EventRecurrence_startDate = SEQ(name='startDate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDate')), opt=True)
    _EventRecurrence_endDate = SEQ(name='endDate', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDate')), opt=True)
    _EventRecurrence_monday = BOOL(name='monday', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EventRecurrence_tuesday = BOOL(name='tuesday', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EventRecurrence_wednesday = BOOL(name='wednesday', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EventRecurrence_thursday = BOOL(name='thursday', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EventRecurrence_friday = BOOL(name='friday', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EventRecurrence_saturday = BOOL(name='saturday', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EventRecurrence_sunday = BOOL(name='sunday', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EventRecurrence_exclusion = BOOL(name='exclusion', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    EventRecurrence._cont = ASN1Dict([
        ('startTime', _EventRecurrence_startTime),
        ('endTime', _EventRecurrence_endTime),
        ('startDate', _EventRecurrence_startDate),
        ('endDate', _EventRecurrence_endDate),
        ('monday', _EventRecurrence_monday),
        ('tuesday', _EventRecurrence_tuesday),
        ('wednesday', _EventRecurrence_wednesday),
        ('thursday', _EventRecurrence_thursday),
        ('friday', _EventRecurrence_friday),
        ('saturday', _EventRecurrence_saturday),
        ('sunday', _EventRecurrence_sunday),
        ('exclusion', _EventRecurrence_exclusion),
        ])
    EventRecurrence._ext = []
    
    #-----< LaneInfo >-----#
    LaneInfo = SEQ(name='LaneInfo', mode=MODE_TYPE)
    _LaneInfo_lanePosition = INT(name='lanePosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RSMLanePosition')))
    _LaneInfo_laneClosed = BOOL(name='laneClosed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'LaneClosed')))
    _LaneInfo_laneCloseOffset = INT(name='laneCloseOffset', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ObstacleDistance')), opt=True)
    LaneInfo._cont = ASN1Dict([
        ('lanePosition', _LaneInfo_lanePosition),
        ('laneClosed', _LaneInfo_laneClosed),
        ('laneCloseOffset', _LaneInfo_laneCloseOffset),
        ])
    LaneInfo._ext = []
    
    #-----< NodePointLLE >-----#
    NodePointLLE = CHOICE(name='NodePointLLE', mode=MODE_TYPE)
    _NodePointLLE_node_3Dabsolute = SEQ(name='node-3Dabsolute', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _NodePointLLE_node_3Doffset = SEQ(name='node-3Doffset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Offset3D')))
    NodePointLLE._cont = ASN1Dict([
        ('node-3Dabsolute', _NodePointLLE_node_3Dabsolute),
        ('node-3Doffset', _NodePointLLE_node_3Doffset),
        ])
    NodePointLLE._ext = []
    
    #-----< Obstructions >-----#
    Obstructions = SEQ(name='Obstructions', mode=MODE_TYPE)
    _Obstructions_location = SEQ(name='location', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _Obstructions_description = INT(name='description', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITIS', 'ITIScodes')), opt=True)
    Obstructions._cont = ASN1Dict([
        ('location', _Obstructions_location),
        ('description', _Obstructions_description),
        ])
    Obstructions._ext = []
    
    #-----< Offset3D >-----#
    Offset3D = SEQ(name='Offset3D', mode=MODE_TYPE)
    _Offset3D_lat_offset = INT(name='lat-offset', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'LatOffset')))
    _Offset3D_long_offset = INT(name='long-offset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'LongOffset')))
    _Offset3D_elev_offset = INT(name='elev-offset', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'ElevOffset')), opt=True)
    Offset3D._cont = ASN1Dict([
        ('lat-offset', _Offset3D_lat_offset),
        ('long-offset', _Offset3D_long_offset),
        ('elev-offset', _Offset3D_elev_offset),
        ])
    Offset3D._ext = []
    
    #-----< Path >-----#
    Path = SEQ(name='Path', mode=MODE_TYPE)
    _Path_pathWidth = INT(name='pathWidth', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Path_pathWidth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1000)], ev=None, er=[])
    _Path_pathPoints = SEQ_OF(name='pathPoints', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'PathPoints')))
    Path._cont = ASN1Dict([
        ('pathWidth', _Path_pathWidth),
        ('pathPoints', _Path_pathPoints),
        ])
    Path._ext = []
    
    #-----< PathList >-----#
    PathList = SEQ_OF(name='PathList', mode=MODE_TYPE)
    _PathList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'Path')))
    PathList._cont = _PathList__item_
    PathList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    
    #-----< PathPoints >-----#
    PathPoints = SEQ_OF(name='PathPoints', mode=MODE_TYPE)
    _PathPoints__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'NodePointLLE')))
    PathPoints._cont = _PathPoints__item_
    PathPoints._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=63)], ev=[], er=[])
    
    #-----< RegionInfo >-----#
    RegionInfo = SEQ(name='RegionInfo', mode=MODE_TYPE)
    _RegionInfo_referencePoint = SEQ(name='referencePoint', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RegionInfo_locationUncertainty = CHOICE(name='locationUncertainty', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'RegionUncertainty')), opt=True)
    _RegionInfo_referencePointType = ENUM(name='referencePointType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'ReferencePointType')), opt=True)
    _RegionInfo_descriptiveName = STR_IA5(name='descriptiveName', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _RegionInfo_scale = INT(name='scale', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'Zoom')), opt=True)
    _RegionInfo_approachRegion = CHOICE(name='approachRegion', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'AreaType')), opt=True)
    RegionInfo._cont = ASN1Dict([
        ('referencePoint', _RegionInfo_referencePoint),
        ('locationUncertainty', _RegionInfo_locationUncertainty),
        ('referencePointType', _RegionInfo_referencePointType),
        ('descriptiveName', _RegionInfo_descriptiveName),
        ('scale', _RegionInfo_scale),
        ('approachRegion', _RegionInfo_approachRegion),
        ])
    RegionInfo._ext = []
    
    #-----< RegionUncertainty >-----#
    RegionUncertainty = CHOICE(name='RegionUncertainty', mode=MODE_TYPE)
    _RegionUncertainty_alongPath = SEQ(name='alongPath', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Offset3D')))
    _RegionUncertainty_inCoordinateFrame = SEQ(name='inCoordinateFrame', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadSafetyMessage', 'Offset3D')))
    RegionUncertainty._cont = ASN1Dict([
        ('alongPath', _RegionUncertainty_alongPath),
        ('inCoordinateFrame', _RegionUncertainty_inCoordinateFrame),
        ])
    RegionUncertainty._ext = []
    
    #-----< RSMPolygon >-----#
    RSMPolygon = SEQ_OF(name='RSMPolygon', mode=MODE_TYPE)
    _RSMPolygon__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'NodePointLLE')))
    RSMPolygon._cont = _RSMPolygon__item_
    RSMPolygon._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=3, ub=63)], ev=None, er=[])
    
    #-----< VisualLink >-----#
    VisualLink = SEQ(name='VisualLink', mode=MODE_TYPE)
    _VisualLink_urlLink = STR_IA5(name='urlLink', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VisualLink_urlLink._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=500)], ev=None, er=[])
    VisualLink._cont = ASN1Dict([
        ('urlLink', _VisualLink_urlLink),
        ])
    VisualLink._ext = []
    
    #-----< Activity >-----#
    Activity = BOOL(name='Activity', mode=MODE_TYPE)
    
    #-----< LatOffset >-----#
    LatOffset = INT(name='LatOffset', mode=MODE_TYPE)
    LatOffset._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-16384, ub=16383)], ev=None, er=[])
    
    #-----< LongOffset >-----#
    LongOffset = INT(name='LongOffset', mode=MODE_TYPE)
    LongOffset._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-16384, ub=16383)], ev=None, er=[])
    
    #-----< ElevOffset >-----#
    ElevOffset = INT(name='ElevOffset', mode=MODE_TYPE)
    ElevOffset._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-4096, ub=4095)], ev=None, er=[])
    
    #-----< BankAngle >-----#
    BankAngle = INT(name='BankAngle', mode=MODE_TYPE)
    BankAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-512, ub=512)], ev=None, er=[])
    
    #-----< HeadingDeg >-----#
    HeadingDeg = INT(name='HeadingDeg', mode=MODE_TYPE)
    HeadingDeg._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    
    #-----< LaneClosed >-----#
    LaneClosed = BOOL(name='LaneClosed', mode=MODE_TYPE)
    
    #-----< Radius >-----#
    Radius = INT(name='Radius', mode=MODE_TYPE)
    Radius._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ReferencePointType >-----#
    ReferencePointType = ENUM(name='ReferencePointType', mode=MODE_TYPE)
    ReferencePointType._cont = ASN1Dict([('startOfEvent', 0), ('arbitrary', 1)])
    ReferencePointType._ext = []
    
    #-----< RSMLanePosition >-----#
    RSMLanePosition = INT(name='RSMLanePosition', mode=MODE_TYPE)
    RSMLanePosition._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< ShortString >-----#
    ShortString = STR_IA5(name='ShortString', mode=MODE_TYPE)
    ShortString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< Tolerance >-----#
    Tolerance = INT(name='Tolerance', mode=MODE_TYPE)
    Tolerance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=180)], ev=None, er=[])
    
    _all_ = [
        _RoadSafetyMessage_commonContainer,
        __RoadSafetyMessage_content__item_,
        _RoadSafetyMessage_content,
        RoadSafetyMessage,
        _CommonContainer_eventInfo,
        __CommonContainer_regionInfo__item_,
        _CommonContainer_regionInfo,
        _CommonContainer_crossLinking,
        CommonContainer,
        _ContentContainer_rszContainer,
        _ContentContainer_laneClosureContainer,
        _ContentContainer_curveContainer,
        _ContentContainer_dynamicInfoContainer,
        _ContentContainer_incidentsContainer,
        _ContentContainer_situationalContainer,
        ContentContainer,
        _CurveContainer_advisorySpeed,
        _CurveContainer_surfaceCondition,
        _CurveContainer_minRadius,
        _CurveContainer_bankAngle,
        _CurveContainer_curveRegion,
        CurveContainer,
        _DynamicInfoContainer_priority,
        __DynamicInfoContainer_dmsSignString__item_,
        _DynamicInfoContainer_dmsSignString,
        _DynamicInfoContainer_applicableRegion,
        DynamicInfoContainer,
        __IncidentsContainer_responderType__item_,
        _IncidentsContainer_responderType,
        _IncidentsContainer_incidentLocation,
        IncidentsContainer,
        __LaneClosureContainer_laneStatus__item_,
        _LaneClosureContainer_laneStatus,
        _LaneClosureContainer_laneStatusVaries,
        _LaneClosureContainer_closureRegion,
        LaneClosureContainer,
        _ReducedSpeedZoneContainer_speedLimit,
        _ReducedSpeedZoneContainer_rszRegion,
        ReducedSpeedZoneContainer,
        _SituationalContainer_obstructions,
        _SituationalContainer_visibility,
        _SituationalContainer_peoplePresent,
        _SituationalContainer_anomalousTraffic,
        _SituationalContainer_applicableRegion,
        SituationalContainer,
        _ApplicableHeading_heading,
        _ApplicableHeading_tolerance,
        ApplicableHeading,
        _AreaType_broadRegion,
        _AreaType_paths,
        AreaType,
        _AudioLink_amChannel,
        _AudioLink_fmChannel,
        _AudioLink_satelliteChannel,
        _AudioLink_urlChannel,
        AudioLink,
        _BroadRegion_applicableHeading,
        _BroadRegion_broadArea,
        BroadRegion,
        _BroadRegionArea_polygon,
        _BroadRegionArea_circle,
        BroadRegionArea,
        __CrossLinking_audioLinks__item_,
        _CrossLinking_audioLinks,
        __CrossLinking_visualLink__item_,
        _CrossLinking_visualLink,
        __CrossLinking_rsmLink__item_,
        _CrossLinking_rsmLink,
        CrossLinking,
        _EventIdentifier_operatorID,
        _EventIdentifier_uniqueID,
        EventIdentifier,
        _EventInfo_eventID,
        _EventInfo_eventUpdate,
        _EventInfo_eventCancellation,
        _EventInfo_startDateTime,
        _EventInfo_endDateTime,
        __EventInfo_eventRecurrence__item_,
        _EventInfo_eventRecurrence,
        _EventInfo_causeCode,
        _EventInfo_subCauseCode,
        __EventInfo_affectedVehicles__item_,
        _EventInfo_affectedVehicles,
        EventInfo,
        _EventRecurrence_startTime,
        _EventRecurrence_endTime,
        _EventRecurrence_startDate,
        _EventRecurrence_endDate,
        _EventRecurrence_monday,
        _EventRecurrence_tuesday,
        _EventRecurrence_wednesday,
        _EventRecurrence_thursday,
        _EventRecurrence_friday,
        _EventRecurrence_saturday,
        _EventRecurrence_sunday,
        _EventRecurrence_exclusion,
        EventRecurrence,
        _LaneInfo_lanePosition,
        _LaneInfo_laneClosed,
        _LaneInfo_laneCloseOffset,
        LaneInfo,
        _NodePointLLE_node_3Dabsolute,
        _NodePointLLE_node_3Doffset,
        NodePointLLE,
        _Obstructions_location,
        _Obstructions_description,
        Obstructions,
        _Offset3D_lat_offset,
        _Offset3D_long_offset,
        _Offset3D_elev_offset,
        Offset3D,
        _Path_pathWidth,
        _Path_pathPoints,
        Path,
        _PathList__item_,
        PathList,
        _PathPoints__item_,
        PathPoints,
        _RegionInfo_referencePoint,
        _RegionInfo_locationUncertainty,
        _RegionInfo_referencePointType,
        _RegionInfo_descriptiveName,
        _RegionInfo_scale,
        _RegionInfo_approachRegion,
        RegionInfo,
        _RegionUncertainty_alongPath,
        _RegionUncertainty_inCoordinateFrame,
        RegionUncertainty,
        _RSMPolygon__item_,
        RSMPolygon,
        _VisualLink_urlLink,
        VisualLink,
        Activity,
        LatOffset,
        LongOffset,
        ElevOffset,
        BankAngle,
        HeadingDeg,
        LaneClosed,
        Radius,
        ReferencePointType,
        RSMLanePosition,
        ShortString,
        Tolerance,
    ]

class CooperativeControlMessage:

    _name_  = 'CooperativeControlMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 8, 1, 2945, 6, 1, 40, 1, 1]
    
    _obj_ = [
        'CooperativeControlMessage',
        'PARTII-EXT-ID-AND-TYPE',
        'CCMPartIIcontent',
        'PartII-Id',
        'vehicleSafetyExt',
        'lightVehicleCCMExt',
        'heavyTruckCCMExt',
        'CCMpartIIExtension',
        'LightVehicleCCMExtensions',
        'HeavyTruckCCMExtensions',
        'LongitudinalControlState',
        'AccelTimeConstant',
        'TimeConstant',
        'AxesMovement',
        'RoadGrade',
        'BrakePedalPosition',
        'AcceleratorPedalPosition',
        'Torque',
        'Yaw',
        'Pitch',
        'Roll',
        'PitchRate',
        'RollRate',
        'SeparationDistance',
        'TotalMass',
        'MaxAvailableAcceleration',
        'MaxAvailableDeceleration',
        'CCMFaultMode',
        'ManeuverID',
        'FrontCutIn',
        ]
    _type_ = [
        'CooperativeControlMessage',
        'PARTII-EXT-ID-AND-TYPE',
        'CCMPartIIcontent',
        'PartII-Id',
        'LightVehicleCCMExtensions',
        'HeavyTruckCCMExtensions',
        'LongitudinalControlState',
        'AccelTimeConstant',
        'TimeConstant',
        'AxesMovement',
        'RoadGrade',
        'BrakePedalPosition',
        'AcceleratorPedalPosition',
        'Torque',
        'Yaw',
        'Pitch',
        'Roll',
        'PitchRate',
        'RollRate',
        'SeparationDistance',
        'TotalMass',
        'MaxAvailableAcceleration',
        'MaxAvailableDeceleration',
        'CCMFaultMode',
        'ManeuverID',
        'FrontCutIn',
        ]
    _set_ = [
        'CCMpartIIExtension',
        ]
    _val_ = [
        'vehicleSafetyExt',
        'lightVehicleCCMExt',
        'heavyTruckCCMExt',
        ]
    _class_ = [
        'PARTII-EXT-ID-AND-TYPE',
        'CCMpartIIExtension',
        ]
    _param_ = [
        'CCMPartIIcontent',
        ]
    
    #-----< CooperativeControlMessage >-----#
    CooperativeControlMessage = SEQ(name='CooperativeControlMessage', mode=MODE_TYPE)
    _CooperativeControlMessage_coreData = SEQ(name='coreData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BSMcoreData')))
    _CooperativeControlMessage_partII = SEQ_OF(name='partII', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CooperativeControlMessage_partII__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CooperativeControlMessage', 'CCMPartIIcontent')))
    ___CooperativeControlMessage_partII__item__partII_Id = INT(name='partII-Id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CooperativeControlMessage', 'PARTII-EXT-ID-AND-TYPE'), ['id']))
    ____CooperativeControlMessage_partII__item__partII_Id_tab = CLASS(name='_tab_PARTII-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('CooperativeControlMessage', 'PARTII-EXT-ID-AND-TYPE')))
    _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'VehicleSafetyExtensions')))
    _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CooperativeControlMessage', 'LightVehicleCCMExtensions')))
    _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CooperativeControlMessage', 'HeavyTruckCCMExtensions')))
    ____CooperativeControlMessage_partII__item__partII_Id_tab._val = ASN1Set(rv=[dict([('Type', _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_0), ('id', 0)]), dict([('Type', _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_1), ('id', 1)]), dict([('Type', _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_2), ('id', 2)])], rr=[], ev=None, er=[])
    ___CooperativeControlMessage_partII__item__partII_Id._const_tab = ____CooperativeControlMessage_partII__item__partII_Id_tab
    ___CooperativeControlMessage_partII__item__partII_Id._const_tab_at = None
    ___CooperativeControlMessage_partII__item__partII_Id._const_tab_id = 'id'
    ___CooperativeControlMessage_partII__item__partII_Value = OPEN(name='partII-Value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CooperativeControlMessage', 'PARTII-EXT-ID-AND-TYPE'), ['Type']))
    ___CooperativeControlMessage_partII__item__partII_Value._const_tab = ____CooperativeControlMessage_partII__item__partII_Id_tab
    ___CooperativeControlMessage_partII__item__partII_Value._const_tab_at = ('..', 'partII-Id')
    ___CooperativeControlMessage_partII__item__partII_Value._const_tab_id = 'Type'
    __CooperativeControlMessage_partII__item_._cont = ASN1Dict([
        ('partII-Id', ___CooperativeControlMessage_partII__item__partII_Id),
        ('partII-Value', ___CooperativeControlMessage_partII__item__partII_Value),
        ])
    __CooperativeControlMessage_partII__item_._ext = None
    _CooperativeControlMessage_partII._cont = __CooperativeControlMessage_partII__item_
    _CooperativeControlMessage_partII._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    CooperativeControlMessage._cont = ASN1Dict([
        ('coreData', _CooperativeControlMessage_coreData),
        ('partII', _CooperativeControlMessage_partII),
        ])
    CooperativeControlMessage._ext = []
    
    #-----< PARTII-EXT-ID-AND-TYPE >-----#
    PARTII_EXT_ID_AND_TYPE = CLASS(name='PARTII-EXT-ID-AND-TYPE', mode=MODE_TYPE)
    _PARTII_EXT_ID_AND_TYPE_id = INT(name='id', mode=MODE_VALUE, typeref=ASN1RefType(('CooperativeControlMessage', 'PartII-Id')), uniq=True)
    _PARTII_EXT_ID_AND_TYPE_Type = OPEN(name='Type', mode=MODE_TYPE)
    PARTII_EXT_ID_AND_TYPE._cont = ASN1Dict([
        ('id', _PARTII_EXT_ID_AND_TYPE_id),
        ('Type', _PARTII_EXT_ID_AND_TYPE_Type),
        ])
    
    #-----< CCMPartIIcontent >-----#
    CCMPartIIcontent = SEQ(name='CCMPartIIcontent', mode=MODE_TYPE, param=True)
    
    #-----< PartII-Id >-----#
    PartII_Id = INT(name='PartII-Id', mode=MODE_TYPE)
    PartII_Id._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=63)], ev=None, er=[])
    
    #-----< vehicleSafetyExt >-----#
    vehicleSafetyExt = INT(name='vehicleSafetyExt', mode=MODE_VALUE, typeref=ASN1RefType(('CooperativeControlMessage', 'PartII-Id')))
    vehicleSafetyExt._val = 0
    
    #-----< lightVehicleCCMExt >-----#
    lightVehicleCCMExt = INT(name='lightVehicleCCMExt', mode=MODE_VALUE, typeref=ASN1RefType(('CooperativeControlMessage', 'PartII-Id')))
    lightVehicleCCMExt._val = 1
    
    #-----< heavyTruckCCMExt >-----#
    heavyTruckCCMExt = INT(name='heavyTruckCCMExt', mode=MODE_VALUE, typeref=ASN1RefType(('CooperativeControlMessage', 'PartII-Id')))
    heavyTruckCCMExt._val = 2
    
    #-----< CCMpartIIExtension >-----#
    CCMpartIIExtension = CLASS(name='CCMpartIIExtension', mode=MODE_SET, typeref=ASN1RefType(('CooperativeControlMessage', 'PARTII-EXT-ID-AND-TYPE')))
    _CCMpartIIExtension_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'VehicleSafetyExtensions')))
    _CCMpartIIExtension_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CooperativeControlMessage', 'LightVehicleCCMExtensions')))
    _CCMpartIIExtension_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CooperativeControlMessage', 'HeavyTruckCCMExtensions')))
    CCMpartIIExtension._val = ASN1Set(rv=[dict([('Type', _CCMpartIIExtension_val_Type_0), ('id', 0)]), dict([('Type', _CCMpartIIExtension_val_Type_1), ('id', 1)]), dict([('Type', _CCMpartIIExtension_val_Type_2), ('id', 2)])], rr=[], ev=[], er=[])
    
    #-----< LightVehicleCCMExtensions >-----#
    LightVehicleCCMExtensions = SEQ(name='LightVehicleCCMExtensions', mode=MODE_TYPE)
    _LightVehicleCCMExtensions_longCntrlState = ENUM(name='longCntrlState', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'LongitudinalControlState')))
    _LightVehicleCCMExtensions_targetId = OCT_STR(name='targetId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')), opt=True)
    _LightVehicleCCMExtensions_accelForecast = INT(name='accelForecast', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Acceleration')), opt=True)
    _LightVehicleCCMExtensions_accelTimeConst = SEQ(name='accelTimeConst', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'AccelTimeConstant')), opt=True)
    _LightVehicleCCMExtensions_seperationDist = INT(name='seperationDist', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'SeparationDistance')), opt=True)
    _LightVehicleCCMExtensions_frontCutIn = BOOL(name='frontCutIn', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'FrontCutIn')), opt=True)
    LightVehicleCCMExtensions._cont = ASN1Dict([
        ('longCntrlState', _LightVehicleCCMExtensions_longCntrlState),
        ('targetId', _LightVehicleCCMExtensions_targetId),
        ('accelForecast', _LightVehicleCCMExtensions_accelForecast),
        ('accelTimeConst', _LightVehicleCCMExtensions_accelTimeConst),
        ('seperationDist', _LightVehicleCCMExtensions_seperationDist),
        ('frontCutIn', _LightVehicleCCMExtensions_frontCutIn),
        ])
    LightVehicleCCMExtensions._ext = []
    
    #-----< HeavyTruckCCMExtensions >-----#
    HeavyTruckCCMExtensions = SEQ(name='HeavyTruckCCMExtensions', mode=MODE_TYPE)
    _HeavyTruckCCMExtensions_longCntrlState = ENUM(name='longCntrlState', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'LongitudinalControlState')))
    _HeavyTruckCCMExtensions_targetId = OCT_STR(name='targetId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')), opt=True)
    _HeavyTruckCCMExtensions_roadGrade = INT(name='roadGrade', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'RoadGrade')), opt=True)
    _HeavyTruckCCMExtensions_brakePedalPos = INT(name='brakePedalPos', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'BrakePedalPosition')), opt=True)
    _HeavyTruckCCMExtensions_accelPedalPos = INT(name='accelPedalPos', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'AcceleratorPedalPosition')), opt=True)
    _HeavyTruckCCMExtensions_desiredSpeed = INT(name='desiredSpeed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')), opt=True)
    _HeavyTruckCCMExtensions_desiredAccel = INT(name='desiredAccel', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Acceleration')), opt=True)
    _HeavyTruckCCMExtensions_desiredTorque = INT(name='desiredTorque', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'Torque')), opt=True)
    _HeavyTruckCCMExtensions_desiredTmRetarderTorque = INT(name='desiredTmRetarderTorque', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'Torque')), opt=True)
    _HeavyTruckCCMExtensions_desiredEngRetarderTorque = INT(name='desiredEngRetarderTorque', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'Torque')), opt=True)
    _HeavyTruckCCMExtensions_axesMvmt = SEQ(name='axesMvmt', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'AxesMovement')), opt=True)
    _HeavyTruckCCMExtensions_separationDist = INT(name='separationDist', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'SeparationDistance')), opt=True)
    _HeavyTruckCCMExtensions_totalMass = INT(name='totalMass', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'TotalMass')), opt=True)
    _HeavyTruckCCMExtensions_maxAvailAccel = INT(name='maxAvailAccel', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'MaxAvailableAcceleration')), opt=True)
    _HeavyTruckCCMExtensions_maxAvailDecel = INT(name='maxAvailDecel', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'MaxAvailableDeceleration')), opt=True)
    _HeavyTruckCCMExtensions_ccmFaultMode = BIT_STR(name='ccmFaultMode', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'CCMFaultMode')), opt=True)
    _HeavyTruckCCMExtensions_maneuverID = INT(name='maneuverID', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'ManeuverID')), opt=True)
    _HeavyTruckCCMExtensions_frontCutIn = BOOL(name='frontCutIn', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'FrontCutIn')), opt=True)
    HeavyTruckCCMExtensions._cont = ASN1Dict([
        ('longCntrlState', _HeavyTruckCCMExtensions_longCntrlState),
        ('targetId', _HeavyTruckCCMExtensions_targetId),
        ('roadGrade', _HeavyTruckCCMExtensions_roadGrade),
        ('brakePedalPos', _HeavyTruckCCMExtensions_brakePedalPos),
        ('accelPedalPos', _HeavyTruckCCMExtensions_accelPedalPos),
        ('desiredSpeed', _HeavyTruckCCMExtensions_desiredSpeed),
        ('desiredAccel', _HeavyTruckCCMExtensions_desiredAccel),
        ('desiredTorque', _HeavyTruckCCMExtensions_desiredTorque),
        ('desiredTmRetarderTorque', _HeavyTruckCCMExtensions_desiredTmRetarderTorque),
        ('desiredEngRetarderTorque', _HeavyTruckCCMExtensions_desiredEngRetarderTorque),
        ('axesMvmt', _HeavyTruckCCMExtensions_axesMvmt),
        ('separationDist', _HeavyTruckCCMExtensions_separationDist),
        ('totalMass', _HeavyTruckCCMExtensions_totalMass),
        ('maxAvailAccel', _HeavyTruckCCMExtensions_maxAvailAccel),
        ('maxAvailDecel', _HeavyTruckCCMExtensions_maxAvailDecel),
        ('ccmFaultMode', _HeavyTruckCCMExtensions_ccmFaultMode),
        ('maneuverID', _HeavyTruckCCMExtensions_maneuverID),
        ('frontCutIn', _HeavyTruckCCMExtensions_frontCutIn),
        ])
    HeavyTruckCCMExtensions._ext = []
    
    #-----< LongitudinalControlState >-----#
    LongitudinalControlState = ENUM(name='LongitudinalControlState', mode=MODE_TYPE)
    LongitudinalControlState._cont = ASN1Dict([('unavailable', 0), ('manual', 1), ('cc', 2), ('acc', 3), ('caccOne', 4), ('caccMultiple', 5), ('sensorAuto', 6), ('fusedAuto', 7), ('manualOver', 8)])
    LongitudinalControlState._ext = []
    
    #-----< AccelTimeConstant >-----#
    AccelTimeConstant = SEQ(name='AccelTimeConstant', mode=MODE_TYPE)
    _AccelTimeConstant_accelTimeConst = INT(name='accelTimeConst', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'TimeConstant')), opt=True)
    _AccelTimeConstant_decelTimeConst = INT(name='decelTimeConst', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'TimeConstant')), opt=True)
    AccelTimeConstant._cont = ASN1Dict([
        ('accelTimeConst', _AccelTimeConstant_accelTimeConst),
        ('decelTimeConst', _AccelTimeConstant_decelTimeConst),
        ])
    AccelTimeConstant._ext = None
    
    #-----< TimeConstant >-----#
    TimeConstant = INT(name='TimeConstant', mode=MODE_TYPE)
    TimeConstant._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AxesMovement >-----#
    AxesMovement = SEQ(name='AxesMovement', mode=MODE_TYPE)
    _AxesMovement_yaw = INT(name='yaw', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'Yaw')), opt=True)
    _AxesMovement_pitch = INT(name='pitch', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'Pitch')), opt=True)
    _AxesMovement_roll = INT(name='roll', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'Roll')), opt=True)
    _AxesMovement_yawRate = INT(name='yawRate', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'YawRate')), opt=True)
    _AxesMovement_pitchRate = INT(name='pitchRate', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'PitchRate')), opt=True)
    _AxesMovement_rollRate = INT(name='rollRate', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CooperativeControlMessage', 'RollRate')), opt=True)
    AxesMovement._cont = ASN1Dict([
        ('yaw', _AxesMovement_yaw),
        ('pitch', _AxesMovement_pitch),
        ('roll', _AxesMovement_roll),
        ('yawRate', _AxesMovement_yawRate),
        ('pitchRate', _AxesMovement_pitchRate),
        ('rollRate', _AxesMovement_rollRate),
        ])
    AxesMovement._ext = None
    
    #-----< RoadGrade >-----#
    RoadGrade = INT(name='RoadGrade', mode=MODE_TYPE)
    RoadGrade._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-100, ub=101)], ev=None, er=[])
    
    #-----< BrakePedalPosition >-----#
    BrakePedalPosition = INT(name='BrakePedalPosition', mode=MODE_TYPE)
    BrakePedalPosition._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=201)], ev=None, er=[])
    
    #-----< AcceleratorPedalPosition >-----#
    AcceleratorPedalPosition = INT(name='AcceleratorPedalPosition', mode=MODE_TYPE)
    AcceleratorPedalPosition._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=201)], ev=None, er=[])
    
    #-----< Torque >-----#
    Torque = INT(name='Torque', mode=MODE_TYPE)
    Torque._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=601)], ev=None, er=[])
    
    #-----< Yaw >-----#
    Yaw = INT(name='Yaw', mode=MODE_TYPE)
    Yaw._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=28800)], ev=None, er=[])
    
    #-----< Pitch >-----#
    Pitch = INT(name='Pitch', mode=MODE_TYPE)
    Pitch._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-7200, ub=7201)], ev=None, er=[])
    
    #-----< Roll >-----#
    Roll = INT(name='Roll', mode=MODE_TYPE)
    Roll._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-7200, ub=7201)], ev=None, er=[])
    
    #-----< PitchRate >-----#
    PitchRate = INT(name='PitchRate', mode=MODE_TYPE)
    PitchRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-3000, ub=3001)], ev=None, er=[])
    
    #-----< RollRate >-----#
    RollRate = INT(name='RollRate', mode=MODE_TYPE)
    RollRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-3000, ub=3001)], ev=None, er=[])
    
    #-----< SeparationDistance >-----#
    SeparationDistance = INT(name='SeparationDistance', mode=MODE_TYPE)
    SeparationDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2001)], ev=None, er=[])
    
    #-----< TotalMass >-----#
    TotalMass = INT(name='TotalMass', mode=MODE_TYPE)
    TotalMass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1288)], ev=None, er=[])
    
    #-----< MaxAvailableAcceleration >-----#
    MaxAvailableAcceleration = INT(name='MaxAvailableAcceleration', mode=MODE_TYPE)
    MaxAvailableAcceleration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2001)], ev=None, er=[])
    
    #-----< MaxAvailableDeceleration >-----#
    MaxAvailableDeceleration = INT(name='MaxAvailableDeceleration', mode=MODE_TYPE)
    MaxAvailableDeceleration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2001, ub=0)], ev=None, er=[])
    
    #-----< CCMFaultMode >-----#
    CCMFaultMode = BIT_STR(name='CCMFaultMode', mode=MODE_TYPE)
    CCMFaultMode._cont = ASN1Dict([('unavailable', 0), ('commFault', 1), ('radarFault', 2), ('lidarFault', 3), ('engingBrkCtlFault', 4), ('serviceBrkCtlFault', 5), ('transRetarderFault', 6), ('engineCtlFault', 7)])
    CCMFaultMode._const_sz = ASN1Set(rv=[8], rr=[], ev=[], er=[])
    
    #-----< ManeuverID >-----#
    ManeuverID = INT(name='ManeuverID', mode=MODE_TYPE)
    ManeuverID._cont = ASN1Dict([('unavailable', 0), ('stayAtRestManCtl', 1), ('stayAtRestAutoLonCtl', 2), ('autoSpdCtlFollowRefTrafAccel', 4), ('transManToAutoSpdCtl', 5), ('stringForm', 6), ('autoJoinString', 7), ('autoCtl', 8), ('increaseGapAutoCtl', 9), ('leftLnChgEndString', 10), ('rightLnChgEndString', 11), ('virtualGapIncDiffLane', 12), ('virtualGapRedDiffLane', 13), ('emgcyIncInterVehDistToStop', 14), ('vehMrgToStringFrmOnramp', 15), ('leftLnChgJoinString', 16), ('rightLnChgJoinString', 17), ('collisionAvoidLnChgOnly', 19), ('collisionAvoidLnChgWthSpdRed', 20), ('collisionAvoidEmgcyStp', 21), ('autoDecelFollowSpdProfile', 28), ('stoppingClosedloopVehFollowCtl', 31), ('stoppngOpenloopDecelCmd', 32), ('brakeToStopManCtl', 33), ('incGapContString', 34), ('incGapRedSpdToStp', 35), ('cruiseCtl', 36), ('adapCruiseCtl', 41), ('coopAdapCruiseCtl', 42), ('manCtl', 46), ('coordAutoBrkForStringWthSvcBrkEngBrk', 47), ('emgcyBrkForStringOnePlusVehWthSvcBrk', 48)])
    ManeuverID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< FrontCutIn >-----#
    FrontCutIn = BOOL(name='FrontCutIn', mode=MODE_TYPE)
    
    _all_ = [
        _CooperativeControlMessage_coreData,
        ____CooperativeControlMessage_partII__item__partII_Id_tab,
        _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_0,
        _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_1,
        _____CooperativeControlMessage_partII__item__partII_Id_tab_val_Type_2,
        ___CooperativeControlMessage_partII__item__partII_Id,
        ___CooperativeControlMessage_partII__item__partII_Value,
        __CooperativeControlMessage_partII__item_,
        _CooperativeControlMessage_partII,
        CooperativeControlMessage,
        _PARTII_EXT_ID_AND_TYPE_id,
        _PARTII_EXT_ID_AND_TYPE_Type,
        PARTII_EXT_ID_AND_TYPE,
        PartII_Id,
        vehicleSafetyExt,
        lightVehicleCCMExt,
        heavyTruckCCMExt,
        CCMpartIIExtension,
        _CCMpartIIExtension_val_Type_0,
        _CCMpartIIExtension_val_Type_1,
        _CCMpartIIExtension_val_Type_2,
        _LightVehicleCCMExtensions_longCntrlState,
        _LightVehicleCCMExtensions_targetId,
        _LightVehicleCCMExtensions_accelForecast,
        _LightVehicleCCMExtensions_accelTimeConst,
        _LightVehicleCCMExtensions_seperationDist,
        _LightVehicleCCMExtensions_frontCutIn,
        LightVehicleCCMExtensions,
        _HeavyTruckCCMExtensions_longCntrlState,
        _HeavyTruckCCMExtensions_targetId,
        _HeavyTruckCCMExtensions_roadGrade,
        _HeavyTruckCCMExtensions_brakePedalPos,
        _HeavyTruckCCMExtensions_accelPedalPos,
        _HeavyTruckCCMExtensions_desiredSpeed,
        _HeavyTruckCCMExtensions_desiredAccel,
        _HeavyTruckCCMExtensions_desiredTorque,
        _HeavyTruckCCMExtensions_desiredTmRetarderTorque,
        _HeavyTruckCCMExtensions_desiredEngRetarderTorque,
        _HeavyTruckCCMExtensions_axesMvmt,
        _HeavyTruckCCMExtensions_separationDist,
        _HeavyTruckCCMExtensions_totalMass,
        _HeavyTruckCCMExtensions_maxAvailAccel,
        _HeavyTruckCCMExtensions_maxAvailDecel,
        _HeavyTruckCCMExtensions_ccmFaultMode,
        _HeavyTruckCCMExtensions_maneuverID,
        _HeavyTruckCCMExtensions_frontCutIn,
        HeavyTruckCCMExtensions,
        LongitudinalControlState,
        _AccelTimeConstant_accelTimeConst,
        _AccelTimeConstant_decelTimeConst,
        AccelTimeConstant,
        TimeConstant,
        _AxesMovement_yaw,
        _AxesMovement_pitch,
        _AxesMovement_roll,
        _AxesMovement_yawRate,
        _AxesMovement_pitchRate,
        _AxesMovement_rollRate,
        AxesMovement,
        RoadGrade,
        BrakePedalPosition,
        AcceleratorPedalPosition,
        Torque,
        Yaw,
        Pitch,
        Roll,
        PitchRate,
        RollRate,
        SeparationDistance,
        TotalMass,
        MaxAvailableAcceleration,
        MaxAvailableDeceleration,
        CCMFaultMode,
        ManeuverID,
        FrontCutIn,
    ]

class PersonalSafetyMessage2:

    _name_  = 'PersonalSafetyMessage2'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 8, 1, 2945, 9, 1, 44, 1, 1]
    
    _obj_ = [
        'PersonalSafetyMessage2',
        ]
    _type_ = [
        'PersonalSafetyMessage2',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< PersonalSafetyMessage2 >-----#
    PersonalSafetyMessage2 = NULL(name='PersonalSafetyMessage2', mode=MODE_TYPE)
    
    _all_ = [
        PersonalSafetyMessage2,
    ]

class RoadGeometryAndAttributes:

    _name_  = 'RoadGeometryAndAttributes'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2945, 10, 1, 43, 1, 1]
    
    _obj_ = [
        'RoadGeometryAndAttributes',
        ]
    _type_ = [
        'RoadGeometryAndAttributes',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< RoadGeometryAndAttributes >-----#
    RoadGeometryAndAttributes = NULL(name='RoadGeometryAndAttributes', mode=MODE_TYPE)
    
    _all_ = [
        RoadGeometryAndAttributes,
    ]

class ProbeDataConfig:

    _name_  = 'ProbeDataConfig'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2945, 12, 1, 0, 1, 1]
    
    _obj_ = [
        'ProbeDataConfigMessage',
        'ProbeDataConfig',
        'ConfigDescriptor',
        'ConfigId',
        'CfgVehicleClass',
        'ConfigBoundary',
        'ConfigTemporalBoundary',
        'CfgEventRecurrence',
        'ConfigTriggers',
        'CfgInstantaneousEventTriggers',
        'CfgIntervalEvents',
        'CfgTransitVehicleData',
        'CfgInterval',
        'CfgVehicleEvents',
        'CfgKinematicEvents',
        'CfgEvents',
        'CfgHysteresis',
        'CfgEmerAndTransitInfo',
        'CfgMsgRecepIndicators',
        'CfgMsgDictionary',
        'CfgRoadwayEvents',
        'CfgTrafficSigEncounters',
        'CfgRoadSignInfo',
        'CfgRoadSignTypes',
        'CfgCommSysPerfEvents',
        'CfgAveragedAndSummaryTriggers',
        'CfgAveragedTriggers',
        'CfgSummaryTriggers',
        'CfgLowSpeedCriteria',
        'CfgStoppedCriteria',
        ]
    _type_ = [
        'ProbeDataConfigMessage',
        'ProbeDataConfig',
        'ConfigDescriptor',
        'ConfigId',
        'CfgVehicleClass',
        'ConfigBoundary',
        'ConfigTemporalBoundary',
        'CfgEventRecurrence',
        'ConfigTriggers',
        'CfgInstantaneousEventTriggers',
        'CfgIntervalEvents',
        'CfgTransitVehicleData',
        'CfgInterval',
        'CfgVehicleEvents',
        'CfgKinematicEvents',
        'CfgEvents',
        'CfgHysteresis',
        'CfgEmerAndTransitInfo',
        'CfgMsgRecepIndicators',
        'CfgMsgDictionary',
        'CfgRoadwayEvents',
        'CfgTrafficSigEncounters',
        'CfgRoadSignInfo',
        'CfgRoadSignTypes',
        'CfgCommSysPerfEvents',
        'CfgAveragedAndSummaryTriggers',
        'CfgAveragedTriggers',
        'CfgSummaryTriggers',
        'CfgLowSpeedCriteria',
        'CfgStoppedCriteria',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ProbeDataConfigMessage >-----#
    ProbeDataConfigMessage = SEQ_OF(name='ProbeDataConfigMessage', mode=MODE_TYPE)
    _ProbeDataConfigMessage__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataConfig', 'ProbeDataConfig')))
    ProbeDataConfigMessage._cont = _ProbeDataConfigMessage__item_
    ProbeDataConfigMessage._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=[], er=[])
    
    #-----< ProbeDataConfig >-----#
    ProbeDataConfig = SEQ(name='ProbeDataConfig', mode=MODE_TYPE)
    _ProbeDataConfig_descriptor = SEQ(name='descriptor', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'ConfigDescriptor')))
    _ProbeDataConfig_triggers = CHOICE(name='triggers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'ConfigTriggers')))
    _ProbeDataConfig_maxAgeOfData = INT(name='maxAgeOfData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProbeDataConfig_maxAgeOfData._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=90)], ev=None, er=[])
    _ProbeDataConfig_boundary = CHOICE(name='boundary', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'ConfigBoundary')), opt=True)
    ProbeDataConfig._cont = ASN1Dict([
        ('descriptor', _ProbeDataConfig_descriptor),
        ('triggers', _ProbeDataConfig_triggers),
        ('maxAgeOfData', _ProbeDataConfig_maxAgeOfData),
        ('boundary', _ProbeDataConfig_boundary),
        ])
    ProbeDataConfig._ext = []
    
    #-----< ConfigDescriptor >-----#
    ConfigDescriptor = SEQ(name='ConfigDescriptor', mode=MODE_TYPE)
    _ConfigDescriptor_identifier = INT(name='identifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'ConfigId')))
    _ConfigDescriptor_vehClass = SEQ(name='vehClass', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgVehicleClass')), opt=True)
    _ConfigDescriptor_roadAuthorityID = CHOICE(name='roadAuthorityID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'RoadAuthorityID')), opt=True)
    _ConfigDescriptor_percentOfResp = INT(name='percentOfResp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ConfigDescriptor_percentOfResp._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    ConfigDescriptor._cont = ASN1Dict([
        ('identifier', _ConfigDescriptor_identifier),
        ('vehClass', _ConfigDescriptor_vehClass),
        ('roadAuthorityID', _ConfigDescriptor_roadAuthorityID),
        ('percentOfResp', _ConfigDescriptor_percentOfResp),
        ])
    ConfigDescriptor._ext = []
    
    #-----< ConfigId >-----#
    ConfigId = INT(name='ConfigId', mode=MODE_TYPE)
    ConfigId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< CfgVehicleClass >-----#
    CfgVehicleClass = SEQ(name='CfgVehicleClass', mode=MODE_TYPE)
    _CfgVehicleClass_motorcycles = BOOL(name='motorcycles', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_passengerCars = BOOL(name='passengerCars', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_other2axle4tireSingleUnitVehs = BOOL(name='other2axle4tireSingleUnitVehs', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_buses = BOOL(name='buses', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_twoAxle6TireSingleUnitTrucks = BOOL(name='twoAxle6TireSingleUnitTrucks', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_threeAxleSingleUnitTrucks = BOOL(name='threeAxleSingleUnitTrucks', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_fourOrMoreAxleSingleUnitTrucks = BOOL(name='fourOrMoreAxleSingleUnitTrucks', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_fourOrFewerAxleSingleTrailerTrucks = BOOL(name='fourOrFewerAxleSingleTrailerTrucks', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_fiveAxleSingleTrailerTrucks = BOOL(name='fiveAxleSingleTrailerTrucks', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_sixOrMoreAxleSingleTrailerTrucks = BOOL(name='sixOrMoreAxleSingleTrailerTrucks', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_fiveOrFewerAxleMultiTrailerTrucks = BOOL(name='fiveOrFewerAxleMultiTrailerTrucks', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_sixAxleMultiTrailerTrucks = BOOL(name='sixAxleMultiTrailerTrucks', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgVehicleClass_sevenOrMoreAxleMultiTrailerTrucks = BOOL(name='sevenOrMoreAxleMultiTrailerTrucks', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    CfgVehicleClass._cont = ASN1Dict([
        ('motorcycles', _CfgVehicleClass_motorcycles),
        ('passengerCars', _CfgVehicleClass_passengerCars),
        ('other2axle4tireSingleUnitVehs', _CfgVehicleClass_other2axle4tireSingleUnitVehs),
        ('buses', _CfgVehicleClass_buses),
        ('twoAxle6TireSingleUnitTrucks', _CfgVehicleClass_twoAxle6TireSingleUnitTrucks),
        ('threeAxleSingleUnitTrucks', _CfgVehicleClass_threeAxleSingleUnitTrucks),
        ('fourOrMoreAxleSingleUnitTrucks', _CfgVehicleClass_fourOrMoreAxleSingleUnitTrucks),
        ('fourOrFewerAxleSingleTrailerTrucks', _CfgVehicleClass_fourOrFewerAxleSingleTrailerTrucks),
        ('fiveAxleSingleTrailerTrucks', _CfgVehicleClass_fiveAxleSingleTrailerTrucks),
        ('sixOrMoreAxleSingleTrailerTrucks', _CfgVehicleClass_sixOrMoreAxleSingleTrailerTrucks),
        ('fiveOrFewerAxleMultiTrailerTrucks', _CfgVehicleClass_fiveOrFewerAxleMultiTrailerTrucks),
        ('sixAxleMultiTrailerTrucks', _CfgVehicleClass_sixAxleMultiTrailerTrucks),
        ('sevenOrMoreAxleMultiTrailerTrucks', _CfgVehicleClass_sevenOrMoreAxleMultiTrailerTrucks),
        ])
    CfgVehicleClass._ext = []
    
    #-----< ConfigBoundary >-----#
    ConfigBoundary = CHOICE(name='ConfigBoundary', mode=MODE_TYPE)
    _ConfigBoundary_temporalBoundary = SEQ(name='temporalBoundary', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'ConfigTemporalBoundary')))
    _ConfigBoundary_geoAndDistBoundary = SEQ(name='geoAndDistBoundary', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ValidRegion')))
    ConfigBoundary._cont = ASN1Dict([
        ('temporalBoundary', _ConfigBoundary_temporalBoundary),
        ('geoAndDistBoundary', _ConfigBoundary_geoAndDistBoundary),
        ])
    ConfigBoundary._ext = []
    
    #-----< ConfigTemporalBoundary >-----#
    ConfigTemporalBoundary = SEQ(name='ConfigTemporalBoundary', mode=MODE_TYPE)
    _ConfigTemporalBoundary_beginTime = SEQ(name='beginTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ConfigTemporalBoundary_endTime = SEQ(name='endTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ConfigTemporalBoundary_recurring = SEQ(name='recurring', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgEventRecurrence')))
    ConfigTemporalBoundary._cont = ASN1Dict([
        ('beginTime', _ConfigTemporalBoundary_beginTime),
        ('endTime', _ConfigTemporalBoundary_endTime),
        ('recurring', _ConfigTemporalBoundary_recurring),
        ])
    ConfigTemporalBoundary._ext = []
    
    #-----< CfgEventRecurrence >-----#
    CfgEventRecurrence = SEQ(name='CfgEventRecurrence', mode=MODE_TYPE)
    _CfgEventRecurrence_startTime = SEQ(name='startTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DTime')), opt=True)
    _CfgEventRecurrence_endTime = SEQ(name='endTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DTime')), opt=True)
    _CfgEventRecurrence_startDate = SEQ(name='startDate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDate')), opt=True)
    _CfgEventRecurrence_endDate = SEQ(name='endDate', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDate')), opt=True)
    _CfgEventRecurrence_monday = BOOL(name='monday', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEventRecurrence_tuesday = BOOL(name='tuesday', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEventRecurrence_wednesday = BOOL(name='wednesday', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEventRecurrence_thursday = BOOL(name='thursday', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEventRecurrence_friday = BOOL(name='friday', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEventRecurrence_saturday = BOOL(name='saturday', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEventRecurrence_sunday = BOOL(name='sunday', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEventRecurrence_exclusion = BOOL(name='exclusion', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgEventRecurrence._cont = ASN1Dict([
        ('startTime', _CfgEventRecurrence_startTime),
        ('endTime', _CfgEventRecurrence_endTime),
        ('startDate', _CfgEventRecurrence_startDate),
        ('endDate', _CfgEventRecurrence_endDate),
        ('monday', _CfgEventRecurrence_monday),
        ('tuesday', _CfgEventRecurrence_tuesday),
        ('wednesday', _CfgEventRecurrence_wednesday),
        ('thursday', _CfgEventRecurrence_thursday),
        ('friday', _CfgEventRecurrence_friday),
        ('saturday', _CfgEventRecurrence_saturday),
        ('sunday', _CfgEventRecurrence_sunday),
        ('exclusion', _CfgEventRecurrence_exclusion),
        ])
    CfgEventRecurrence._ext = []
    
    #-----< ConfigTriggers >-----#
    ConfigTriggers = CHOICE(name='ConfigTriggers', mode=MODE_TYPE)
    _ConfigTriggers_instantaneousTriggers = CHOICE(name='instantaneousTriggers', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgInstantaneousEventTriggers')))
    _ConfigTriggers_avgAndSumTriggers = CHOICE(name='avgAndSumTriggers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgAveragedAndSummaryTriggers')))
    ConfigTriggers._cont = ASN1Dict([
        ('instantaneousTriggers', _ConfigTriggers_instantaneousTriggers),
        ('avgAndSumTriggers', _ConfigTriggers_avgAndSumTriggers),
        ])
    ConfigTriggers._ext = []
    
    #-----< CfgInstantaneousEventTriggers >-----#
    CfgInstantaneousEventTriggers = CHOICE(name='CfgInstantaneousEventTriggers', mode=MODE_TYPE)
    _CfgInstantaneousEventTriggers_intervalEvents = SEQ(name='intervalEvents', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgIntervalEvents')))
    _CfgInstantaneousEventTriggers_vehicleEvents = SEQ(name='vehicleEvents', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgVehicleEvents')))
    _CfgInstantaneousEventTriggers_roadwayEvents = SEQ(name='roadwayEvents', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgRoadwayEvents')))
    _CfgInstantaneousEventTriggers_commSysPerfEvents = SEQ(name='commSysPerfEvents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgCommSysPerfEvents')))
    CfgInstantaneousEventTriggers._cont = ASN1Dict([
        ('intervalEvents', _CfgInstantaneousEventTriggers_intervalEvents),
        ('vehicleEvents', _CfgInstantaneousEventTriggers_vehicleEvents),
        ('roadwayEvents', _CfgInstantaneousEventTriggers_roadwayEvents),
        ('commSysPerfEvents', _CfgInstantaneousEventTriggers_commSysPerfEvents),
        ])
    CfgInstantaneousEventTriggers._ext = []
    
    #-----< CfgIntervalEvents >-----#
    CfgIntervalEvents = SEQ(name='CfgIntervalEvents', mode=MODE_TYPE)
    _CfgIntervalEvents_interval = CHOICE(name='interval', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgInterval')))
    _CfgIntervalEvents_wiperStatus = BOOL(name='wiperStatus', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgIntervalEvents_vehCount = BOOL(name='vehCount', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgIntervalEvents_weatherData = BOOL(name='weatherData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgIntervalEvents_transitVehData = SEQ(name='transitVehData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgTransitVehicleData')), opt=True)
    _CfgIntervalEvents_numOfOccupants = BOOL(name='numOfOccupants', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgIntervalEvents._cont = ASN1Dict([
        ('interval', _CfgIntervalEvents_interval),
        ('wiperStatus', _CfgIntervalEvents_wiperStatus),
        ('vehCount', _CfgIntervalEvents_vehCount),
        ('weatherData', _CfgIntervalEvents_weatherData),
        ('transitVehData', _CfgIntervalEvents_transitVehData),
        ('numOfOccupants', _CfgIntervalEvents_numOfOccupants),
        ])
    CfgIntervalEvents._ext = []
    
    #-----< CfgTransitVehicleData >-----#
    CfgTransitVehicleData = SEQ(name='CfgTransitVehicleData', mode=MODE_TYPE)
    _CfgTransitVehicleData_currNumPasngers = BOOL(name='currNumPasngers', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTransitVehicleData_avgNumPasngers = BOOL(name='avgNumPasngers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTransitVehicleData_trnstVehSchAdh = BOOL(name='trnstVehSchAdh', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgTransitVehicleData._cont = ASN1Dict([
        ('currNumPasngers', _CfgTransitVehicleData_currNumPasngers),
        ('avgNumPasngers', _CfgTransitVehicleData_avgNumPasngers),
        ('trnstVehSchAdh', _CfgTransitVehicleData_trnstVehSchAdh),
        ])
    CfgTransitVehicleData._ext = []
    
    #-----< CfgInterval >-----#
    CfgInterval = CHOICE(name='CfgInterval', mode=MODE_TYPE)
    _CfgInterval_timeInterval = INT(name='timeInterval', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgInterval_timeInterval._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=36000)], ev=None, er=[])
    _CfgInterval_distanceInterval = INT(name='distanceInterval', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgInterval_distanceInterval._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    CfgInterval._cont = ASN1Dict([
        ('timeInterval', _CfgInterval_timeInterval),
        ('distanceInterval', _CfgInterval_distanceInterval),
        ])
    CfgInterval._ext = []
    
    #-----< CfgVehicleEvents >-----#
    CfgVehicleEvents = SEQ(name='CfgVehicleEvents', mode=MODE_TYPE)
    _CfgVehicleEvents_headLights = BOOL(name='headLights', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgVehicleEvents_fogLights = BOOL(name='fogLights', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgVehicleEvents_hazardLights = BOOL(name='hazardLights', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgVehicleEvents_kinematicEvents = SEQ(name='kinematicEvents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgKinematicEvents')), opt=True)
    _CfgVehicleEvents_wiperStatusChange = BOOL(name='wiperStatusChange', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgVehicleEvents_lowSpeed = SEQ(name='lowSpeed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgLowSpeedCriteria')), opt=True)
    _CfgVehicleEvents_resumedSpeed = INT(name='resumedSpeed', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgVehicleEvents_resumedSpeed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _CfgVehicleEvents_vehEntrsExitsRegion = BOOL(name='vehEntrsExitsRegion', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgVehicleEvents_emerVehDetect = BOOL(name='emerVehDetect', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgVehicleEvents_emerAndTransInfo = CHOICE(name='emerAndTransInfo', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgEmerAndTransitInfo')), opt=True)
    _CfgVehicleEvents_v2xMsgRecption = SEQ(name='v2xMsgRecption', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgMsgRecepIndicators')), opt=True)
    _CfgVehicleEvents_driverAlertsAndWarnings = BOOL(name='driverAlertsAndWarnings', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgVehicleEvents._cont = ASN1Dict([
        ('headLights', _CfgVehicleEvents_headLights),
        ('fogLights', _CfgVehicleEvents_fogLights),
        ('hazardLights', _CfgVehicleEvents_hazardLights),
        ('kinematicEvents', _CfgVehicleEvents_kinematicEvents),
        ('wiperStatusChange', _CfgVehicleEvents_wiperStatusChange),
        ('lowSpeed', _CfgVehicleEvents_lowSpeed),
        ('resumedSpeed', _CfgVehicleEvents_resumedSpeed),
        ('vehEntrsExitsRegion', _CfgVehicleEvents_vehEntrsExitsRegion),
        ('emerVehDetect', _CfgVehicleEvents_emerVehDetect),
        ('emerAndTransInfo', _CfgVehicleEvents_emerAndTransInfo),
        ('v2xMsgRecption', _CfgVehicleEvents_v2xMsgRecption),
        ('driverAlertsAndWarnings', _CfgVehicleEvents_driverAlertsAndWarnings),
        ])
    CfgVehicleEvents._ext = []
    
    #-----< CfgKinematicEvents >-----#
    CfgKinematicEvents = SEQ(name='CfgKinematicEvents', mode=MODE_TYPE)
    _CfgKinematicEvents_events = SEQ(name='events', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgEvents')))
    _CfgKinematicEvents_hysteresis = SEQ(name='hysteresis', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgHysteresis')), opt=True)
    CfgKinematicEvents._cont = ASN1Dict([
        ('events', _CfgKinematicEvents_events),
        ('hysteresis', _CfgKinematicEvents_hysteresis),
        ])
    CfgKinematicEvents._ext = []
    
    #-----< CfgEvents >-----#
    CfgEvents = SEQ(name='CfgEvents', mode=MODE_TYPE)
    _CfgEvents_absActivated = BOOL(name='absActivated', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgEvents_tractionCtlLoss = BOOL(name='tractionCtlLoss', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgEvents_stabilityCtlActivated = BOOL(name='stabilityCtlActivated', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgEvents_hardBraking = BOOL(name='hardBraking', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgEvents_swerveThreshold = INT(name='swerveThreshold', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgEvents_swerveThreshold._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=50)], ev=None, er=[])
    CfgEvents._cont = ASN1Dict([
        ('absActivated', _CfgEvents_absActivated),
        ('tractionCtlLoss', _CfgEvents_tractionCtlLoss),
        ('stabilityCtlActivated', _CfgEvents_stabilityCtlActivated),
        ('hardBraking', _CfgEvents_hardBraking),
        ('swerveThreshold', _CfgEvents_swerveThreshold),
        ])
    CfgEvents._ext = []
    
    #-----< CfgHysteresis >-----#
    CfgHysteresis = SEQ(name='CfgHysteresis', mode=MODE_TYPE)
    _CfgHysteresis_hysSamples = INT(name='hysSamples', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgHysteresis_hysSamples._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    _CfgHysteresis_hysRate = INT(name='hysRate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgHysteresis_hysRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    CfgHysteresis._cont = ASN1Dict([
        ('hysSamples', _CfgHysteresis_hysSamples),
        ('hysRate', _CfgHysteresis_hysRate),
        ])
    CfgHysteresis._ext = []
    
    #-----< CfgEmerAndTransitInfo >-----#
    CfgEmerAndTransitInfo = CHOICE(name='CfgEmerAndTransitInfo', mode=MODE_TYPE)
    _CfgEmerAndTransitInfo_emerVehLightBar = BOOL(name='emerVehLightBar', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEmerAndTransitInfo_reqTspEvp = BOOL(name='reqTspEvp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEmerAndTransitInfo_transitVehPassCnt = BOOL(name='transitVehPassCnt', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgEmerAndTransitInfo_transitVehDoor = BOOL(name='transitVehDoor', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    CfgEmerAndTransitInfo._cont = ASN1Dict([
        ('emerVehLightBar', _CfgEmerAndTransitInfo_emerVehLightBar),
        ('reqTspEvp', _CfgEmerAndTransitInfo_reqTspEvp),
        ('transitVehPassCnt', _CfgEmerAndTransitInfo_transitVehPassCnt),
        ('transitVehDoor', _CfgEmerAndTransitInfo_transitVehDoor),
        ])
    CfgEmerAndTransitInfo._ext = []
    
    #-----< CfgMsgRecepIndicators >-----#
    CfgMsgRecepIndicators = SEQ(name='CfgMsgRecepIndicators', mode=MODE_TYPE)
    _CfgMsgRecepIndicators_msgDictionary = ENUM(name='msgDictionary', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgMsgDictionary')), opt=True)
    _CfgMsgRecepIndicators_messages = SEQ_OF(name='messages', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CfgMsgRecepIndicators_messages__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MessageFrame', 'DSRCmsgID')))
    _CfgMsgRecepIndicators_messages._cont = __CfgMsgRecepIndicators_messages__item_
    _CfgMsgRecepIndicators_messages._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    CfgMsgRecepIndicators._cont = ASN1Dict([
        ('msgDictionary', _CfgMsgRecepIndicators_msgDictionary),
        ('messages', _CfgMsgRecepIndicators_messages),
        ])
    CfgMsgRecepIndicators._ext = []
    
    #-----< CfgMsgDictionary >-----#
    CfgMsgDictionary = ENUM(name='CfgMsgDictionary', mode=MODE_TYPE)
    CfgMsgDictionary._cont = ASN1Dict([('sae', 1), ('etsi', 2), ('iso', 3)])
    CfgMsgDictionary._ext = []
    
    #-----< CfgRoadwayEvents >-----#
    CfgRoadwayEvents = SEQ(name='CfgRoadwayEvents', mode=MODE_TYPE)
    _CfgRoadwayEvents_obstacleDetected = BOOL(name='obstacleDetected', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_adverseRoadSurface = BOOL(name='adverseRoadSurface', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_trafficSigEncounters = SEQ(name='trafficSigEncounters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgTrafficSigEncounters')), opt=True)
    _CfgRoadwayEvents_trfsigLightOut = BOOL(name='trfsigLightOut', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_trfsigRoadGeoMismatch = BOOL(name='trfsigRoadGeoMismatch', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_roadSignInfo = SEQ(name='roadSignInfo', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgRoadSignInfo')), opt=True)
    _CfgRoadwayEvents_lowLaneMarkReflect = INT(name='lowLaneMarkReflect', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadwayEvents_lowLaneMarkReflect._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _CfgRoadwayEvents_roadsignIncnstncy = BOOL(name='roadsignIncnstncy', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_laneGeoIncnstncy = BOOL(name='laneGeoIncnstncy', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_incidentDetect = BOOL(name='incidentDetect', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_workZoneCharDetect = BOOL(name='workZoneCharDetect', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_inclWeatherDetect = BOOL(name='inclWeatherDetect', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_railrdCrossActivated = BOOL(name='railrdCrossActivated', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgRoadwayEvents_drawBridgeActivated = BOOL(name='drawBridgeActivated', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    CfgRoadwayEvents._cont = ASN1Dict([
        ('obstacleDetected', _CfgRoadwayEvents_obstacleDetected),
        ('adverseRoadSurface', _CfgRoadwayEvents_adverseRoadSurface),
        ('trafficSigEncounters', _CfgRoadwayEvents_trafficSigEncounters),
        ('trfsigLightOut', _CfgRoadwayEvents_trfsigLightOut),
        ('trfsigRoadGeoMismatch', _CfgRoadwayEvents_trfsigRoadGeoMismatch),
        ('roadSignInfo', _CfgRoadwayEvents_roadSignInfo),
        ('lowLaneMarkReflect', _CfgRoadwayEvents_lowLaneMarkReflect),
        ('roadsignIncnstncy', _CfgRoadwayEvents_roadsignIncnstncy),
        ('laneGeoIncnstncy', _CfgRoadwayEvents_laneGeoIncnstncy),
        ('incidentDetect', _CfgRoadwayEvents_incidentDetect),
        ('workZoneCharDetect', _CfgRoadwayEvents_workZoneCharDetect),
        ('inclWeatherDetect', _CfgRoadwayEvents_inclWeatherDetect),
        ('railrdCrossActivated', _CfgRoadwayEvents_railrdCrossActivated),
        ('drawBridgeActivated', _CfgRoadwayEvents_drawBridgeActivated),
        ])
    CfgRoadwayEvents._ext = []
    
    #-----< CfgTrafficSigEncounters >-----#
    CfgTrafficSigEncounters = SEQ(name='CfgTrafficSigEncounters', mode=MODE_TYPE)
    _CfgTrafficSigEncounters_intersections = SEQ_OF(name='intersections', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CfgTrafficSigEncounters_intersections__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'IntersectionID')))
    _CfgTrafficSigEncounters_intersections._cont = __CfgTrafficSigEncounters_intersections__item_
    _CfgTrafficSigEncounters_intersections._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _CfgTrafficSigEncounters_trfcsigApproachDelay = INT(name='trfcsigApproachDelay', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTrafficSigEncounters_trfcsigApproachDelay._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3600)], ev=None, er=[])
    _CfgTrafficSigEncounters_trfsigApproachSpeed = INT(name='trfsigApproachSpeed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTrafficSigEncounters_trfsigApproachSpeed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=200)], ev=None, er=[])
    _CfgTrafficSigEncounters_trfsigArrivalGreen = BOOL(name='trfsigArrivalGreen', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTrafficSigEncounters_trfsigArrivalRed = BOOL(name='trfsigArrivalRed', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTrafficSigEncounters_trfsigPedDelay = INT(name='trfsigPedDelay', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTrafficSigEncounters_trfsigPedDelay._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=300)], ev=None, er=[])
    _CfgTrafficSigEncounters_trfsigSpatMismatch = BOOL(name='trfsigSpatMismatch', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgTrafficSigEncounters_trfsigSpatTimingError = BOOL(name='trfsigSpatTimingError', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgTrafficSigEncounters._cont = ASN1Dict([
        ('intersections', _CfgTrafficSigEncounters_intersections),
        ('trfcsigApproachDelay', _CfgTrafficSigEncounters_trfcsigApproachDelay),
        ('trfsigApproachSpeed', _CfgTrafficSigEncounters_trfsigApproachSpeed),
        ('trfsigArrivalGreen', _CfgTrafficSigEncounters_trfsigArrivalGreen),
        ('trfsigArrivalRed', _CfgTrafficSigEncounters_trfsigArrivalRed),
        ('trfsigPedDelay', _CfgTrafficSigEncounters_trfsigPedDelay),
        ('trfsigSpatMismatch', _CfgTrafficSigEncounters_trfsigSpatMismatch),
        ('trfsigSpatTimingError', _CfgTrafficSigEncounters_trfsigSpatTimingError),
        ])
    CfgTrafficSigEncounters._ext = []
    
    #-----< CfgRoadSignInfo >-----#
    CfgRoadSignInfo = SEQ(name='CfgRoadSignInfo', mode=MODE_TYPE)
    _CfgRoadSignInfo_roadsignDetection = SEQ(name='roadsignDetection', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgRoadSignTypes')))
    _CfgRoadSignInfo_lowRoadsignReflect1 = INT(name='lowRoadsignReflect1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignInfo_lowRoadsignReflect1._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=250)], ev=None, er=[])
    _CfgRoadSignInfo_lowRoadsignReflect2 = INT(name='lowRoadsignReflect2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignInfo_lowRoadsignReflect2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=250)], ev=None, er=[])
    CfgRoadSignInfo._cont = ASN1Dict([
        ('roadsignDetection', _CfgRoadSignInfo_roadsignDetection),
        ('lowRoadsignReflect1', _CfgRoadSignInfo_lowRoadsignReflect1),
        ('lowRoadsignReflect2', _CfgRoadSignInfo_lowRoadsignReflect2),
        ])
    CfgRoadSignInfo._ext = []
    
    #-----< CfgRoadSignTypes >-----#
    CfgRoadSignTypes = SEQ(name='CfgRoadSignTypes', mode=MODE_TYPE)
    _CfgRoadSignTypes_whiteOnGreen = BOOL(name='whiteOnGreen', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_blackOnYellow = BOOL(name='blackOnYellow', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_blackOnOrange = BOOL(name='blackOnOrange', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_whiteOnRed = BOOL(name='whiteOnRed', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_blackOnWhite = BOOL(name='blackOnWhite', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_octagon = BOOL(name='octagon', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_eqlatTriangle = BOOL(name='eqlatTriangle', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_circle = BOOL(name='circle', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_pennant = BOOL(name='pennant', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_pentagon = BOOL(name='pentagon', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_crossbuck = BOOL(name='crossbuck', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_diamond = BOOL(name='diamond', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_trapezoid = BOOL(name='trapezoid', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgRoadSignTypes_other = BOOL(name='other', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgRoadSignTypes._cont = ASN1Dict([
        ('whiteOnGreen', _CfgRoadSignTypes_whiteOnGreen),
        ('blackOnYellow', _CfgRoadSignTypes_blackOnYellow),
        ('blackOnOrange', _CfgRoadSignTypes_blackOnOrange),
        ('whiteOnRed', _CfgRoadSignTypes_whiteOnRed),
        ('blackOnWhite', _CfgRoadSignTypes_blackOnWhite),
        ('octagon', _CfgRoadSignTypes_octagon),
        ('eqlatTriangle', _CfgRoadSignTypes_eqlatTriangle),
        ('circle', _CfgRoadSignTypes_circle),
        ('pennant', _CfgRoadSignTypes_pennant),
        ('pentagon', _CfgRoadSignTypes_pentagon),
        ('crossbuck', _CfgRoadSignTypes_crossbuck),
        ('diamond', _CfgRoadSignTypes_diamond),
        ('trapezoid', _CfgRoadSignTypes_trapezoid),
        ('other', _CfgRoadSignTypes_other),
        ])
    CfgRoadSignTypes._ext = []
    
    #-----< CfgCommSysPerfEvents >-----#
    CfgCommSysPerfEvents = SEQ(name='CfgCommSysPerfEvents', mode=MODE_TYPE)
    _CfgCommSysPerfEvents_j2945_1ChanBusyThresh = INT(name='j2945-1ChanBusyThresh', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_j2945_1ChanBusyThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _CfgCommSysPerfEvents_rfDataRsuInfo = BOOL(name='rfDataRsuInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_numRsusObservedThresh = INT(name='numRsusObservedThresh', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_numRsusObservedThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=254)], ev=None, er=[])
    _CfgCommSysPerfEvents_rfV2xJamDetectThresh = INT(name='rfV2xJamDetectThresh', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_rfV2xJamDetectThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=140)], ev=None, er=[])
    _CfgCommSysPerfEvents_j2945_1VehDensThresh = INT(name='j2945-1VehDensThresh', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_j2945_1VehDensThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _CfgCommSysPerfEvents_j2945_1CqiBelowThresh = INT(name='j2945-1CqiBelowThresh', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_j2945_1CqiBelowThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _CfgCommSysPerfEvents_j2945_1TrackErrorThresh = INT(name='j2945-1TrackErrorThresh', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_j2945_1TrackErrorThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _CfgCommSysPerfEvents_gnssHdopExceedsThresh = INT(name='gnssHdopExceedsThresh', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_gnssHdopExceedsThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    _CfgCommSysPerfEvents_gnssSatsBelowThresh = INT(name='gnssSatsBelowThresh', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgCommSysPerfEvents_gnssSatsBelowThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    _CfgCommSysPerfEvents_gnssJammingDetect = BOOL(name='gnssJammingDetect', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgCommSysPerfEvents._cont = ASN1Dict([
        ('j2945-1ChanBusyThresh', _CfgCommSysPerfEvents_j2945_1ChanBusyThresh),
        ('rfDataRsuInfo', _CfgCommSysPerfEvents_rfDataRsuInfo),
        ('numRsusObservedThresh', _CfgCommSysPerfEvents_numRsusObservedThresh),
        ('rfV2xJamDetectThresh', _CfgCommSysPerfEvents_rfV2xJamDetectThresh),
        ('j2945-1VehDensThresh', _CfgCommSysPerfEvents_j2945_1VehDensThresh),
        ('j2945-1CqiBelowThresh', _CfgCommSysPerfEvents_j2945_1CqiBelowThresh),
        ('j2945-1TrackErrorThresh', _CfgCommSysPerfEvents_j2945_1TrackErrorThresh),
        ('gnssHdopExceedsThresh', _CfgCommSysPerfEvents_gnssHdopExceedsThresh),
        ('gnssSatsBelowThresh', _CfgCommSysPerfEvents_gnssSatsBelowThresh),
        ('gnssJammingDetect', _CfgCommSysPerfEvents_gnssJammingDetect),
        ])
    CfgCommSysPerfEvents._ext = []
    
    #-----< CfgAveragedAndSummaryTriggers >-----#
    CfgAveragedAndSummaryTriggers = CHOICE(name='CfgAveragedAndSummaryTriggers', mode=MODE_TYPE)
    _CfgAveragedAndSummaryTriggers_averagedTriggers = SEQ(name='averagedTriggers', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgAveragedTriggers')))
    _CfgAveragedAndSummaryTriggers_summaryTriggers = SEQ(name='summaryTriggers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgSummaryTriggers')))
    CfgAveragedAndSummaryTriggers._cont = ASN1Dict([
        ('averagedTriggers', _CfgAveragedAndSummaryTriggers_averagedTriggers),
        ('summaryTriggers', _CfgAveragedAndSummaryTriggers_summaryTriggers),
        ])
    CfgAveragedAndSummaryTriggers._ext = []
    
    #-----< CfgAveragedTriggers >-----#
    CfgAveragedTriggers = SEQ(name='CfgAveragedTriggers', mode=MODE_TYPE)
    _CfgAveragedTriggers_avgSpeed = BOOL(name='avgSpeed', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgAveragedTriggers_avgStopDuration = BOOL(name='avgStopDuration', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgAveragedTriggers_avgFuelConsumption = BOOL(name='avgFuelConsumption', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgAveragedTriggers_avgEmissions = BOOL(name='avgEmissions', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgAveragedTriggers_avgNumOfOccupants = BOOL(name='avgNumOfOccupants', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CfgAveragedTriggers._cont = ASN1Dict([
        ('avgSpeed', _CfgAveragedTriggers_avgSpeed),
        ('avgStopDuration', _CfgAveragedTriggers_avgStopDuration),
        ('avgFuelConsumption', _CfgAveragedTriggers_avgFuelConsumption),
        ('avgEmissions', _CfgAveragedTriggers_avgEmissions),
        ('avgNumOfOccupants', _CfgAveragedTriggers_avgNumOfOccupants),
        ])
    CfgAveragedTriggers._ext = []
    
    #-----< CfgSummaryTriggers >-----#
    CfgSummaryTriggers = SEQ(name='CfgSummaryTriggers', mode=MODE_TYPE)
    _CfgSummaryTriggers_regTravelTime = BOOL(name='regTravelTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_regVehDistTraveled = BOOL(name='regVehDistTraveled', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_regVehTimeTraveled = BOOL(name='regVehTimeTraveled', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_fuelConsumption = BOOL(name='fuelConsumption', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_totalVehEmissions = BOOL(name='totalVehEmissions', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_numOfLowSpeedEvents = SEQ(name='numOfLowSpeedEvents', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgLowSpeedCriteria')), opt=True)
    _CfgSummaryTriggers_timeStopped = SEQ(name='timeStopped', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgStoppedCriteria')), opt=True)
    _CfgSummaryTriggers_numOfStopped = SEQ(name='numOfStopped', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgStoppedCriteria')), opt=True)
    _CfgSummaryTriggers_locOfStops = BOOL(name='locOfStops', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_regNumOfVehPassed = BOOL(name='regNumOfVehPassed', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_regNumOfSurpassedVeh = BOOL(name='regNumOfSurpassedVeh', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgSummaryTriggers_totalMsgsReceived = SEQ(name='totalMsgsReceived', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'CfgMsgRecepIndicators')), opt=True)
    CfgSummaryTriggers._cont = ASN1Dict([
        ('regTravelTime', _CfgSummaryTriggers_regTravelTime),
        ('regVehDistTraveled', _CfgSummaryTriggers_regVehDistTraveled),
        ('regVehTimeTraveled', _CfgSummaryTriggers_regVehTimeTraveled),
        ('fuelConsumption', _CfgSummaryTriggers_fuelConsumption),
        ('totalVehEmissions', _CfgSummaryTriggers_totalVehEmissions),
        ('numOfLowSpeedEvents', _CfgSummaryTriggers_numOfLowSpeedEvents),
        ('timeStopped', _CfgSummaryTriggers_timeStopped),
        ('numOfStopped', _CfgSummaryTriggers_numOfStopped),
        ('locOfStops', _CfgSummaryTriggers_locOfStops),
        ('regNumOfVehPassed', _CfgSummaryTriggers_regNumOfVehPassed),
        ('regNumOfSurpassedVeh', _CfgSummaryTriggers_regNumOfSurpassedVeh),
        ('totalMsgsReceived', _CfgSummaryTriggers_totalMsgsReceived),
        ])
    CfgSummaryTriggers._ext = []
    
    #-----< CfgLowSpeedCriteria >-----#
    CfgLowSpeedCriteria = SEQ(name='CfgLowSpeedCriteria', mode=MODE_TYPE)
    _CfgLowSpeedCriteria_lowSpeedThreshold = INT(name='lowSpeedThreshold', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgLowSpeedCriteria_lowSpeedThreshold._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=5, ub=100)], ev=None, er=[])
    _CfgLowSpeedCriteria_lowSpeedTimeThresh = INT(name='lowSpeedTimeThresh', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CfgLowSpeedCriteria_lowSpeedTimeThresh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    CfgLowSpeedCriteria._cont = ASN1Dict([
        ('lowSpeedThreshold', _CfgLowSpeedCriteria_lowSpeedThreshold),
        ('lowSpeedTimeThresh', _CfgLowSpeedCriteria_lowSpeedTimeThresh),
        ])
    CfgLowSpeedCriteria._ext = []
    
    #-----< CfgStoppedCriteria >-----#
    CfgStoppedCriteria = SEQ(name='CfgStoppedCriteria', mode=MODE_TYPE)
    _CfgStoppedCriteria_stoppedSpeedThreshold = INT(name='stoppedSpeedThreshold', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgStoppedCriteria_stoppedSpeedThreshold._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    _CfgStoppedCriteria_amountOfTimeBelow = INT(name='amountOfTimeBelow', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CfgStoppedCriteria_amountOfTimeBelow._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=300)], ev=None, er=[])
    CfgStoppedCriteria._cont = ASN1Dict([
        ('stoppedSpeedThreshold', _CfgStoppedCriteria_stoppedSpeedThreshold),
        ('amountOfTimeBelow', _CfgStoppedCriteria_amountOfTimeBelow),
        ])
    CfgStoppedCriteria._ext = []
    
    _all_ = [
        _ProbeDataConfigMessage__item_,
        ProbeDataConfigMessage,
        _ProbeDataConfig_descriptor,
        _ProbeDataConfig_triggers,
        _ProbeDataConfig_maxAgeOfData,
        _ProbeDataConfig_boundary,
        ProbeDataConfig,
        _ConfigDescriptor_identifier,
        _ConfigDescriptor_vehClass,
        _ConfigDescriptor_roadAuthorityID,
        _ConfigDescriptor_percentOfResp,
        ConfigDescriptor,
        ConfigId,
        _CfgVehicleClass_motorcycles,
        _CfgVehicleClass_passengerCars,
        _CfgVehicleClass_other2axle4tireSingleUnitVehs,
        _CfgVehicleClass_buses,
        _CfgVehicleClass_twoAxle6TireSingleUnitTrucks,
        _CfgVehicleClass_threeAxleSingleUnitTrucks,
        _CfgVehicleClass_fourOrMoreAxleSingleUnitTrucks,
        _CfgVehicleClass_fourOrFewerAxleSingleTrailerTrucks,
        _CfgVehicleClass_fiveAxleSingleTrailerTrucks,
        _CfgVehicleClass_sixOrMoreAxleSingleTrailerTrucks,
        _CfgVehicleClass_fiveOrFewerAxleMultiTrailerTrucks,
        _CfgVehicleClass_sixAxleMultiTrailerTrucks,
        _CfgVehicleClass_sevenOrMoreAxleMultiTrailerTrucks,
        CfgVehicleClass,
        _ConfigBoundary_temporalBoundary,
        _ConfigBoundary_geoAndDistBoundary,
        ConfigBoundary,
        _ConfigTemporalBoundary_beginTime,
        _ConfigTemporalBoundary_endTime,
        _ConfigTemporalBoundary_recurring,
        ConfigTemporalBoundary,
        _CfgEventRecurrence_startTime,
        _CfgEventRecurrence_endTime,
        _CfgEventRecurrence_startDate,
        _CfgEventRecurrence_endDate,
        _CfgEventRecurrence_monday,
        _CfgEventRecurrence_tuesday,
        _CfgEventRecurrence_wednesday,
        _CfgEventRecurrence_thursday,
        _CfgEventRecurrence_friday,
        _CfgEventRecurrence_saturday,
        _CfgEventRecurrence_sunday,
        _CfgEventRecurrence_exclusion,
        CfgEventRecurrence,
        _ConfigTriggers_instantaneousTriggers,
        _ConfigTriggers_avgAndSumTriggers,
        ConfigTriggers,
        _CfgInstantaneousEventTriggers_intervalEvents,
        _CfgInstantaneousEventTriggers_vehicleEvents,
        _CfgInstantaneousEventTriggers_roadwayEvents,
        _CfgInstantaneousEventTriggers_commSysPerfEvents,
        CfgInstantaneousEventTriggers,
        _CfgIntervalEvents_interval,
        _CfgIntervalEvents_wiperStatus,
        _CfgIntervalEvents_vehCount,
        _CfgIntervalEvents_weatherData,
        _CfgIntervalEvents_transitVehData,
        _CfgIntervalEvents_numOfOccupants,
        CfgIntervalEvents,
        _CfgTransitVehicleData_currNumPasngers,
        _CfgTransitVehicleData_avgNumPasngers,
        _CfgTransitVehicleData_trnstVehSchAdh,
        CfgTransitVehicleData,
        _CfgInterval_timeInterval,
        _CfgInterval_distanceInterval,
        CfgInterval,
        _CfgVehicleEvents_headLights,
        _CfgVehicleEvents_fogLights,
        _CfgVehicleEvents_hazardLights,
        _CfgVehicleEvents_kinematicEvents,
        _CfgVehicleEvents_wiperStatusChange,
        _CfgVehicleEvents_lowSpeed,
        _CfgVehicleEvents_resumedSpeed,
        _CfgVehicleEvents_vehEntrsExitsRegion,
        _CfgVehicleEvents_emerVehDetect,
        _CfgVehicleEvents_emerAndTransInfo,
        _CfgVehicleEvents_v2xMsgRecption,
        _CfgVehicleEvents_driverAlertsAndWarnings,
        CfgVehicleEvents,
        _CfgKinematicEvents_events,
        _CfgKinematicEvents_hysteresis,
        CfgKinematicEvents,
        _CfgEvents_absActivated,
        _CfgEvents_tractionCtlLoss,
        _CfgEvents_stabilityCtlActivated,
        _CfgEvents_hardBraking,
        _CfgEvents_swerveThreshold,
        CfgEvents,
        _CfgHysteresis_hysSamples,
        _CfgHysteresis_hysRate,
        CfgHysteresis,
        _CfgEmerAndTransitInfo_emerVehLightBar,
        _CfgEmerAndTransitInfo_reqTspEvp,
        _CfgEmerAndTransitInfo_transitVehPassCnt,
        _CfgEmerAndTransitInfo_transitVehDoor,
        CfgEmerAndTransitInfo,
        _CfgMsgRecepIndicators_msgDictionary,
        __CfgMsgRecepIndicators_messages__item_,
        _CfgMsgRecepIndicators_messages,
        CfgMsgRecepIndicators,
        CfgMsgDictionary,
        _CfgRoadwayEvents_obstacleDetected,
        _CfgRoadwayEvents_adverseRoadSurface,
        _CfgRoadwayEvents_trafficSigEncounters,
        _CfgRoadwayEvents_trfsigLightOut,
        _CfgRoadwayEvents_trfsigRoadGeoMismatch,
        _CfgRoadwayEvents_roadSignInfo,
        _CfgRoadwayEvents_lowLaneMarkReflect,
        _CfgRoadwayEvents_roadsignIncnstncy,
        _CfgRoadwayEvents_laneGeoIncnstncy,
        _CfgRoadwayEvents_incidentDetect,
        _CfgRoadwayEvents_workZoneCharDetect,
        _CfgRoadwayEvents_inclWeatherDetect,
        _CfgRoadwayEvents_railrdCrossActivated,
        _CfgRoadwayEvents_drawBridgeActivated,
        CfgRoadwayEvents,
        __CfgTrafficSigEncounters_intersections__item_,
        _CfgTrafficSigEncounters_intersections,
        _CfgTrafficSigEncounters_trfcsigApproachDelay,
        _CfgTrafficSigEncounters_trfsigApproachSpeed,
        _CfgTrafficSigEncounters_trfsigArrivalGreen,
        _CfgTrafficSigEncounters_trfsigArrivalRed,
        _CfgTrafficSigEncounters_trfsigPedDelay,
        _CfgTrafficSigEncounters_trfsigSpatMismatch,
        _CfgTrafficSigEncounters_trfsigSpatTimingError,
        CfgTrafficSigEncounters,
        _CfgRoadSignInfo_roadsignDetection,
        _CfgRoadSignInfo_lowRoadsignReflect1,
        _CfgRoadSignInfo_lowRoadsignReflect2,
        CfgRoadSignInfo,
        _CfgRoadSignTypes_whiteOnGreen,
        _CfgRoadSignTypes_blackOnYellow,
        _CfgRoadSignTypes_blackOnOrange,
        _CfgRoadSignTypes_whiteOnRed,
        _CfgRoadSignTypes_blackOnWhite,
        _CfgRoadSignTypes_octagon,
        _CfgRoadSignTypes_eqlatTriangle,
        _CfgRoadSignTypes_circle,
        _CfgRoadSignTypes_pennant,
        _CfgRoadSignTypes_pentagon,
        _CfgRoadSignTypes_crossbuck,
        _CfgRoadSignTypes_diamond,
        _CfgRoadSignTypes_trapezoid,
        _CfgRoadSignTypes_other,
        CfgRoadSignTypes,
        _CfgCommSysPerfEvents_j2945_1ChanBusyThresh,
        _CfgCommSysPerfEvents_rfDataRsuInfo,
        _CfgCommSysPerfEvents_numRsusObservedThresh,
        _CfgCommSysPerfEvents_rfV2xJamDetectThresh,
        _CfgCommSysPerfEvents_j2945_1VehDensThresh,
        _CfgCommSysPerfEvents_j2945_1CqiBelowThresh,
        _CfgCommSysPerfEvents_j2945_1TrackErrorThresh,
        _CfgCommSysPerfEvents_gnssHdopExceedsThresh,
        _CfgCommSysPerfEvents_gnssSatsBelowThresh,
        _CfgCommSysPerfEvents_gnssJammingDetect,
        CfgCommSysPerfEvents,
        _CfgAveragedAndSummaryTriggers_averagedTriggers,
        _CfgAveragedAndSummaryTriggers_summaryTriggers,
        CfgAveragedAndSummaryTriggers,
        _CfgAveragedTriggers_avgSpeed,
        _CfgAveragedTriggers_avgStopDuration,
        _CfgAveragedTriggers_avgFuelConsumption,
        _CfgAveragedTriggers_avgEmissions,
        _CfgAveragedTriggers_avgNumOfOccupants,
        CfgAveragedTriggers,
        _CfgSummaryTriggers_regTravelTime,
        _CfgSummaryTriggers_regVehDistTraveled,
        _CfgSummaryTriggers_regVehTimeTraveled,
        _CfgSummaryTriggers_fuelConsumption,
        _CfgSummaryTriggers_totalVehEmissions,
        _CfgSummaryTriggers_numOfLowSpeedEvents,
        _CfgSummaryTriggers_timeStopped,
        _CfgSummaryTriggers_numOfStopped,
        _CfgSummaryTriggers_locOfStops,
        _CfgSummaryTriggers_regNumOfVehPassed,
        _CfgSummaryTriggers_regNumOfSurpassedVeh,
        _CfgSummaryTriggers_totalMsgsReceived,
        CfgSummaryTriggers,
        _CfgLowSpeedCriteria_lowSpeedThreshold,
        _CfgLowSpeedCriteria_lowSpeedTimeThresh,
        CfgLowSpeedCriteria,
        _CfgStoppedCriteria_stoppedSpeedThreshold,
        _CfgStoppedCriteria_amountOfTimeBelow,
        CfgStoppedCriteria,
    ]

class ProbeDataReport:

    _name_  = 'ProbeDataReport'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 5, 1, 2945, 12, 1, 1, 1, 1]
    
    _obj_ = [
        'ProbeDataReportMessage',
        'ReportCharacteristics',
        'RptVehicleClass',
        'RptDevType',
        'RptInstantaneousRecords',
        'RptInstantaneousRecord',
        'RptVelocity',
        'RptInstantaneousRecordData',
        'RptAveragedAndSummaryRecord',
        'RptAvgAndSummaryRecordData',
        'RptIntervalEvents',
        'RptVehicleReport',
        'RptTransitVehData',
        'RptVehicleEvents',
        'RptDriverAlertsAndWarnings',
        'RptKinematicEvents',
        'RptEvents',
        'RptHysteresisRecord',
        'RptHysteresis',
        'RptRoadwayEvents',
        'RptRoadRoughness',
        'MeanVariation',
        'StdDev',
        'RptTrafficSigEncounters',
        'RptTrafficMetrics',
        'RptCommSysPerfEvents',
        'RptWiperStatus',
        'RptAveragedRecord',
        'RptSummaryRecord',
        'RptEmissions',
        'RptLocOfStops',
        ]
    _type_ = [
        'ProbeDataReportMessage',
        'ReportCharacteristics',
        'RptVehicleClass',
        'RptDevType',
        'RptInstantaneousRecords',
        'RptInstantaneousRecord',
        'RptVelocity',
        'RptInstantaneousRecordData',
        'RptAveragedAndSummaryRecord',
        'RptAvgAndSummaryRecordData',
        'RptIntervalEvents',
        'RptVehicleReport',
        'RptTransitVehData',
        'RptVehicleEvents',
        'RptDriverAlertsAndWarnings',
        'RptKinematicEvents',
        'RptEvents',
        'RptHysteresisRecord',
        'RptHysteresis',
        'RptRoadwayEvents',
        'RptRoadRoughness',
        'MeanVariation',
        'StdDev',
        'RptTrafficSigEncounters',
        'RptTrafficMetrics',
        'RptCommSysPerfEvents',
        'RptWiperStatus',
        'RptAveragedRecord',
        'RptSummaryRecord',
        'RptEmissions',
        'RptLocOfStops',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ProbeDataReportMessage >-----#
    ProbeDataReportMessage = SEQ(name='ProbeDataReportMessage', mode=MODE_TYPE)
    _ProbeDataReportMessage_configId = INT(name='configId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataConfig', 'ConfigId')))
    _ProbeDataReportMessage_reportChar = SEQ(name='reportChar', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'ReportCharacteristics')))
    _ProbeDataReportMessage_roadAuthorityID = CHOICE(name='roadAuthorityID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Common', 'RoadAuthorityID')), opt=True)
    _ProbeDataReportMessage_instantaneousRecs = SEQ_OF(name='instantaneousRecs', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptInstantaneousRecords')), opt=True)
    _ProbeDataReportMessage_avgAndSumRec = SEQ(name='avgAndSumRec', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptAveragedAndSummaryRecord')), opt=True)
    ProbeDataReportMessage._cont = ASN1Dict([
        ('configId', _ProbeDataReportMessage_configId),
        ('reportChar', _ProbeDataReportMessage_reportChar),
        ('roadAuthorityID', _ProbeDataReportMessage_roadAuthorityID),
        ('instantaneousRecs', _ProbeDataReportMessage_instantaneousRecs),
        ('avgAndSumRec', _ProbeDataReportMessage_avgAndSumRec),
        ])
    ProbeDataReportMessage._ext = []
    
    #-----< ReportCharacteristics >-----#
    ReportCharacteristics = SEQ(name='ReportCharacteristics', mode=MODE_TYPE)
    _ReportCharacteristics_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ReportCharacteristics_position = SEQ(name='position', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _ReportCharacteristics_posAccuracy = SEQ(name='posAccuracy', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _ReportCharacteristics_velocity = SEQ(name='velocity', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptVelocity')))
    _ReportCharacteristics_vehicleClass = ENUM(name='vehicleClass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptVehicleClass')), opt=True)
    _ReportCharacteristics_devType = SEQ(name='devType', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptDevType')), opt=True)
    _ReportCharacteristics_vehicleSize = SEQ(name='vehicleSize', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleSize')), opt=True)
    _ReportCharacteristics_vehicleMass = INT(name='vehicleMass', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleMass')), opt=True)
    _ReportCharacteristics_vehPassengerCount = INT(name='vehPassengerCount', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ReportCharacteristics_vehPassengerCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    ReportCharacteristics._cont = ASN1Dict([
        ('timeStamp', _ReportCharacteristics_timeStamp),
        ('position', _ReportCharacteristics_position),
        ('posAccuracy', _ReportCharacteristics_posAccuracy),
        ('velocity', _ReportCharacteristics_velocity),
        ('vehicleClass', _ReportCharacteristics_vehicleClass),
        ('devType', _ReportCharacteristics_devType),
        ('vehicleSize', _ReportCharacteristics_vehicleSize),
        ('vehicleMass', _ReportCharacteristics_vehicleMass),
        ('vehPassengerCount', _ReportCharacteristics_vehPassengerCount),
        ])
    ReportCharacteristics._ext = []
    
    #-----< RptVehicleClass >-----#
    RptVehicleClass = ENUM(name='RptVehicleClass', mode=MODE_TYPE)
    RptVehicleClass._cont = ASN1Dict([('motorcycles', 1), ('passengerCars', 2), ('other2axle4tireSingleUnitVehs', 3), ('buses', 4), ('twoAxle6TireSingleUnitTrucks', 5), ('threeAxleSingleUnitTrucks', 6), ('fourOrMoreAxleSingleUnitTrucks', 7), ('fourOrFewerAxleSingleTrailerTrucks', 8), ('fiveAxleSingleTrailerTrucks', 9), ('sixOrMoreAxleSingleTrailerTrucks', 10), ('fiveOrFewerAxleMultiTrailerTrucks', 11), ('sixAxleMultiTrailerTrucks', 12), ('sevenOrMoreAxleMultiTrailerTrucks', 13)])
    RptVehicleClass._ext = []
    
    #-----< RptDevType >-----#
    RptDevType = SEQ(name='RptDevType', mode=MODE_TYPE)
    _RptDevType_oemOrAftermarket = BOOL(name='oemOrAftermarket', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDevType_canOrIvnConnected = BOOL(name='canOrIvnConnected', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDevType_mcoCapable = BOOL(name='mcoCapable', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    RptDevType._cont = ASN1Dict([
        ('oemOrAftermarket', _RptDevType_oemOrAftermarket),
        ('canOrIvnConnected', _RptDevType_canOrIvnConnected),
        ('mcoCapable', _RptDevType_mcoCapable),
        ])
    RptDevType._ext = []
    
    #-----< RptInstantaneousRecords >-----#
    RptInstantaneousRecords = SEQ_OF(name='RptInstantaneousRecords', mode=MODE_TYPE)
    _RptInstantaneousRecords__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataReport', 'RptInstantaneousRecord')))
    RptInstantaneousRecords._cont = _RptInstantaneousRecords__item_
    RptInstantaneousRecords._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=[], er=[])
    
    #-----< RptInstantaneousRecord >-----#
    RptInstantaneousRecord = SEQ(name='RptInstantaneousRecord', mode=MODE_TYPE)
    _RptInstantaneousRecord_timeOfInstantRec = SEQ(name='timeOfInstantRec', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _RptInstantaneousRecord_locOfInstantRec = SEQ(name='locOfInstantRec', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RptInstantaneousRecord_accOfPosition = SEQ(name='accOfPosition', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _RptInstantaneousRecord_velOfInstantRec = SEQ(name='velOfInstantRec', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptVelocity')))
    _RptInstantaneousRecord_record = CHOICE(name='record', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptInstantaneousRecordData')), opt=True)
    RptInstantaneousRecord._cont = ASN1Dict([
        ('timeOfInstantRec', _RptInstantaneousRecord_timeOfInstantRec),
        ('locOfInstantRec', _RptInstantaneousRecord_locOfInstantRec),
        ('accOfPosition', _RptInstantaneousRecord_accOfPosition),
        ('velOfInstantRec', _RptInstantaneousRecord_velOfInstantRec),
        ('record', _RptInstantaneousRecord_record),
        ])
    RptInstantaneousRecord._ext = []
    
    #-----< RptVelocity >-----#
    RptVelocity = SEQ(name='RptVelocity', mode=MODE_TYPE)
    _RptVelocity_speed = INT(name='speed', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')))
    _RptVelocity_speedStdDev = INT(name='speedStdDev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'StdDev')), opt=True)
    _RptVelocity_heading = INT(name='heading', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Heading')), opt=True)
    RptVelocity._cont = ASN1Dict([
        ('speed', _RptVelocity_speed),
        ('speedStdDev', _RptVelocity_speedStdDev),
        ('heading', _RptVelocity_heading),
        ])
    RptVelocity._ext = []
    
    #-----< RptInstantaneousRecordData >-----#
    RptInstantaneousRecordData = CHOICE(name='RptInstantaneousRecordData', mode=MODE_TYPE)
    _RptInstantaneousRecordData_intervalEvents = SEQ(name='intervalEvents', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptIntervalEvents')))
    _RptInstantaneousRecordData_vehEvents = CHOICE(name='vehEvents', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptVehicleEvents')))
    _RptInstantaneousRecordData_roadwayEvents = CHOICE(name='roadwayEvents', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptRoadwayEvents')))
    _RptInstantaneousRecordData_commSysPerfEvents = CHOICE(name='commSysPerfEvents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptCommSysPerfEvents')))
    RptInstantaneousRecordData._cont = ASN1Dict([
        ('intervalEvents', _RptInstantaneousRecordData_intervalEvents),
        ('vehEvents', _RptInstantaneousRecordData_vehEvents),
        ('roadwayEvents', _RptInstantaneousRecordData_roadwayEvents),
        ('commSysPerfEvents', _RptInstantaneousRecordData_commSysPerfEvents),
        ])
    RptInstantaneousRecordData._ext = []
    
    #-----< RptAveragedAndSummaryRecord >-----#
    RptAveragedAndSummaryRecord = SEQ(name='RptAveragedAndSummaryRecord', mode=MODE_TYPE)
    _RptAveragedAndSummaryRecord_startTime = SEQ(name='startTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _RptAveragedAndSummaryRecord_startLoc = SEQ(name='startLoc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RptAveragedAndSummaryRecord_startAccOfPos = SEQ(name='startAccOfPos', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _RptAveragedAndSummaryRecord_endTime = SEQ(name='endTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _RptAveragedAndSummaryRecord_endLoc = SEQ(name='endLoc', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RptAveragedAndSummaryRecord_endAccOfPos = SEQ(name='endAccOfPos', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _RptAveragedAndSummaryRecord_record = CHOICE(name='record', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptAvgAndSummaryRecordData')))
    RptAveragedAndSummaryRecord._cont = ASN1Dict([
        ('startTime', _RptAveragedAndSummaryRecord_startTime),
        ('startLoc', _RptAveragedAndSummaryRecord_startLoc),
        ('startAccOfPos', _RptAveragedAndSummaryRecord_startAccOfPos),
        ('endTime', _RptAveragedAndSummaryRecord_endTime),
        ('endLoc', _RptAveragedAndSummaryRecord_endLoc),
        ('endAccOfPos', _RptAveragedAndSummaryRecord_endAccOfPos),
        ('record', _RptAveragedAndSummaryRecord_record),
        ])
    RptAveragedAndSummaryRecord._ext = []
    
    #-----< RptAvgAndSummaryRecordData >-----#
    RptAvgAndSummaryRecordData = CHOICE(name='RptAvgAndSummaryRecordData', mode=MODE_TYPE)
    _RptAvgAndSummaryRecordData_averagedRecord = SEQ(name='averagedRecord', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptAveragedRecord')))
    _RptAvgAndSummaryRecordData_summaryRecord = SEQ(name='summaryRecord', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptSummaryRecord')))
    RptAvgAndSummaryRecordData._cont = ASN1Dict([
        ('averagedRecord', _RptAvgAndSummaryRecordData_averagedRecord),
        ('summaryRecord', _RptAvgAndSummaryRecordData_summaryRecord),
        ])
    RptAvgAndSummaryRecordData._ext = []
    
    #-----< RptIntervalEvents >-----#
    RptIntervalEvents = SEQ(name='RptIntervalEvents', mode=MODE_TYPE)
    _RptIntervalEvents_wiperStatus = ENUM(name='wiperStatus', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptWiperStatus')), opt=True)
    _RptIntervalEvents_vehCount = INT(name='vehCount', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptIntervalEvents_vehCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10000)], ev=None, er=[])
    _RptIntervalEvents_weatherData = SEQ_OF(name='weatherData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptVehicleReport')), opt=True)
    _RptIntervalEvents_transitVehData = SEQ(name='transitVehData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptTransitVehData')), opt=True)
    _RptIntervalEvents_numOfOccupants = INT(name='numOfOccupants', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptIntervalEvents_numOfOccupants._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    RptIntervalEvents._cont = ASN1Dict([
        ('wiperStatus', _RptIntervalEvents_wiperStatus),
        ('vehCount', _RptIntervalEvents_vehCount),
        ('weatherData', _RptIntervalEvents_weatherData),
        ('transitVehData', _RptIntervalEvents_transitVehData),
        ('numOfOccupants', _RptIntervalEvents_numOfOccupants),
        ])
    RptIntervalEvents._ext = []
    
    #-----< RptVehicleReport >-----#
    RptVehicleReport = SEQ_OF(name='RptVehicleReport', mode=MODE_TYPE)
    _RptVehicleReport__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadWeatherMessage', 'NtcipEssData')))
    RptVehicleReport._cont = _RptVehicleReport__item_
    RptVehicleReport._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< RptTransitVehData >-----#
    RptTransitVehData = SEQ(name='RptTransitVehData', mode=MODE_TYPE)
    _RptTransitVehData_currNumPasngers = INT(name='currNumPasngers', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptTransitVehData_currNumPasngers._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RptTransitVehData_avgNumPasngers = INT(name='avgNumPasngers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptTransitVehData_avgNumPasngers._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RptTransitVehData_trnstVehSchAdh = INT(name='trnstVehSchAdh', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptTransitVehData_trnstVehSchAdh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-200, ub=55)], ev=None, er=[])
    RptTransitVehData._cont = ASN1Dict([
        ('currNumPasngers', _RptTransitVehData_currNumPasngers),
        ('avgNumPasngers', _RptTransitVehData_avgNumPasngers),
        ('trnstVehSchAdh', _RptTransitVehData_trnstVehSchAdh),
        ])
    RptTransitVehData._ext = []
    
    #-----< RptVehicleEvents >-----#
    RptVehicleEvents = CHOICE(name='RptVehicleEvents', mode=MODE_TYPE)
    _RptVehicleEvents_headLights = NULL(name='headLights', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_fogLights = NULL(name='fogLights', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_hazardLights = NULL(name='hazardLights', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_kinematicEvents = SEQ(name='kinematicEvents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptKinematicEvents')))
    _RptVehicleEvents_wiperStatusChange = NULL(name='wiperStatusChange', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_lowSpeed = NULL(name='lowSpeed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_resumedSpeed = NULL(name='resumedSpeed', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_vehEntrsExitsRegion = NULL(name='vehEntrsExitsRegion', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_emerVehDetect = NULL(name='emerVehDetect', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_emerVehLightBar = NULL(name='emerVehLightBar', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_reqTspEvp = NULL(name='reqTspEvp', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_transitVehPassCnt = NULL(name='transitVehPassCnt', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_transitVehDoor = NULL(name='transitVehDoor', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_v2xMsgRecption = NULL(name='v2xMsgRecption', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptVehicleEvents_driverAlertsAndWarnings = CHOICE(name='driverAlertsAndWarnings', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptDriverAlertsAndWarnings')))
    RptVehicleEvents._cont = ASN1Dict([
        ('headLights', _RptVehicleEvents_headLights),
        ('fogLights', _RptVehicleEvents_fogLights),
        ('hazardLights', _RptVehicleEvents_hazardLights),
        ('kinematicEvents', _RptVehicleEvents_kinematicEvents),
        ('wiperStatusChange', _RptVehicleEvents_wiperStatusChange),
        ('lowSpeed', _RptVehicleEvents_lowSpeed),
        ('resumedSpeed', _RptVehicleEvents_resumedSpeed),
        ('vehEntrsExitsRegion', _RptVehicleEvents_vehEntrsExitsRegion),
        ('emerVehDetect', _RptVehicleEvents_emerVehDetect),
        ('emerVehLightBar', _RptVehicleEvents_emerVehLightBar),
        ('reqTspEvp', _RptVehicleEvents_reqTspEvp),
        ('transitVehPassCnt', _RptVehicleEvents_transitVehPassCnt),
        ('transitVehDoor', _RptVehicleEvents_transitVehDoor),
        ('v2xMsgRecption', _RptVehicleEvents_v2xMsgRecption),
        ('driverAlertsAndWarnings', _RptVehicleEvents_driverAlertsAndWarnings),
        ])
    RptVehicleEvents._ext = []
    
    #-----< RptDriverAlertsAndWarnings >-----#
    RptDriverAlertsAndWarnings = CHOICE(name='RptDriverAlertsAndWarnings', mode=MODE_TYPE)
    _RptDriverAlertsAndWarnings_j2945Slash1Eebl = NULL(name='j2945Slash1Eebl', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_j2945Slash1Fcw = NULL(name='j2945Slash1Fcw', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_j2945Slash1BswLcw = NULL(name='j2945Slash1BswLcw', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_j2945Slash1Ima = NULL(name='j2945Slash1Ima', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_j2945Slash1Lta = NULL(name='j2945Slash1Lta', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_j2945Slash1Clw = NULL(name='j2945Slash1Clw', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_redLightViolationWarn = NULL(name='redLightViolationWarn', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_emerVehAlert = NULL(name='emerVehAlert', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_otherAlert = NULL(name='otherAlert', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptDriverAlertsAndWarnings_otherWarning = NULL(name='otherWarning', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    RptDriverAlertsAndWarnings._cont = ASN1Dict([
        ('j2945Slash1Eebl', _RptDriverAlertsAndWarnings_j2945Slash1Eebl),
        ('j2945Slash1Fcw', _RptDriverAlertsAndWarnings_j2945Slash1Fcw),
        ('j2945Slash1BswLcw', _RptDriverAlertsAndWarnings_j2945Slash1BswLcw),
        ('j2945Slash1Ima', _RptDriverAlertsAndWarnings_j2945Slash1Ima),
        ('j2945Slash1Lta', _RptDriverAlertsAndWarnings_j2945Slash1Lta),
        ('j2945Slash1Clw', _RptDriverAlertsAndWarnings_j2945Slash1Clw),
        ('redLightViolationWarn', _RptDriverAlertsAndWarnings_redLightViolationWarn),
        ('emerVehAlert', _RptDriverAlertsAndWarnings_emerVehAlert),
        ('otherAlert', _RptDriverAlertsAndWarnings_otherAlert),
        ('otherWarning', _RptDriverAlertsAndWarnings_otherWarning),
        ])
    RptDriverAlertsAndWarnings._ext = []
    
    #-----< RptKinematicEvents >-----#
    RptKinematicEvents = SEQ(name='RptKinematicEvents', mode=MODE_TYPE)
    _RptKinematicEvents_events = CHOICE(name='events', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptEvents')))
    _RptKinematicEvents_hysteresis = SEQ_OF(name='hysteresis', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptHysteresisRecord')), opt=True)
    RptKinematicEvents._cont = ASN1Dict([
        ('events', _RptKinematicEvents_events),
        ('hysteresis', _RptKinematicEvents_hysteresis),
        ])
    RptKinematicEvents._ext = []
    
    #-----< RptEvents >-----#
    RptEvents = CHOICE(name='RptEvents', mode=MODE_TYPE)
    _RptEvents_absActive = BOOL(name='absActive', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptEvents_tractionCtlLoss = BOOL(name='tractionCtlLoss', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptEvents_stabilityCtlActive = BOOL(name='stabilityCtlActive', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptEvents_hardBraking = BOOL(name='hardBraking', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptEvents_swerve = BOOL(name='swerve', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    RptEvents._cont = ASN1Dict([
        ('absActive', _RptEvents_absActive),
        ('tractionCtlLoss', _RptEvents_tractionCtlLoss),
        ('stabilityCtlActive', _RptEvents_stabilityCtlActive),
        ('hardBraking', _RptEvents_hardBraking),
        ('swerve', _RptEvents_swerve),
        ])
    RptEvents._ext = []
    
    #-----< RptHysteresisRecord >-----#
    RptHysteresisRecord = SEQ_OF(name='RptHysteresisRecord', mode=MODE_TYPE)
    _RptHysteresisRecord__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ProbeDataReport', 'RptHysteresis')))
    RptHysteresisRecord._cont = _RptHysteresisRecord__item_
    RptHysteresisRecord._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< RptHysteresis >-----#
    RptHysteresis = SEQ(name='RptHysteresis', mode=MODE_TYPE)
    _RptHysteresis_time = SEQ(name='time', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DTime')))
    _RptHysteresis_position = SEQ(name='position', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RptHysteresis_positionalAccuracy = SEQ(name='positionalAccuracy', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')), opt=True)
    _RptHysteresis_velocity = SEQ(name='velocity', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptVelocity')))
    RptHysteresis._cont = ASN1Dict([
        ('time', _RptHysteresis_time),
        ('position', _RptHysteresis_position),
        ('positionalAccuracy', _RptHysteresis_positionalAccuracy),
        ('velocity', _RptHysteresis_velocity),
        ])
    RptHysteresis._ext = []
    
    #-----< RptRoadwayEvents >-----#
    RptRoadwayEvents = CHOICE(name='RptRoadwayEvents', mode=MODE_TYPE)
    _RptRoadwayEvents_obstacleDetected = NULL(name='obstacleDetected', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_adverseRoadSurface = SEQ(name='adverseRoadSurface', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptRoadRoughness')))
    _RptRoadwayEvents_trfsigEncounters = SEQ(name='trfsigEncounters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptTrafficSigEncounters')))
    _RptRoadwayEvents_trfsigLightOut = NULL(name='trfsigLightOut', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_trfsigRoadGeoMismatch = NULL(name='trfsigRoadGeoMismatch', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_roadsignDetection = NULL(name='roadsignDetection', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_lowRoadsignReflect = NULL(name='lowRoadsignReflect', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_lowLaneMarkReflect = NULL(name='lowLaneMarkReflect', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_roadsignIncnstncy = NULL(name='roadsignIncnstncy', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_laneGeoIncnstncy = NULL(name='laneGeoIncnstncy', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_incidentDetect = NULL(name='incidentDetect', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_workZoneCharDetect = NULL(name='workZoneCharDetect', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_inclWeatherDetect = NULL(name='inclWeatherDetect', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_railrdCrossActiv = NULL(name='railrdCrossActiv', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptRoadwayEvents_drawBridgeActiv = NULL(name='drawBridgeActiv', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    RptRoadwayEvents._cont = ASN1Dict([
        ('obstacleDetected', _RptRoadwayEvents_obstacleDetected),
        ('adverseRoadSurface', _RptRoadwayEvents_adverseRoadSurface),
        ('trfsigEncounters', _RptRoadwayEvents_trfsigEncounters),
        ('trfsigLightOut', _RptRoadwayEvents_trfsigLightOut),
        ('trfsigRoadGeoMismatch', _RptRoadwayEvents_trfsigRoadGeoMismatch),
        ('roadsignDetection', _RptRoadwayEvents_roadsignDetection),
        ('lowRoadsignReflect', _RptRoadwayEvents_lowRoadsignReflect),
        ('lowLaneMarkReflect', _RptRoadwayEvents_lowLaneMarkReflect),
        ('roadsignIncnstncy', _RptRoadwayEvents_roadsignIncnstncy),
        ('laneGeoIncnstncy', _RptRoadwayEvents_laneGeoIncnstncy),
        ('incidentDetect', _RptRoadwayEvents_incidentDetect),
        ('workZoneCharDetect', _RptRoadwayEvents_workZoneCharDetect),
        ('inclWeatherDetect', _RptRoadwayEvents_inclWeatherDetect),
        ('railrdCrossActiv', _RptRoadwayEvents_railrdCrossActiv),
        ('drawBridgeActiv', _RptRoadwayEvents_drawBridgeActiv),
        ])
    RptRoadwayEvents._ext = []
    
    #-----< RptRoadRoughness >-----#
    RptRoadRoughness = SEQ(name='RptRoadRoughness', mode=MODE_TYPE)
    _RptRoadRoughness_meanVerticalVariation = INT(name='meanVerticalVariation', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'MeanVariation')))
    _RptRoadRoughness_verticalVariationStdDev = INT(name='verticalVariationStdDev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'StdDev')), opt=True)
    _RptRoadRoughness_meanHorizontalVariation = INT(name='meanHorizontalVariation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'MeanVariation')), opt=True)
    _RptRoadRoughness_horizontalVariationStdDev = INT(name='horizontalVariationStdDev', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'StdDev')), opt=True)
    RptRoadRoughness._cont = ASN1Dict([
        ('meanVerticalVariation', _RptRoadRoughness_meanVerticalVariation),
        ('verticalVariationStdDev', _RptRoadRoughness_verticalVariationStdDev),
        ('meanHorizontalVariation', _RptRoadRoughness_meanHorizontalVariation),
        ('horizontalVariationStdDev', _RptRoadRoughness_horizontalVariationStdDev),
        ])
    RptRoadRoughness._ext = []
    
    #-----< MeanVariation >-----#
    MeanVariation = INT(name='MeanVariation', mode=MODE_TYPE)
    MeanVariation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=25000)], ev=None, er=[])
    
    #-----< StdDev >-----#
    StdDev = INT(name='StdDev', mode=MODE_TYPE)
    StdDev._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10000)], ev=None, er=[])
    
    #-----< RptTrafficSigEncounters >-----#
    RptTrafficSigEncounters = SEQ(name='RptTrafficSigEncounters', mode=MODE_TYPE)
    _RptTrafficSigEncounters_intersectionID = INT(name='intersectionID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'IntersectionID')), opt=True)
    _RptTrafficSigEncounters_trafficMetrics = CHOICE(name='trafficMetrics', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptTrafficMetrics')))
    RptTrafficSigEncounters._cont = ASN1Dict([
        ('intersectionID', _RptTrafficSigEncounters_intersectionID),
        ('trafficMetrics', _RptTrafficSigEncounters_trafficMetrics),
        ])
    RptTrafficSigEncounters._ext = []
    
    #-----< RptTrafficMetrics >-----#
    RptTrafficMetrics = CHOICE(name='RptTrafficMetrics', mode=MODE_TYPE)
    _RptTrafficMetrics_trfsigApproachDelay = NULL(name='trfsigApproachDelay', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptTrafficMetrics_trfsigApproachSpeed = NULL(name='trfsigApproachSpeed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptTrafficMetrics_trfsigArrivalGreen = NULL(name='trfsigArrivalGreen', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptTrafficMetrics_trfsigArrivalRed = NULL(name='trfsigArrivalRed', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptTrafficMetrics_trfsigPedDelay = NULL(name='trfsigPedDelay', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptTrafficMetrics_trfsigSpatMismatch = NULL(name='trfsigSpatMismatch', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptTrafficMetrics_trfsigSpatTimingError = NULL(name='trfsigSpatTimingError', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    RptTrafficMetrics._cont = ASN1Dict([
        ('trfsigApproachDelay', _RptTrafficMetrics_trfsigApproachDelay),
        ('trfsigApproachSpeed', _RptTrafficMetrics_trfsigApproachSpeed),
        ('trfsigArrivalGreen', _RptTrafficMetrics_trfsigArrivalGreen),
        ('trfsigArrivalRed', _RptTrafficMetrics_trfsigArrivalRed),
        ('trfsigPedDelay', _RptTrafficMetrics_trfsigPedDelay),
        ('trfsigSpatMismatch', _RptTrafficMetrics_trfsigSpatMismatch),
        ('trfsigSpatTimingError', _RptTrafficMetrics_trfsigSpatTimingError),
        ])
    RptTrafficMetrics._ext = []
    
    #-----< RptCommSysPerfEvents >-----#
    RptCommSysPerfEvents = CHOICE(name='RptCommSysPerfEvents', mode=MODE_TYPE)
    _RptCommSysPerfEvents_j2945_1ChanBusy = NULL(name='j2945-1ChanBusy', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_rfDataRsuInfo = OCT_STR(name='rfDataRsuInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_rfDataRsuInfo._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _RptCommSysPerfEvents_numOfRsusObserved = INT(name='numOfRsusObserved', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_numOfRsusObserved._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _RptCommSysPerfEvents_rfV2xJamDetect = NULL(name='rfV2xJamDetect', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_j2945_1VehDens = NULL(name='j2945-1VehDens', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_j2945_1CqiBelow = NULL(name='j2945-1CqiBelow', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_j2945_1TrackingError = NULL(name='j2945-1TrackingError', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_gnssHdopExceeds = NULL(name='gnssHdopExceeds', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_gnssErrElipse = NULL(name='gnssErrElipse', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_gnssSatsBelow = NULL(name='gnssSatsBelow', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptCommSysPerfEvents_jammingDetect = NULL(name='jammingDetect', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    RptCommSysPerfEvents._cont = ASN1Dict([
        ('j2945-1ChanBusy', _RptCommSysPerfEvents_j2945_1ChanBusy),
        ('rfDataRsuInfo', _RptCommSysPerfEvents_rfDataRsuInfo),
        ('numOfRsusObserved', _RptCommSysPerfEvents_numOfRsusObserved),
        ('rfV2xJamDetect', _RptCommSysPerfEvents_rfV2xJamDetect),
        ('j2945-1VehDens', _RptCommSysPerfEvents_j2945_1VehDens),
        ('j2945-1CqiBelow', _RptCommSysPerfEvents_j2945_1CqiBelow),
        ('j2945-1TrackingError', _RptCommSysPerfEvents_j2945_1TrackingError),
        ('gnssHdopExceeds', _RptCommSysPerfEvents_gnssHdopExceeds),
        ('gnssErrElipse', _RptCommSysPerfEvents_gnssErrElipse),
        ('gnssSatsBelow', _RptCommSysPerfEvents_gnssSatsBelow),
        ('jammingDetect', _RptCommSysPerfEvents_jammingDetect),
        ])
    RptCommSysPerfEvents._ext = []
    
    #-----< RptWiperStatus >-----#
    RptWiperStatus = ENUM(name='RptWiperStatus', mode=MODE_TYPE)
    RptWiperStatus._cont = ASN1Dict([('off', 0), ('low', 1), ('medium', 2), ('high', 3)])
    RptWiperStatus._ext = []
    
    #-----< RptAveragedRecord >-----#
    RptAveragedRecord = SEQ(name='RptAveragedRecord', mode=MODE_TYPE)
    _RptAveragedRecord_avgSpeed = INT(name='avgSpeed', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')), opt=True)
    _RptAveragedRecord_speedStdDev = INT(name='speedStdDev', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'StdDev')), opt=True)
    _RptAveragedRecord_avgStopDuration = INT(name='avgStopDuration', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptAveragedRecord_avgStopDuration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=36000)], ev=None, er=[])
    _RptAveragedRecord_avgStopStdDev = INT(name='avgStopStdDev', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'StdDev')), opt=True)
    _RptAveragedRecord_avgFuelConsumption = INT(name='avgFuelConsumption', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptAveragedRecord_avgFuelConsumption._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _RptAveragedRecord_avgEmissions = SEQ(name='avgEmissions', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptEmissions')), opt=True)
    _RptAveragedRecord_avgNumOfOccupants = INT(name='avgNumOfOccupants', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptAveragedRecord_avgNumOfOccupants._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    RptAveragedRecord._cont = ASN1Dict([
        ('avgSpeed', _RptAveragedRecord_avgSpeed),
        ('speedStdDev', _RptAveragedRecord_speedStdDev),
        ('avgStopDuration', _RptAveragedRecord_avgStopDuration),
        ('avgStopStdDev', _RptAveragedRecord_avgStopStdDev),
        ('avgFuelConsumption', _RptAveragedRecord_avgFuelConsumption),
        ('avgEmissions', _RptAveragedRecord_avgEmissions),
        ('avgNumOfOccupants', _RptAveragedRecord_avgNumOfOccupants),
        ])
    RptAveragedRecord._ext = []
    
    #-----< RptSummaryRecord >-----#
    RptSummaryRecord = SEQ(name='RptSummaryRecord', mode=MODE_TYPE)
    _RptSummaryRecord_regTravelTime = INT(name='regTravelTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_regTravelTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3600)], ev=None, er=[])
    _RptSummaryRecord_regVehDistTraveled = INT(name='regVehDistTraveled', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_regVehDistTraveled._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=500)], ev=None, er=[])
    _RptSummaryRecord_regVehTimeTraveled = INT(name='regVehTimeTraveled', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_regVehTimeTraveled._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3600)], ev=None, er=[])
    _RptSummaryRecord_fuelConsumption = INT(name='fuelConsumption', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_fuelConsumption._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _RptSummaryRecord_totalVehEmissions = SEQ(name='totalVehEmissions', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptEmissions')), opt=True)
    _RptSummaryRecord_numOfLowSpeedEvents = INT(name='numOfLowSpeedEvents', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_numOfLowSpeedEvents._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _RptSummaryRecord_timeStopped = INT(name='timeStopped', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_timeStopped._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=36000)], ev=None, er=[])
    _RptSummaryRecord_numOfStopped = INT(name='numOfStopped', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_numOfStopped._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _RptSummaryRecord_locOfStops = SEQ(name='locOfStops', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeDataReport', 'RptLocOfStops')), opt=True)
    _RptSummaryRecord_regNumOfVehPassed = INT(name='regNumOfVehPassed', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_regNumOfVehPassed._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _RptSummaryRecord_regNumOfSurpassedVeh = INT(name='regNumOfSurpassedVeh', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_regNumOfSurpassedVeh._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _RptSummaryRecord_totalMsgsReceived = INT(name='totalMsgsReceived', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptSummaryRecord_totalMsgsReceived._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    RptSummaryRecord._cont = ASN1Dict([
        ('regTravelTime', _RptSummaryRecord_regTravelTime),
        ('regVehDistTraveled', _RptSummaryRecord_regVehDistTraveled),
        ('regVehTimeTraveled', _RptSummaryRecord_regVehTimeTraveled),
        ('fuelConsumption', _RptSummaryRecord_fuelConsumption),
        ('totalVehEmissions', _RptSummaryRecord_totalVehEmissions),
        ('numOfLowSpeedEvents', _RptSummaryRecord_numOfLowSpeedEvents),
        ('timeStopped', _RptSummaryRecord_timeStopped),
        ('numOfStopped', _RptSummaryRecord_numOfStopped),
        ('locOfStops', _RptSummaryRecord_locOfStops),
        ('regNumOfVehPassed', _RptSummaryRecord_regNumOfVehPassed),
        ('regNumOfSurpassedVeh', _RptSummaryRecord_regNumOfSurpassedVeh),
        ('totalMsgsReceived', _RptSummaryRecord_totalMsgsReceived),
        ])
    RptSummaryRecord._ext = []
    
    #-----< RptEmissions >-----#
    RptEmissions = SEQ(name='RptEmissions', mode=MODE_TYPE)
    _RptEmissions_hydrocarbons = INT(name='hydrocarbons', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_hydrocarbons._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_co = INT(name='co', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_co._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_co2 = INT(name='co2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_co2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_no = INT(name='no', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_no._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_no2 = INT(name='no2', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_no2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_so2 = INT(name='so2', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_so2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_o3 = INT(name='o3', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_o3._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_pm10 = INT(name='pm10', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_pm10._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    _RptEmissions_pm25 = INT(name='pm25', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RptEmissions_pm25._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    RptEmissions._cont = ASN1Dict([
        ('hydrocarbons', _RptEmissions_hydrocarbons),
        ('co', _RptEmissions_co),
        ('co2', _RptEmissions_co2),
        ('no', _RptEmissions_no),
        ('no2', _RptEmissions_no2),
        ('so2', _RptEmissions_so2),
        ('o3', _RptEmissions_o3),
        ('pm10', _RptEmissions_pm10),
        ('pm25', _RptEmissions_pm25),
        ])
    RptEmissions._ext = []
    
    #-----< RptLocOfStops >-----#
    RptLocOfStops = SEQ(name='RptLocOfStops', mode=MODE_TYPE)
    _RptLocOfStops_locationOfStop = SEQ(name='locationOfStop', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _RptLocOfStops_locAccOfStop = SEQ(name='locAccOfStop', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _RptLocOfStops_durationOfStop = INT(name='durationOfStop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RptLocOfStops_durationOfStop._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=36000)], ev=None, er=[])
    RptLocOfStops._cont = ASN1Dict([
        ('locationOfStop', _RptLocOfStops_locationOfStop),
        ('locAccOfStop', _RptLocOfStops_locAccOfStop),
        ('durationOfStop', _RptLocOfStops_durationOfStop),
        ])
    RptLocOfStops._ext = []
    
    _all_ = [
        _ProbeDataReportMessage_configId,
        _ProbeDataReportMessage_reportChar,
        _ProbeDataReportMessage_roadAuthorityID,
        _ProbeDataReportMessage_instantaneousRecs,
        _ProbeDataReportMessage_avgAndSumRec,
        ProbeDataReportMessage,
        _ReportCharacteristics_timeStamp,
        _ReportCharacteristics_position,
        _ReportCharacteristics_posAccuracy,
        _ReportCharacteristics_velocity,
        _ReportCharacteristics_vehicleClass,
        _ReportCharacteristics_devType,
        _ReportCharacteristics_vehicleSize,
        _ReportCharacteristics_vehicleMass,
        _ReportCharacteristics_vehPassengerCount,
        ReportCharacteristics,
        RptVehicleClass,
        _RptDevType_oemOrAftermarket,
        _RptDevType_canOrIvnConnected,
        _RptDevType_mcoCapable,
        RptDevType,
        _RptInstantaneousRecords__item_,
        RptInstantaneousRecords,
        _RptInstantaneousRecord_timeOfInstantRec,
        _RptInstantaneousRecord_locOfInstantRec,
        _RptInstantaneousRecord_accOfPosition,
        _RptInstantaneousRecord_velOfInstantRec,
        _RptInstantaneousRecord_record,
        RptInstantaneousRecord,
        _RptVelocity_speed,
        _RptVelocity_speedStdDev,
        _RptVelocity_heading,
        RptVelocity,
        _RptInstantaneousRecordData_intervalEvents,
        _RptInstantaneousRecordData_vehEvents,
        _RptInstantaneousRecordData_roadwayEvents,
        _RptInstantaneousRecordData_commSysPerfEvents,
        RptInstantaneousRecordData,
        _RptAveragedAndSummaryRecord_startTime,
        _RptAveragedAndSummaryRecord_startLoc,
        _RptAveragedAndSummaryRecord_startAccOfPos,
        _RptAveragedAndSummaryRecord_endTime,
        _RptAveragedAndSummaryRecord_endLoc,
        _RptAveragedAndSummaryRecord_endAccOfPos,
        _RptAveragedAndSummaryRecord_record,
        RptAveragedAndSummaryRecord,
        _RptAvgAndSummaryRecordData_averagedRecord,
        _RptAvgAndSummaryRecordData_summaryRecord,
        RptAvgAndSummaryRecordData,
        _RptIntervalEvents_wiperStatus,
        _RptIntervalEvents_vehCount,
        _RptIntervalEvents_weatherData,
        _RptIntervalEvents_transitVehData,
        _RptIntervalEvents_numOfOccupants,
        RptIntervalEvents,
        _RptVehicleReport__item_,
        RptVehicleReport,
        _RptTransitVehData_currNumPasngers,
        _RptTransitVehData_avgNumPasngers,
        _RptTransitVehData_trnstVehSchAdh,
        RptTransitVehData,
        _RptVehicleEvents_headLights,
        _RptVehicleEvents_fogLights,
        _RptVehicleEvents_hazardLights,
        _RptVehicleEvents_kinematicEvents,
        _RptVehicleEvents_wiperStatusChange,
        _RptVehicleEvents_lowSpeed,
        _RptVehicleEvents_resumedSpeed,
        _RptVehicleEvents_vehEntrsExitsRegion,
        _RptVehicleEvents_emerVehDetect,
        _RptVehicleEvents_emerVehLightBar,
        _RptVehicleEvents_reqTspEvp,
        _RptVehicleEvents_transitVehPassCnt,
        _RptVehicleEvents_transitVehDoor,
        _RptVehicleEvents_v2xMsgRecption,
        _RptVehicleEvents_driverAlertsAndWarnings,
        RptVehicleEvents,
        _RptDriverAlertsAndWarnings_j2945Slash1Eebl,
        _RptDriverAlertsAndWarnings_j2945Slash1Fcw,
        _RptDriverAlertsAndWarnings_j2945Slash1BswLcw,
        _RptDriverAlertsAndWarnings_j2945Slash1Ima,
        _RptDriverAlertsAndWarnings_j2945Slash1Lta,
        _RptDriverAlertsAndWarnings_j2945Slash1Clw,
        _RptDriverAlertsAndWarnings_redLightViolationWarn,
        _RptDriverAlertsAndWarnings_emerVehAlert,
        _RptDriverAlertsAndWarnings_otherAlert,
        _RptDriverAlertsAndWarnings_otherWarning,
        RptDriverAlertsAndWarnings,
        _RptKinematicEvents_events,
        _RptKinematicEvents_hysteresis,
        RptKinematicEvents,
        _RptEvents_absActive,
        _RptEvents_tractionCtlLoss,
        _RptEvents_stabilityCtlActive,
        _RptEvents_hardBraking,
        _RptEvents_swerve,
        RptEvents,
        _RptHysteresisRecord__item_,
        RptHysteresisRecord,
        _RptHysteresis_time,
        _RptHysteresis_position,
        _RptHysteresis_positionalAccuracy,
        _RptHysteresis_velocity,
        RptHysteresis,
        _RptRoadwayEvents_obstacleDetected,
        _RptRoadwayEvents_adverseRoadSurface,
        _RptRoadwayEvents_trfsigEncounters,
        _RptRoadwayEvents_trfsigLightOut,
        _RptRoadwayEvents_trfsigRoadGeoMismatch,
        _RptRoadwayEvents_roadsignDetection,
        _RptRoadwayEvents_lowRoadsignReflect,
        _RptRoadwayEvents_lowLaneMarkReflect,
        _RptRoadwayEvents_roadsignIncnstncy,
        _RptRoadwayEvents_laneGeoIncnstncy,
        _RptRoadwayEvents_incidentDetect,
        _RptRoadwayEvents_workZoneCharDetect,
        _RptRoadwayEvents_inclWeatherDetect,
        _RptRoadwayEvents_railrdCrossActiv,
        _RptRoadwayEvents_drawBridgeActiv,
        RptRoadwayEvents,
        _RptRoadRoughness_meanVerticalVariation,
        _RptRoadRoughness_verticalVariationStdDev,
        _RptRoadRoughness_meanHorizontalVariation,
        _RptRoadRoughness_horizontalVariationStdDev,
        RptRoadRoughness,
        MeanVariation,
        StdDev,
        _RptTrafficSigEncounters_intersectionID,
        _RptTrafficSigEncounters_trafficMetrics,
        RptTrafficSigEncounters,
        _RptTrafficMetrics_trfsigApproachDelay,
        _RptTrafficMetrics_trfsigApproachSpeed,
        _RptTrafficMetrics_trfsigArrivalGreen,
        _RptTrafficMetrics_trfsigArrivalRed,
        _RptTrafficMetrics_trfsigPedDelay,
        _RptTrafficMetrics_trfsigSpatMismatch,
        _RptTrafficMetrics_trfsigSpatTimingError,
        RptTrafficMetrics,
        _RptCommSysPerfEvents_j2945_1ChanBusy,
        _RptCommSysPerfEvents_rfDataRsuInfo,
        _RptCommSysPerfEvents_numOfRsusObserved,
        _RptCommSysPerfEvents_rfV2xJamDetect,
        _RptCommSysPerfEvents_j2945_1VehDens,
        _RptCommSysPerfEvents_j2945_1CqiBelow,
        _RptCommSysPerfEvents_j2945_1TrackingError,
        _RptCommSysPerfEvents_gnssHdopExceeds,
        _RptCommSysPerfEvents_gnssErrElipse,
        _RptCommSysPerfEvents_gnssSatsBelow,
        _RptCommSysPerfEvents_jammingDetect,
        RptCommSysPerfEvents,
        RptWiperStatus,
        _RptAveragedRecord_avgSpeed,
        _RptAveragedRecord_speedStdDev,
        _RptAveragedRecord_avgStopDuration,
        _RptAveragedRecord_avgStopStdDev,
        _RptAveragedRecord_avgFuelConsumption,
        _RptAveragedRecord_avgEmissions,
        _RptAveragedRecord_avgNumOfOccupants,
        RptAveragedRecord,
        _RptSummaryRecord_regTravelTime,
        _RptSummaryRecord_regVehDistTraveled,
        _RptSummaryRecord_regVehTimeTraveled,
        _RptSummaryRecord_fuelConsumption,
        _RptSummaryRecord_totalVehEmissions,
        _RptSummaryRecord_numOfLowSpeedEvents,
        _RptSummaryRecord_timeStopped,
        _RptSummaryRecord_numOfStopped,
        _RptSummaryRecord_locOfStops,
        _RptSummaryRecord_regNumOfVehPassed,
        _RptSummaryRecord_regNumOfSurpassedVeh,
        _RptSummaryRecord_totalMsgsReceived,
        RptSummaryRecord,
        _RptEmissions_hydrocarbons,
        _RptEmissions_co,
        _RptEmissions_co2,
        _RptEmissions_no,
        _RptEmissions_no2,
        _RptEmissions_so2,
        _RptEmissions_o3,
        _RptEmissions_pm10,
        _RptEmissions_pm25,
        RptEmissions,
        _RptLocOfStops_locationOfStop,
        _RptLocOfStops_locAccOfStop,
        _RptLocOfStops_durationOfStop,
        RptLocOfStops,
    ]

class ManeuverSharingAndCoordinatingMessage:

    _name_  = 'ManeuverSharingAndCoordinatingMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 8, 1, 3186, 1, 42, 1, 1]
    
    _obj_ = [
        'ManeuverSharingAndCoordinatingMessage',
        'MSCMType',
        'TemporaryIDList',
        'ManeuverID',
        'Maneuver',
        'SubManeuverList',
        'SubManeuver',
        'TemporaryIDPointer',
        'CurrentStateData',
        'PositionOffsetXYZ',
        'ObjectDistance',
        'TargetRoadResource',
        'TRRType',
        'TRRLocation',
        'TRRLocationType1',
        'TRRLocationType2',
        'TRRLocationType3',
        'TRRLength',
        'LaneOffset',
        'SurroundingVehicleInfo',
        'ResponseFlag',
        'ReasonCode',
        'ManeuverExecutionStatus',
        ]
    _type_ = [
        'ManeuverSharingAndCoordinatingMessage',
        'MSCMType',
        'TemporaryIDList',
        'ManeuverID',
        'Maneuver',
        'SubManeuverList',
        'SubManeuver',
        'TemporaryIDPointer',
        'CurrentStateData',
        'PositionOffsetXYZ',
        'ObjectDistance',
        'TargetRoadResource',
        'TRRType',
        'TRRLocation',
        'TRRLocationType1',
        'TRRLocationType2',
        'TRRLocationType3',
        'TRRLength',
        'LaneOffset',
        'SurroundingVehicleInfo',
        'ResponseFlag',
        'ReasonCode',
        'ManeuverExecutionStatus',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ManeuverSharingAndCoordinatingMessage >-----#
    ManeuverSharingAndCoordinatingMessage = SEQ(name='ManeuverSharingAndCoordinatingMessage', mode=MODE_TYPE)
    _ManeuverSharingAndCoordinatingMessage_mSCMTimestamp = SEQ(name='mSCMTimestamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ManeuverSharingAndCoordinatingMessage_hVPos = SEQ(name='hVPos', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')), opt=True)
    _ManeuverSharingAndCoordinatingMessage_hVPosXYConf = SEQ(name='hVPosXYConf', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')), opt=True)
    _ManeuverSharingAndCoordinatingMessage_mSCMType = ENUM(name='mSCMType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'MSCMType')))
    _ManeuverSharingAndCoordinatingMessage_sourceID = OCT_STR(name='sourceID', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _ManeuverSharingAndCoordinatingMessage_destinationIDs = SEQ_OF(name='destinationIDs', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TemporaryIDList')), opt=True)
    _ManeuverSharingAndCoordinatingMessage_maneuverID = INT(name='maneuverID', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ManeuverID')), opt=True)
    _ManeuverSharingAndCoordinatingMessage_maneuver = SEQ(name='maneuver', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'Maneuver')), opt=True)
    _ManeuverSharingAndCoordinatingMessage_responseFlag = BOOL(name='responseFlag', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ResponseFlag')), opt=True)
    _ManeuverSharingAndCoordinatingMessage_reasonCode = ENUM(name='reasonCode', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ReasonCode')), opt=True)
    _ManeuverSharingAndCoordinatingMessage_maneuverExecutionStatus = ENUM(name='maneuverExecutionStatus', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ManeuverExecutionStatus')), opt=True)
    ManeuverSharingAndCoordinatingMessage._cont = ASN1Dict([
        ('mSCMTimestamp', _ManeuverSharingAndCoordinatingMessage_mSCMTimestamp),
        ('hVPos', _ManeuverSharingAndCoordinatingMessage_hVPos),
        ('hVPosXYConf', _ManeuverSharingAndCoordinatingMessage_hVPosXYConf),
        ('mSCMType', _ManeuverSharingAndCoordinatingMessage_mSCMType),
        ('sourceID', _ManeuverSharingAndCoordinatingMessage_sourceID),
        ('destinationIDs', _ManeuverSharingAndCoordinatingMessage_destinationIDs),
        ('maneuverID', _ManeuverSharingAndCoordinatingMessage_maneuverID),
        ('maneuver', _ManeuverSharingAndCoordinatingMessage_maneuver),
        ('responseFlag', _ManeuverSharingAndCoordinatingMessage_responseFlag),
        ('reasonCode', _ManeuverSharingAndCoordinatingMessage_reasonCode),
        ('maneuverExecutionStatus', _ManeuverSharingAndCoordinatingMessage_maneuverExecutionStatus),
        ])
    ManeuverSharingAndCoordinatingMessage._ext = []
    
    #-----< MSCMType >-----#
    MSCMType = ENUM(name='MSCMType', mode=MODE_TYPE)
    MSCMType._cont = ASN1Dict([('maneuverIntent', 0), ('maneuverRequest', 1), ('maneuverResponse', 2), ('maneuverReservation', 3), ('hVManeuverCancellation', 4), ('rVManeuverCancellationRequest', 5), ('emergencyManeuverReservation', 6), ('maneuverExecutionStatus', 7)])
    MSCMType._ext = []
    
    #-----< TemporaryIDList >-----#
    TemporaryIDList = SEQ_OF(name='TemporaryIDList', mode=MODE_TYPE)
    _TemporaryIDList__item_ = OCT_STR(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Common', 'TemporaryID')))
    TemporaryIDList._cont = _TemporaryIDList__item_
    TemporaryIDList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< ManeuverID >-----#
    ManeuverID = INT(name='ManeuverID', mode=MODE_TYPE)
    ManeuverID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Maneuver >-----#
    Maneuver = SEQ(name='Maneuver', mode=MODE_TYPE)
    _Maneuver_subManeuverList = SEQ_OF(name='subManeuverList', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'SubManeuverList')))
    Maneuver._cont = ASN1Dict([
        ('subManeuverList', _Maneuver_subManeuverList),
        ])
    Maneuver._ext = []
    
    #-----< SubManeuverList >-----#
    SubManeuverList = SEQ_OF(name='SubManeuverList', mode=MODE_TYPE)
    _SubManeuverList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'SubManeuver')))
    SubManeuverList._cont = _SubManeuverList__item_
    SubManeuverList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SubManeuver >-----#
    SubManeuver = SEQ(name='SubManeuver', mode=MODE_TYPE)
    _SubManeuver_executantVehID = OCT_STR(name='executantVehID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _SubManeuver_affectedVehIDs = BIT_STR(name='affectedVehIDs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TemporaryIDPointer')))
    _SubManeuver_currentStateData = SEQ(name='currentStateData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'CurrentStateData')))
    _SubManeuver_targetRoadResource = SEQ(name='targetRoadResource', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TargetRoadResource')), opt=True)
    _SubManeuver_startTime = SEQ(name='startTime', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _SubManeuver_endTime = SEQ(name='endTime', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _SubManeuver_minSpeed = INT(name='minSpeed', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')), opt=True)
    _SubManeuver_maxSpeed = INT(name='maxSpeed', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')), opt=True)
    SubManeuver._cont = ASN1Dict([
        ('executantVehID', _SubManeuver_executantVehID),
        ('affectedVehIDs', _SubManeuver_affectedVehIDs),
        ('currentStateData', _SubManeuver_currentStateData),
        ('targetRoadResource', _SubManeuver_targetRoadResource),
        ('startTime', _SubManeuver_startTime),
        ('endTime', _SubManeuver_endTime),
        ('minSpeed', _SubManeuver_minSpeed),
        ('maxSpeed', _SubManeuver_maxSpeed),
        ])
    SubManeuver._ext = []
    
    #-----< TemporaryIDPointer >-----#
    TemporaryIDPointer = BIT_STR(name='TemporaryIDPointer', mode=MODE_TYPE)
    TemporaryIDPointer._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< CurrentStateData >-----#
    CurrentStateData = SEQ(name='CurrentStateData', mode=MODE_TYPE)
    _CurrentStateData_executantVehPos = SEQ(name='executantVehPos', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'PositionOffsetXYZ')), opt=True)
    _CurrentStateData_executantVehPosConfidence = SEQ(name='executantVehPosConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionConfidenceSet')), opt=True)
    _CurrentStateData_speed = INT(name='speed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')))
    _CurrentStateData_heading = INT(name='heading', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Heading')))
    _CurrentStateData_accel4way = SEQ(name='accel4way', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AccelerationSet4Way')), opt=True)
    _CurrentStateData_size = SEQ(name='size', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleSize')))
    CurrentStateData._cont = ASN1Dict([
        ('executantVehPos', _CurrentStateData_executantVehPos),
        ('executantVehPosConfidence', _CurrentStateData_executantVehPosConfidence),
        ('speed', _CurrentStateData_speed),
        ('heading', _CurrentStateData_heading),
        ('accel4way', _CurrentStateData_accel4way),
        ('size', _CurrentStateData_size),
        ])
    CurrentStateData._ext = []
    
    #-----< PositionOffsetXYZ >-----#
    PositionOffsetXYZ = SEQ(name='PositionOffsetXYZ', mode=MODE_TYPE)
    _PositionOffsetXYZ_offsetX = INT(name='offsetX', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ObjectDistance')))
    _PositionOffsetXYZ_offsetY = INT(name='offsetY', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ObjectDistance')))
    _PositionOffsetXYZ_offsetZ = INT(name='offsetZ', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'ObjectDistance')), opt=True)
    PositionOffsetXYZ._cont = ASN1Dict([
        ('offsetX', _PositionOffsetXYZ_offsetX),
        ('offsetY', _PositionOffsetXYZ_offsetY),
        ('offsetZ', _PositionOffsetXYZ_offsetZ),
        ])
    PositionOffsetXYZ._ext = None
    
    #-----< ObjectDistance >-----#
    ObjectDistance = INT(name='ObjectDistance', mode=MODE_TYPE)
    ObjectDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    #-----< TargetRoadResource >-----#
    TargetRoadResource = SEQ(name='TargetRoadResource', mode=MODE_TYPE)
    _TargetRoadResource_tRRType = ENUM(name='tRRType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRType')))
    _TargetRoadResource_tRRLocation = CHOICE(name='tRRLocation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRLocation')))
    TargetRoadResource._cont = ASN1Dict([
        ('tRRType', _TargetRoadResource_tRRType),
        ('tRRLocation', _TargetRoadResource_tRRLocation),
        ])
    TargetRoadResource._ext = []
    
    #-----< TRRType >-----#
    TRRType = ENUM(name='TRRType', mode=MODE_TYPE)
    TRRType._cont = ASN1Dict([('tRRType1', 0), ('tRRType2', 1), ('tRRType3', 2)])
    TRRType._ext = []
    
    #-----< TRRLocation >-----#
    TRRLocation = CHOICE(name='TRRLocation', mode=MODE_TYPE)
    _TRRLocation_tRRLocationType1 = SEQ(name='tRRLocationType1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRLocationType1')))
    _TRRLocation_tRRLocationType2 = SEQ(name='tRRLocationType2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRLocationType2')))
    _TRRLocation_tRRLocationType3 = SEQ_OF(name='tRRLocationType3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRLocationType3')))
    TRRLocation._cont = ASN1Dict([
        ('tRRLocationType1', _TRRLocation_tRRLocationType1),
        ('tRRLocationType2', _TRRLocation_tRRLocationType2),
        ('tRRLocationType3', _TRRLocation_tRRLocationType3),
        ])
    TRRLocation._ext = []
    
    #-----< TRRLocationType1 >-----#
    TRRLocationType1 = SEQ(name='TRRLocationType1', mode=MODE_TYPE)
    _TRRLocationType1_tRRLength = INT(name='tRRLength', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRLength')))
    _TRRLocationType1_frontSidePosition = SEQ(name='frontSidePosition', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'PositionOffsetXYZ')))
    _TRRLocationType1_laneOffset = ENUM(name='laneOffset', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'LaneOffset')))
    _TRRLocationType1_tRRMovement = INT(name='tRRMovement', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')), opt=True)
    TRRLocationType1._cont = ASN1Dict([
        ('tRRLength', _TRRLocationType1_tRRLength),
        ('frontSidePosition', _TRRLocationType1_frontSidePosition),
        ('laneOffset', _TRRLocationType1_laneOffset),
        ('tRRMovement', _TRRLocationType1_tRRMovement),
        ])
    TRRLocationType1._ext = []
    
    #-----< TRRLocationType2 >-----#
    TRRLocationType2 = SEQ(name='TRRLocationType2', mode=MODE_TYPE)
    _TRRLocationType2_safetyGap = INT(name='safetyGap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRLength')))
    _TRRLocationType2_frontSideVehicle = SEQ(name='frontSideVehicle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'SurroundingVehicleInfo')), opt=True)
    _TRRLocationType2_rearSideVehicle = SEQ(name='rearSideVehicle', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'SurroundingVehicleInfo')), opt=True)
    _TRRLocationType2_tRRLength = INT(name='tRRLength', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'TRRLength')), opt=True)
    _TRRLocationType2_laneOffset = ENUM(name='laneOffset', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'LaneOffset')))
    TRRLocationType2._cont = ASN1Dict([
        ('safetyGap', _TRRLocationType2_safetyGap),
        ('frontSideVehicle', _TRRLocationType2_frontSideVehicle),
        ('rearSideVehicle', _TRRLocationType2_rearSideVehicle),
        ('tRRLength', _TRRLocationType2_tRRLength),
        ('laneOffset', _TRRLocationType2_laneOffset),
        ])
    TRRLocationType2._ext = []
    
    #-----< TRRLocationType3 >-----#
    TRRLocationType3 = SEQ_OF(name='TRRLocationType3', mode=MODE_TYPE)
    _TRRLocationType3__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'PositionOffsetXYZ')))
    TRRLocationType3._cont = _TRRLocationType3__item_
    
    #-----< TRRLength >-----#
    TRRLength = INT(name='TRRLength', mode=MODE_TYPE)
    TRRLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    
    #-----< LaneOffset >-----#
    LaneOffset = ENUM(name='LaneOffset', mode=MODE_TYPE)
    LaneOffset._cont = ASN1Dict([('currentLane', 0), ('firstLeftLane', 1), ('firstRightLane', 2), ('secondLeftLane', 3), ('secondRightLane', 4), ('thirdLeftLane', 5), ('thirdRightLane', 6)])
    LaneOffset._ext = []
    
    #-----< SurroundingVehicleInfo >-----#
    SurroundingVehicleInfo = SEQ(name='SurroundingVehicleInfo', mode=MODE_TYPE)
    _SurroundingVehicleInfo_surroundingVehicleID = OCT_STR(name='surroundingVehicleID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _SurroundingVehicleInfo_surroundingVehiclePosition = SEQ(name='surroundingVehiclePosition', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ManeuverSharingAndCoordinatingMessage', 'PositionOffsetXYZ')))
    _SurroundingVehicleInfo_surroundingVehicleSize = SEQ(name='surroundingVehicleSize', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleSize')))
    SurroundingVehicleInfo._cont = ASN1Dict([
        ('surroundingVehicleID', _SurroundingVehicleInfo_surroundingVehicleID),
        ('surroundingVehiclePosition', _SurroundingVehicleInfo_surroundingVehiclePosition),
        ('surroundingVehicleSize', _SurroundingVehicleInfo_surroundingVehicleSize),
        ])
    SurroundingVehicleInfo._ext = []
    
    #-----< ResponseFlag >-----#
    ResponseFlag = BOOL(name='ResponseFlag', mode=MODE_TYPE)
    
    #-----< ReasonCode >-----#
    ReasonCode = ENUM(name='ReasonCode', mode=MODE_TYPE)
    ReasonCode._cont = ASN1Dict([('unknown', 0), ('unableToConform', 1), ('unwanted', 2), ('unableToUnderstand', 3), ('erroneousBehaviorDetected', 4), ('misbehaviorAttackDetected', 5), ('rVManeuverCancellationRequestIssued', 6), ('sessionIDConflicted', 7)])
    ReasonCode._ext = []
    
    #-----< ManeuverExecutionStatus >-----#
    ManeuverExecutionStatus = ENUM(name='ManeuverExecutionStatus', mode=MODE_TYPE)
    ManeuverExecutionStatus._cont = ASN1Dict([('started', 0), ('inProgress', 1), ('completed', 2), ('terminated', 3)])
    ManeuverExecutionStatus._ext = []
    
    _all_ = [
        _ManeuverSharingAndCoordinatingMessage_mSCMTimestamp,
        _ManeuverSharingAndCoordinatingMessage_hVPos,
        _ManeuverSharingAndCoordinatingMessage_hVPosXYConf,
        _ManeuverSharingAndCoordinatingMessage_mSCMType,
        _ManeuverSharingAndCoordinatingMessage_sourceID,
        _ManeuverSharingAndCoordinatingMessage_destinationIDs,
        _ManeuverSharingAndCoordinatingMessage_maneuverID,
        _ManeuverSharingAndCoordinatingMessage_maneuver,
        _ManeuverSharingAndCoordinatingMessage_responseFlag,
        _ManeuverSharingAndCoordinatingMessage_reasonCode,
        _ManeuverSharingAndCoordinatingMessage_maneuverExecutionStatus,
        ManeuverSharingAndCoordinatingMessage,
        MSCMType,
        _TemporaryIDList__item_,
        TemporaryIDList,
        ManeuverID,
        _Maneuver_subManeuverList,
        Maneuver,
        _SubManeuverList__item_,
        SubManeuverList,
        _SubManeuver_executantVehID,
        _SubManeuver_affectedVehIDs,
        _SubManeuver_currentStateData,
        _SubManeuver_targetRoadResource,
        _SubManeuver_startTime,
        _SubManeuver_endTime,
        _SubManeuver_minSpeed,
        _SubManeuver_maxSpeed,
        SubManeuver,
        TemporaryIDPointer,
        _CurrentStateData_executantVehPos,
        _CurrentStateData_executantVehPosConfidence,
        _CurrentStateData_speed,
        _CurrentStateData_heading,
        _CurrentStateData_accel4way,
        _CurrentStateData_size,
        CurrentStateData,
        _PositionOffsetXYZ_offsetX,
        _PositionOffsetXYZ_offsetY,
        _PositionOffsetXYZ_offsetZ,
        PositionOffsetXYZ,
        ObjectDistance,
        _TargetRoadResource_tRRType,
        _TargetRoadResource_tRRLocation,
        TargetRoadResource,
        TRRType,
        _TRRLocation_tRRLocationType1,
        _TRRLocation_tRRLocationType2,
        _TRRLocation_tRRLocationType3,
        TRRLocation,
        _TRRLocationType1_tRRLength,
        _TRRLocationType1_frontSidePosition,
        _TRRLocationType1_laneOffset,
        _TRRLocationType1_tRRMovement,
        TRRLocationType1,
        _TRRLocationType2_safetyGap,
        _TRRLocationType2_frontSideVehicle,
        _TRRLocationType2_rearSideVehicle,
        _TRRLocationType2_tRRLength,
        _TRRLocationType2_laneOffset,
        TRRLocationType2,
        _TRRLocationType3__item_,
        TRRLocationType3,
        TRRLength,
        LaneOffset,
        _SurroundingVehicleInfo_surroundingVehicleID,
        _SurroundingVehicleInfo_surroundingVehiclePosition,
        _SurroundingVehicleInfo_surroundingVehicleSize,
        SurroundingVehicleInfo,
        ResponseFlag,
        ReasonCode,
        ManeuverExecutionStatus,
    ]

class RoadUserChargingConfigMessage:

    _name_  = 'RoadUserChargingConfigMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 9, 1, 3217, 28, 1, 3, 1, 1]
    
    _obj_ = [
        'RoadUserChargingConfigMessage',
        'ChargerInfo',
        'ChargingConfig',
        'ConfigInfo',
        'PrimaryRegionChargingInfo',
        'PrimaryRegionState',
        'SubRegionChargingInfo',
        'AreaOrSegmentChargingInfo',
        'ChargingAreaOrSegment',
        'Area',
        'Segment',
        'ChargingFees',
        'ChargingUnits',
        'Driven',
        'Parked',
        ]
    _type_ = [
        'RoadUserChargingConfigMessage',
        'ChargerInfo',
        'ChargingConfig',
        'ConfigInfo',
        'PrimaryRegionChargingInfo',
        'PrimaryRegionState',
        'SubRegionChargingInfo',
        'AreaOrSegmentChargingInfo',
        'ChargingAreaOrSegment',
        'Area',
        'Segment',
        'ChargingFees',
        'ChargingUnits',
        'Driven',
        'Parked',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< RoadUserChargingConfigMessage >-----#
    RoadUserChargingConfigMessage = SEQ(name='RoadUserChargingConfigMessage', mode=MODE_TYPE)
    _RoadUserChargingConfigMessage_chargerInfoTable = SEQ_OF(name='chargerInfoTable', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RoadUserChargingConfigMessage_chargerInfoTable__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargerInfo')))
    _RoadUserChargingConfigMessage_chargerInfoTable._cont = __RoadUserChargingConfigMessage_chargerInfoTable__item_
    _RoadUserChargingConfigMessage_chargerInfoTable._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=[], er=[])
    RoadUserChargingConfigMessage._cont = ASN1Dict([
        ('chargerInfoTable', _RoadUserChargingConfigMessage_chargerInfoTable),
        ])
    RoadUserChargingConfigMessage._ext = []
    
    #-----< ChargerInfo >-----#
    ChargerInfo = SEQ(name='ChargerInfo', mode=MODE_TYPE)
    _ChargerInfo_chargerID = OID(name='chargerID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChargerInfo_descriptiveName = STR_IA5(name='descriptiveName', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _ChargerInfo_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')), opt=True)
    _ChargerInfo_chargingConfig = SEQ(name='chargingConfig', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargingConfig')))
    ChargerInfo._cont = ASN1Dict([
        ('chargerID', _ChargerInfo_chargerID),
        ('descriptiveName', _ChargerInfo_descriptiveName),
        ('timeStamp', _ChargerInfo_timeStamp),
        ('chargingConfig', _ChargerInfo_chargingConfig),
        ])
    ChargerInfo._ext = []
    
    #-----< ChargingConfig >-----#
    ChargingConfig = SEQ(name='ChargingConfig', mode=MODE_TYPE)
    _ChargingConfig_configInfo = SEQ(name='configInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ConfigInfo')))
    _ChargingConfig_reportSched = ENUM(name='reportSched', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChargingConfig_reportSched._cont = ASN1Dict([('hourly', 0), ('weekly', 1), ('monthly', 2), ('quarterly', 3)])
    _ChargingConfig_reportSched._ext = []
    _ChargingConfig_byPrimaryRegion = SEQ(name='byPrimaryRegion', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'PrimaryRegionChargingInfo')))
    _ChargingConfig_bySubRegion = SEQ_OF(name='bySubRegion', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ChargingConfig_bySubRegion__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'SubRegionChargingInfo')))
    _ChargingConfig_bySubRegion._cont = __ChargingConfig_bySubRegion__item_
    _ChargingConfig_bySubRegion._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=[], er=[])
    _ChargingConfig_byAreaOrSegment = SEQ(name='byAreaOrSegment', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'AreaOrSegmentChargingInfo')), opt=True)
    ChargingConfig._cont = ASN1Dict([
        ('configInfo', _ChargingConfig_configInfo),
        ('reportSched', _ChargingConfig_reportSched),
        ('byPrimaryRegion', _ChargingConfig_byPrimaryRegion),
        ('bySubRegion', _ChargingConfig_bySubRegion),
        ('byAreaOrSegment', _ChargingConfig_byAreaOrSegment),
        ])
    ChargingConfig._ext = []
    
    #-----< ConfigInfo >-----#
    ConfigInfo = SEQ(name='ConfigInfo', mode=MODE_TYPE)
    _ConfigInfo_configID = INT(name='configID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConfigInfo_configID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64)], ev=[], er=[])
    _ConfigInfo_configVersion = INT(name='configVersion', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConfigInfo_configVersion._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64)], ev=[], er=[])
    _ConfigInfo_startDate = SEQ(name='startDate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ConfigInfo_expirationDate = SEQ(name='expirationDate', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ConfigInfo_configurationFeeType = ENUM(name='configurationFeeType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConfigInfo_configurationFeeType._cont = ASN1Dict([('excluded', 0), ('replacesOtherCharges', 1), ('addedToOtherCharges', 2)])
    _ConfigInfo_configurationFeeType._ext = []
    ConfigInfo._cont = ASN1Dict([
        ('configID', _ConfigInfo_configID),
        ('configVersion', _ConfigInfo_configVersion),
        ('startDate', _ConfigInfo_startDate),
        ('expirationDate', _ConfigInfo_expirationDate),
        ('configurationFeeType', _ConfigInfo_configurationFeeType),
        ])
    ConfigInfo._ext = []
    
    #-----< PrimaryRegionChargingInfo >-----#
    PrimaryRegionChargingInfo = SEQ(name='PrimaryRegionChargingInfo', mode=MODE_TYPE)
    _PrimaryRegionChargingInfo_primaryRegionCountry = BIT_STR(name='primaryRegionCountry', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'CountryCode')))
    _PrimaryRegionChargingInfo_chargingPrimaryRegion = CHOICE(name='chargingPrimaryRegion', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __PrimaryRegionChargingInfo_chargingPrimaryRegion_state = SEQ(name='state', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'PrimaryRegionState')))
    _PrimaryRegionChargingInfo_chargingPrimaryRegion._cont = ASN1Dict([
        ('state', __PrimaryRegionChargingInfo_chargingPrimaryRegion_state),
        ])
    _PrimaryRegionChargingInfo_chargingPrimaryRegion._ext = []
    PrimaryRegionChargingInfo._cont = ASN1Dict([
        ('primaryRegionCountry', _PrimaryRegionChargingInfo_primaryRegionCountry),
        ('chargingPrimaryRegion', _PrimaryRegionChargingInfo_chargingPrimaryRegion),
        ])
    PrimaryRegionChargingInfo._ext = []
    
    #-----< PrimaryRegionState >-----#
    PrimaryRegionState = SEQ(name='PrimaryRegionState', mode=MODE_TYPE)
    _PrimaryRegionState_usCanMexState = STR_IA5(name='usCanMexState', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PrimaryRegionState_usCanMexState._const_sz = ASN1Set(rv=[2], rr=[], ev=[], er=[])
    _PrimaryRegionState_chargingFees = SEQ(name='chargingFees', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargingFees')), opt=True)
    PrimaryRegionState._cont = ASN1Dict([
        ('usCanMexState', _PrimaryRegionState_usCanMexState),
        ('chargingFees', _PrimaryRegionState_chargingFees),
        ])
    PrimaryRegionState._ext = []
    
    #-----< SubRegionChargingInfo >-----#
    SubRegionChargingInfo = SEQ(name='SubRegionChargingInfo', mode=MODE_TYPE)
    _SubRegionChargingInfo_subRegion = OID(name='subRegion', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SubRegionChargingInfo_chargingFees = SEQ(name='chargingFees', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargingFees')))
    SubRegionChargingInfo._cont = ASN1Dict([
        ('subRegion', _SubRegionChargingInfo_subRegion),
        ('chargingFees', _SubRegionChargingInfo_chargingFees),
        ])
    SubRegionChargingInfo._ext = []
    
    #-----< AreaOrSegmentChargingInfo >-----#
    AreaOrSegmentChargingInfo = SEQ(name='AreaOrSegmentChargingInfo', mode=MODE_TYPE)
    _AreaOrSegmentChargingInfo_chargingAreaOrSegment = SEQ_OF(name='chargingAreaOrSegment', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __AreaOrSegmentChargingInfo_chargingAreaOrSegment__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargingAreaOrSegment')))
    _AreaOrSegmentChargingInfo_chargingAreaOrSegment._cont = __AreaOrSegmentChargingInfo_chargingAreaOrSegment__item_
    _AreaOrSegmentChargingInfo_chargingAreaOrSegment._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=[], er=[])
    AreaOrSegmentChargingInfo._cont = ASN1Dict([
        ('chargingAreaOrSegment', _AreaOrSegmentChargingInfo_chargingAreaOrSegment),
        ])
    AreaOrSegmentChargingInfo._ext = []
    
    #-----< ChargingAreaOrSegment >-----#
    ChargingAreaOrSegment = CHOICE(name='ChargingAreaOrSegment', mode=MODE_TYPE)
    _ChargingAreaOrSegment_area = SEQ(name='area', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'Area')))
    _ChargingAreaOrSegment_segment = SEQ(name='segment', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'Segment')))
    ChargingAreaOrSegment._cont = ASN1Dict([
        ('area', _ChargingAreaOrSegment_area),
        ('segment', _ChargingAreaOrSegment_segment),
        ])
    ChargingAreaOrSegment._ext = []
    
    #-----< Area >-----#
    Area = SEQ(name='Area', mode=MODE_TYPE)
    _Area_areaID = OID(name='areaID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Area_chargingArea = SEQ(name='chargingArea', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'ValidRegion')))
    _Area_chargingFees = SEQ(name='chargingFees', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargingFees')))
    Area._cont = ASN1Dict([
        ('areaID', _Area_areaID),
        ('chargingArea', _Area_chargingArea),
        ('chargingFees', _Area_chargingFees),
        ])
    Area._ext = []
    
    #-----< Segment >-----#
    Segment = SEQ(name='Segment', mode=MODE_TYPE)
    _Segment_segmentID = OID(name='segmentID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Segment_chargingSegment = SEQ_OF(name='chargingSegment', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Segment_chargingSegment__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'TollAdvertisementMessage')))
    _Segment_chargingSegment._cont = __Segment_chargingSegment__item_
    _Segment_chargingSegment._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=[], er=[])
    _Segment_chargingUnits = CHOICE(name='chargingUnits', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargingUnits')), opt=True)
    Segment._cont = ASN1Dict([
        ('segmentID', _Segment_segmentID),
        ('chargingSegment', _Segment_chargingSegment),
        ('chargingUnits', _Segment_chargingUnits),
        ])
    Segment._ext = []
    
    #-----< ChargingFees >-----#
    ChargingFees = SEQ(name='ChargingFees', mode=MODE_TYPE)
    _ChargingFees_chargingSchedule = SEQ_OF(name='chargingSchedule', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ChargingFees_chargingSchedule__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadSafetyMessage', 'EventRecurrence')))
    _ChargingFees_chargingSchedule._cont = __ChargingFees_chargingSchedule__item_
    _ChargingFees_chargingSchedule._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=[], er=[])
    _ChargingFees_chargesTable = CHOICE(name='chargesTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ChargesTable')))
    _ChargingFees_chargingUnits = CHOICE(name='chargingUnits', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'ChargingUnits')))
    ChargingFees._cont = ASN1Dict([
        ('chargingSchedule', _ChargingFees_chargingSchedule),
        ('chargesTable', _ChargingFees_chargesTable),
        ('chargingUnits', _ChargingFees_chargingUnits),
        ])
    ChargingFees._ext = []
    
    #-----< ChargingUnits >-----#
    ChargingUnits = CHOICE(name='ChargingUnits', mode=MODE_TYPE)
    _ChargingUnits_driven = ENUM(name='driven', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'Driven')))
    _ChargingUnits_parked = ENUM(name='parked', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingConfigMessage', 'Parked')))
    ChargingUnits._cont = ASN1Dict([
        ('driven', _ChargingUnits_driven),
        ('parked', _ChargingUnits_parked),
        ])
    ChargingUnits._ext = []
    
    #-----< Driven >-----#
    Driven = ENUM(name='Driven', mode=MODE_TYPE)
    Driven._cont = ASN1Dict([('perMin', 0), ('perHour', 1), ('perDay', 2), ('perDistMile', 3), ('perDistKilo', 4)])
    Driven._ext = []
    
    #-----< Parked >-----#
    Parked = ENUM(name='Parked', mode=MODE_TYPE)
    Parked._cont = ASN1Dict([('perMin', 0), ('perHour', 1), ('perDay', 2)])
    Parked._ext = []
    
    _all_ = [
        __RoadUserChargingConfigMessage_chargerInfoTable__item_,
        _RoadUserChargingConfigMessage_chargerInfoTable,
        RoadUserChargingConfigMessage,
        _ChargerInfo_chargerID,
        _ChargerInfo_descriptiveName,
        _ChargerInfo_timeStamp,
        _ChargerInfo_chargingConfig,
        ChargerInfo,
        _ChargingConfig_configInfo,
        _ChargingConfig_reportSched,
        _ChargingConfig_byPrimaryRegion,
        __ChargingConfig_bySubRegion__item_,
        _ChargingConfig_bySubRegion,
        _ChargingConfig_byAreaOrSegment,
        ChargingConfig,
        _ConfigInfo_configID,
        _ConfigInfo_configVersion,
        _ConfigInfo_startDate,
        _ConfigInfo_expirationDate,
        _ConfigInfo_configurationFeeType,
        ConfigInfo,
        _PrimaryRegionChargingInfo_primaryRegionCountry,
        __PrimaryRegionChargingInfo_chargingPrimaryRegion_state,
        _PrimaryRegionChargingInfo_chargingPrimaryRegion,
        PrimaryRegionChargingInfo,
        _PrimaryRegionState_usCanMexState,
        _PrimaryRegionState_chargingFees,
        PrimaryRegionState,
        _SubRegionChargingInfo_subRegion,
        _SubRegionChargingInfo_chargingFees,
        SubRegionChargingInfo,
        __AreaOrSegmentChargingInfo_chargingAreaOrSegment__item_,
        _AreaOrSegmentChargingInfo_chargingAreaOrSegment,
        AreaOrSegmentChargingInfo,
        _ChargingAreaOrSegment_area,
        _ChargingAreaOrSegment_segment,
        ChargingAreaOrSegment,
        _Area_areaID,
        _Area_chargingArea,
        _Area_chargingFees,
        Area,
        _Segment_segmentID,
        __Segment_chargingSegment__item_,
        _Segment_chargingSegment,
        _Segment_chargingUnits,
        Segment,
        __ChargingFees_chargingSchedule__item_,
        _ChargingFees_chargingSchedule,
        _ChargingFees_chargesTable,
        _ChargingFees_chargingUnits,
        ChargingFees,
        _ChargingUnits_driven,
        _ChargingUnits_parked,
        ChargingUnits,
        Driven,
        Parked,
    ]

class RoadUserChargingReportMessage:

    _name_  = 'RoadUserChargingReportMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 9, 1, 3217, 28, 1, 4, 1, 1]
    
    _obj_ = [
        'RoadUserChargingReportMessage',
        'UsageReport',
        'FeeReport',
        'UserData',
        'UserFeeInfo',
        'ItemizedPaymentReport',
        'ItemizedChargerData',
        'TripInfo',
        'TimePeriod',
        ]
    _type_ = [
        'RoadUserChargingReportMessage',
        'UsageReport',
        'FeeReport',
        'UserData',
        'UserFeeInfo',
        'ItemizedPaymentReport',
        'ItemizedChargerData',
        'TripInfo',
        'TimePeriod',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< RoadUserChargingReportMessage >-----#
    RoadUserChargingReportMessage = SEQ(name='RoadUserChargingReportMessage', mode=MODE_TYPE)
    _RoadUserChargingReportMessage_usageReport = CHOICE(name='usageReport', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'UsageReport')))
    _RoadUserChargingReportMessage_serviceProviderData = OCT_STR(name='serviceProviderData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RoadUserChargingReportMessage_serviceProviderData._const_sz = ASN1Set(rv=[1024], rr=[], ev=None, er=[])
    RoadUserChargingReportMessage._cont = ASN1Dict([
        ('usageReport', _RoadUserChargingReportMessage_usageReport),
        ('serviceProviderData', _RoadUserChargingReportMessage_serviceProviderData),
        ])
    RoadUserChargingReportMessage._ext = []
    
    #-----< UsageReport >-----#
    UsageReport = CHOICE(name='UsageReport', mode=MODE_TYPE)
    _UsageReport_feeReport = SEQ(name='feeReport', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'FeeReport')))
    _UsageReport_itemizedPaymentReport = SEQ(name='itemizedPaymentReport', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'ItemizedPaymentReport')))
    UsageReport._cont = ASN1Dict([
        ('feeReport', _UsageReport_feeReport),
        ('itemizedPaymentReport', _UsageReport_itemizedPaymentReport),
        ])
    UsageReport._ext = []
    
    #-----< FeeReport >-----#
    FeeReport = SEQ(name='FeeReport', mode=MODE_TYPE)
    _FeeReport_userData = SEQ(name='userData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'UserData')))
    _FeeReport_fees = SEQ(name='fees', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'UserFeeInfo')))
    FeeReport._cont = ASN1Dict([
        ('userData', _FeeReport_userData),
        ('fees', _FeeReport_fees),
        ])
    FeeReport._ext = []
    
    #-----< UserData >-----#
    UserData = SEQ(name='UserData', mode=MODE_TYPE)
    _UserData_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _UserData_svcProvID = OID(name='svcProvID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UserData_vehicleID = SEQ(name='vehicleID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'VehicleId')))
    _UserData_vehicleType = ENUM(name='vehicleType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'VehicleTypes')))
    _UserData_vehicleDescription = SEQ(name='vehicleDescription', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleDescription')), opt=True)
    UserData._cont = ASN1Dict([
        ('timeStamp', _UserData_timeStamp),
        ('svcProvID', _UserData_svcProvID),
        ('vehicleID', _UserData_vehicleID),
        ('vehicleType', _UserData_vehicleType),
        ('vehicleDescription', _UserData_vehicleDescription),
        ])
    UserData._ext = []
    
    #-----< UserFeeInfo >-----#
    UserFeeInfo = SEQ(name='UserFeeInfo', mode=MODE_TYPE)
    _UserFeeInfo_fee = SEQ(name='fee', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    _UserFeeInfo_timePeriod = SEQ(name='timePeriod', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'TimePeriod')))
    UserFeeInfo._cont = ASN1Dict([
        ('fee', _UserFeeInfo_fee),
        ('timePeriod', _UserFeeInfo_timePeriod),
        ])
    UserFeeInfo._ext = []
    
    #-----< ItemizedPaymentReport >-----#
    ItemizedPaymentReport = SEQ(name='ItemizedPaymentReport', mode=MODE_TYPE)
    _ItemizedPaymentReport_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _ItemizedPaymentReport_timePeriod = SEQ(name='timePeriod', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'TimePeriod')))
    _ItemizedPaymentReport_svcProvID = OID(name='svcProvID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItemizedPaymentReport_chargerData = SEQ_OF(name='chargerData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ItemizedPaymentReport_chargerData__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('RoadUserChargingReportMessage', 'ItemizedChargerData')))
    _ItemizedPaymentReport_chargerData._cont = __ItemizedPaymentReport_chargerData__item_
    _ItemizedPaymentReport_chargerData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=[], er=[])
    ItemizedPaymentReport._cont = ASN1Dict([
        ('timeStamp', _ItemizedPaymentReport_timeStamp),
        ('timePeriod', _ItemizedPaymentReport_timePeriod),
        ('svcProvID', _ItemizedPaymentReport_svcProvID),
        ('chargerData', _ItemizedPaymentReport_chargerData),
        ])
    ItemizedPaymentReport._ext = []
    
    #-----< ItemizedChargerData >-----#
    ItemizedChargerData = SEQ(name='ItemizedChargerData', mode=MODE_TYPE)
    _ItemizedChargerData_chargerID = OID(name='chargerID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItemizedChargerData_chargingDescription = STR_IA5(name='chargingDescription', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    _ItemizedChargerData_configID = INT(name='configID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItemizedChargerData_configID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64)], ev=[], er=[])
    _ItemizedChargerData_tripInfo = SEQ(name='tripInfo', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('RoadUserChargingReportMessage', 'TripInfo')), opt=True)
    _ItemizedChargerData_totalPaidToCharger = SEQ(name='totalPaidToCharger', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    ItemizedChargerData._cont = ASN1Dict([
        ('chargerID', _ItemizedChargerData_chargerID),
        ('chargingDescription', _ItemizedChargerData_chargingDescription),
        ('configID', _ItemizedChargerData_configID),
        ('tripInfo', _ItemizedChargerData_tripInfo),
        ('totalPaidToCharger', _ItemizedChargerData_totalPaidToCharger),
        ])
    ItemizedChargerData._ext = []
    
    #-----< TripInfo >-----#
    TripInfo = SEQ(name='TripInfo', mode=MODE_TYPE)
    _TripInfo_distanceTraveled = INT(name='distanceTraveled', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TripInfo_distanceTraveled._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65535)], ev=[], er=[])
    _TripInfo_distanceUnits = ENUM(name='distanceUnits', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TravelerInformation', 'DistanceUnits')), opt=True)
    _TripInfo_timeTraveled = INT(name='timeTraveled', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TripInfo_timeTraveled._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=600000)], ev=[], er=[])
    TripInfo._cont = ASN1Dict([
        ('distanceTraveled', _TripInfo_distanceTraveled),
        ('distanceUnits', _TripInfo_distanceUnits),
        ('timeTraveled', _TripInfo_timeTraveled),
        ])
    TripInfo._ext = []
    
    #-----< TimePeriod >-----#
    TimePeriod = SEQ(name='TimePeriod', mode=MODE_TYPE)
    _TimePeriod_startTime = SEQ(name='startTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _TimePeriod_endTime = SEQ(name='endTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    TimePeriod._cont = ASN1Dict([
        ('startTime', _TimePeriod_startTime),
        ('endTime', _TimePeriod_endTime),
        ])
    TimePeriod._ext = []
    
    _all_ = [
        _RoadUserChargingReportMessage_usageReport,
        _RoadUserChargingReportMessage_serviceProviderData,
        RoadUserChargingReportMessage,
        _UsageReport_feeReport,
        _UsageReport_itemizedPaymentReport,
        UsageReport,
        _FeeReport_userData,
        _FeeReport_fees,
        FeeReport,
        _UserData_timeStamp,
        _UserData_svcProvID,
        _UserData_vehicleID,
        _UserData_vehicleType,
        _UserData_vehicleDescription,
        UserData,
        _UserFeeInfo_fee,
        _UserFeeInfo_timePeriod,
        UserFeeInfo,
        _ItemizedPaymentReport_timeStamp,
        _ItemizedPaymentReport_timePeriod,
        _ItemizedPaymentReport_svcProvID,
        __ItemizedPaymentReport_chargerData__item_,
        _ItemizedPaymentReport_chargerData,
        ItemizedPaymentReport,
        _ItemizedChargerData_chargerID,
        _ItemizedChargerData_chargingDescription,
        _ItemizedChargerData_configID,
        _ItemizedChargerData_tripInfo,
        _ItemizedChargerData_totalPaidToCharger,
        ItemizedChargerData,
        _TripInfo_distanceTraveled,
        _TripInfo_distanceUnits,
        _TripInfo_timeTraveled,
        TripInfo,
        _TimePeriod_startTime,
        _TimePeriod_endTime,
        TimePeriod,
    ]

class TollAdvertisementMessage:

    _name_  = 'TollAdvertisementMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 9, 1, 3217, 1, 0, 1, 1]
    
    _obj_ = [
        'TollAdvertisementMessage',
        'TollAdvertisementInfo',
        'TumInstructions',
        'AckPolicy',
        'TollChargesTable',
        'LaneChargesTable',
        'ClosedNetworkChargesTable',
        'EntryChargesTable',
        'ExitChargesTable',
        'ExitInfo',
        'TimeChargesTable',
        'ChargesTable',
        'VehTypeChargesTable',
        'VehTypeCharges',
        'VehicleTypes',
        'SpecialCharges',
        'OperatorDefined',
        'WeightChargesTable',
        'WeightCharges',
        'TotalWeightCharges',
        'PerAxleWeightCharges',
        'AxlesChargesTable',
        'AxlesCharges',
        'TollPointMap',
        'TollChargerInfo',
        'TollPointID',
        ]
    _type_ = [
        'TollAdvertisementMessage',
        'TollAdvertisementInfo',
        'TumInstructions',
        'AckPolicy',
        'TollChargesTable',
        'LaneChargesTable',
        'ClosedNetworkChargesTable',
        'EntryChargesTable',
        'ExitChargesTable',
        'ExitInfo',
        'TimeChargesTable',
        'ChargesTable',
        'VehTypeChargesTable',
        'VehTypeCharges',
        'VehicleTypes',
        'SpecialCharges',
        'OperatorDefined',
        'WeightChargesTable',
        'WeightCharges',
        'TotalWeightCharges',
        'PerAxleWeightCharges',
        'AxlesChargesTable',
        'AxlesCharges',
        'TollPointMap',
        'TollChargerInfo',
        'TollPointID',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TollAdvertisementMessage >-----#
    TollAdvertisementMessage = SEQ(name='TollAdvertisementMessage', mode=MODE_TYPE)
    _TollAdvertisementMessage_tollChargesTable = SEQ(name='tollChargesTable', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollChargesTable')))
    _TollAdvertisementMessage_tollAdvInfo = SEQ(name='tollAdvInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollAdvertisementInfo')), opt=True)
    TollAdvertisementMessage._cont = ASN1Dict([
        ('tollChargesTable', _TollAdvertisementMessage_tollChargesTable),
        ('tollAdvInfo', _TollAdvertisementMessage_tollAdvInfo),
        ])
    TollAdvertisementMessage._ext = []
    
    #-----< TollAdvertisementInfo >-----#
    TollAdvertisementInfo = SEQ(name='TollAdvertisementInfo', mode=MODE_TYPE)
    _TollAdvertisementInfo_tamSequenceNum = INT(name='tamSequenceNum', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _TollAdvertisementInfo_totalTams = INT(name='totalTams', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TollAdvertisementInfo_totalTams._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    _TollAdvertisementInfo_tamNum = INT(name='tamNum', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TollAdvertisementInfo_tamNum._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    _TollAdvertisementInfo_tollChargerInfo = SEQ(name='tollChargerInfo', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollChargerInfo')))
    _TollAdvertisementInfo_timestamp = SEQ(name='timestamp', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _TollAdvertisementInfo_tumInstructions = SEQ(name='tumInstructions', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TumInstructions')), opt=True)
    _TollAdvertisementInfo_tollPointMap = SEQ(name='tollPointMap', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollPointMap')))
    _TollAdvertisementInfo_tumPublicKey = OCT_STR(name='tumPublicKey', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TollAdvertisementInfo_tumPublicKey._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _TollAdvertisementInfo_ackPolicy = SEQ(name='ackPolicy', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'AckPolicy')))
    _TollAdvertisementInfo_lastTollPtDataReq = BOOL(name='lastTollPtDataReq', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    TollAdvertisementInfo._cont = ASN1Dict([
        ('tamSequenceNum', _TollAdvertisementInfo_tamSequenceNum),
        ('totalTams', _TollAdvertisementInfo_totalTams),
        ('tamNum', _TollAdvertisementInfo_tamNum),
        ('tollChargerInfo', _TollAdvertisementInfo_tollChargerInfo),
        ('timestamp', _TollAdvertisementInfo_timestamp),
        ('tumInstructions', _TollAdvertisementInfo_tumInstructions),
        ('tollPointMap', _TollAdvertisementInfo_tollPointMap),
        ('tumPublicKey', _TollAdvertisementInfo_tumPublicKey),
        ('ackPolicy', _TollAdvertisementInfo_ackPolicy),
        ('lastTollPtDataReq', _TollAdvertisementInfo_lastTollPtDataReq),
        ])
    TollAdvertisementInfo._ext = []
    
    #-----< TumInstructions >-----#
    TumInstructions = SEQ(name='TumInstructions', mode=MODE_TYPE)
    _TumInstructions_maxNumOfLocTimeStamps = INT(name='maxNumOfLocTimeStamps', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TumInstructions_maxNumOfLocTimeStamps._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=[], er=[])
    _TumInstructions_locTimeStampRate = INT(name='locTimeStampRate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TumInstructions_locTimeStampRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    TumInstructions._cont = ASN1Dict([
        ('maxNumOfLocTimeStamps', _TumInstructions_maxNumOfLocTimeStamps),
        ('locTimeStampRate', _TumInstructions_locTimeStampRate),
        ])
    TumInstructions._ext = []
    
    #-----< AckPolicy >-----#
    AckPolicy = SEQ(name='AckPolicy', mode=MODE_TYPE)
    _AckPolicy_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AckPolicy_timeout._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=100, ub=10000)], ev=None, er=[])
    _AckPolicy_numOfRetries = INT(name='numOfRetries', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AckPolicy_numOfRetries._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=[], er=[])
    AckPolicy._cont = ASN1Dict([
        ('timeout', _AckPolicy_timeout),
        ('numOfRetries', _AckPolicy_numOfRetries),
        ])
    AckPolicy._ext = []
    
    #-----< TollChargesTable >-----#
    TollChargesTable = SEQ(name='TollChargesTable', mode=MODE_TYPE)
    _TollChargesTable_tollTypeCharge = CHOICE(name='tollTypeCharge', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __TollChargesTable_tollTypeCharge_pointCharges = CHOICE(name='pointCharges', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ChargesTable')))
    __TollChargesTable_tollTypeCharge_perLaneCharges = SEQ_OF(name='perLaneCharges', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___TollChargesTable_tollTypeCharge_perLaneCharges__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'LaneChargesTable')))
    __TollChargesTable_tollTypeCharge_perLaneCharges._cont = ___TollChargesTable_tollTypeCharge_perLaneCharges__item_
    __TollChargesTable_tollTypeCharge_perLaneCharges._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=[], er=[])
    __TollChargesTable_tollTypeCharge_closedNetworkCharges = SEQ_OF(name='closedNetworkCharges', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___TollChargesTable_tollTypeCharge_closedNetworkCharges__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'ClosedNetworkChargesTable')))
    __TollChargesTable_tollTypeCharge_closedNetworkCharges._cont = ___TollChargesTable_tollTypeCharge_closedNetworkCharges__item_
    __TollChargesTable_tollTypeCharge_closedNetworkCharges._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=[], er=[])
    __TollChargesTable_tollTypeCharge_timeBasedCharges = SEQ(name='timeBasedCharges', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TimeChargesTable')))
    _TollChargesTable_tollTypeCharge._cont = ASN1Dict([
        ('pointCharges', __TollChargesTable_tollTypeCharge_pointCharges),
        ('perLaneCharges', __TollChargesTable_tollTypeCharge_perLaneCharges),
        ('closedNetworkCharges', __TollChargesTable_tollTypeCharge_closedNetworkCharges),
        ('timeBasedCharges', __TollChargesTable_tollTypeCharge_timeBasedCharges),
        ])
    _TollChargesTable_tollTypeCharge._ext = []
    TollChargesTable._cont = ASN1Dict([
        ('tollTypeCharge', _TollChargesTable_tollTypeCharge),
        ])
    TollChargesTable._ext = []
    
    #-----< LaneChargesTable >-----#
    LaneChargesTable = SEQ(name='LaneChargesTable', mode=MODE_TYPE)
    _LaneChargesTable_laneId = INT(name='laneId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')))
    _LaneChargesTable_chargesTable = CHOICE(name='chargesTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ChargesTable')))
    LaneChargesTable._cont = ASN1Dict([
        ('laneId', _LaneChargesTable_laneId),
        ('chargesTable', _LaneChargesTable_chargesTable),
        ])
    LaneChargesTable._ext = []
    
    #-----< ClosedNetworkChargesTable >-----#
    ClosedNetworkChargesTable = CHOICE(name='ClosedNetworkChargesTable', mode=MODE_TYPE)
    _ClosedNetworkChargesTable_entryChargesTable = SEQ(name='entryChargesTable', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'EntryChargesTable')))
    _ClosedNetworkChargesTable_exitChargesTable = SEQ(name='exitChargesTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ExitChargesTable')))
    ClosedNetworkChargesTable._cont = ASN1Dict([
        ('entryChargesTable', _ClosedNetworkChargesTable_entryChargesTable),
        ('exitChargesTable', _ClosedNetworkChargesTable_exitChargesTable),
        ])
    ClosedNetworkChargesTable._ext = []
    
    #-----< EntryChargesTable >-----#
    EntryChargesTable = SEQ(name='EntryChargesTable', mode=MODE_TYPE)
    _EntryChargesTable_exitInfo = SEQ(name='exitInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ExitInfo')))
    _EntryChargesTable_chargesTable = CHOICE(name='chargesTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ChargesTable')))
    EntryChargesTable._cont = ASN1Dict([
        ('exitInfo', _EntryChargesTable_exitInfo),
        ('chargesTable', _EntryChargesTable_chargesTable),
        ])
    EntryChargesTable._ext = []
    
    #-----< ExitChargesTable >-----#
    ExitChargesTable = SEQ(name='ExitChargesTable', mode=MODE_TYPE)
    _ExitChargesTable_entryInfo = INT(name='entryInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollPointID')), opt=True)
    _ExitChargesTable_chargesTable = CHOICE(name='chargesTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ChargesTable')))
    ExitChargesTable._cont = ASN1Dict([
        ('entryInfo', _ExitChargesTable_entryInfo),
        ('chargesTable', _ExitChargesTable_chargesTable),
        ])
    ExitChargesTable._ext = []
    
    #-----< ExitInfo >-----#
    ExitInfo = SEQ(name='ExitInfo', mode=MODE_TYPE)
    _ExitInfo_exitNumber = INT(name='exitNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ExitInfo_exitNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=[], er=[])
    _ExitInfo_exitLetter = INT(name='exitLetter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ExitInfo_exitLetter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=65, ub=90)], ev=None, er=[])
    _ExitInfo_tollPointID = INT(name='tollPointID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollPointID')), opt=True)
    ExitInfo._cont = ASN1Dict([
        ('exitNumber', _ExitInfo_exitNumber),
        ('exitLetter', _ExitInfo_exitLetter),
        ('tollPointID', _ExitInfo_tollPointID),
        ])
    ExitInfo._ext = []
    
    #-----< TimeChargesTable >-----#
    TimeChargesTable = SEQ(name='TimeChargesTable', mode=MODE_TYPE)
    _TimeChargesTable_maxTime = INT(name='maxTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TimeChargesTable_maxTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1440)], ev=None, er=[])
    _TimeChargesTable_chargesTable = CHOICE(name='chargesTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'ChargesTable')))
    TimeChargesTable._cont = ASN1Dict([
        ('maxTime', _TimeChargesTable_maxTime),
        ('chargesTable', _TimeChargesTable_chargesTable),
        ])
    TimeChargesTable._ext = []
    
    #-----< ChargesTable >-----#
    ChargesTable = CHOICE(name='ChargesTable', mode=MODE_TYPE)
    _ChargesTable_vehTypeBased = SEQ_OF(name='vehTypeBased', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'VehTypeChargesTable')))
    _ChargesTable_numAxlesBased = SEQ_OF(name='numAxlesBased', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'AxlesChargesTable')))
    _ChargesTable_weightBased = SEQ_OF(name='weightBased', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'WeightChargesTable')))
    ChargesTable._cont = ASN1Dict([
        ('vehTypeBased', _ChargesTable_vehTypeBased),
        ('numAxlesBased', _ChargesTable_numAxlesBased),
        ('weightBased', _ChargesTable_weightBased),
        ])
    ChargesTable._ext = []
    
    #-----< VehTypeChargesTable >-----#
    VehTypeChargesTable = SEQ_OF(name='VehTypeChargesTable', mode=MODE_TYPE)
    _VehTypeChargesTable__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'VehTypeCharges')))
    VehTypeChargesTable._cont = _VehTypeChargesTable__item_
    VehTypeChargesTable._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=13)], ev=[], er=[])
    
    #-----< VehTypeCharges >-----#
    VehTypeCharges = SEQ(name='VehTypeCharges', mode=MODE_TYPE)
    _VehTypeCharges_vehType = ENUM(name='vehType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'VehicleTypes')))
    _VehTypeCharges_charges = SEQ(name='charges', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    _VehTypeCharges_specialCharges = SEQ(name='specialCharges', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'SpecialCharges')), opt=True)
    VehTypeCharges._cont = ASN1Dict([
        ('vehType', _VehTypeCharges_vehType),
        ('charges', _VehTypeCharges_charges),
        ('specialCharges', _VehTypeCharges_specialCharges),
        ])
    VehTypeCharges._ext = []
    
    #-----< VehicleTypes >-----#
    VehicleTypes = ENUM(name='VehicleTypes', mode=MODE_TYPE)
    VehicleTypes._cont = ASN1Dict([('motorcycles', 1), ('passengerCars', 2), ('fourTireSingleUnit', 3), ('buses', 4), ('twoAxleSixTireSingleUnit', 5), ('threeAxleSingleUnit', 6), ('fourOrMoreAxleSingleUnit', 7), ('fourOrLessAxleSingleTrailer', 8), ('fiveAxleTractorSemitrailer', 9), ('sixOrMoreAxleSingleTrailer', 10), ('fiveOrLessAxleMultiTrailer', 11), ('sixAxleMultiTrailer', 12), ('sevenOrMoreAxleMultiTrailer', 13)])
    VehicleTypes._ext = []
    
    #-----< SpecialCharges >-----#
    SpecialCharges = SEQ(name='SpecialCharges', mode=MODE_TYPE)
    _SpecialCharges_hov2Charge = SEQ(name='hov2Charge', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _SpecialCharges_hov3Charge = SEQ(name='hov3Charge', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _SpecialCharges_hov4Charge = SEQ(name='hov4Charge', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _SpecialCharges_hov5PlusCharge = SEQ(name='hov5PlusCharge', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _SpecialCharges_cleanAirCharge = SEQ(name='cleanAirCharge', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _SpecialCharges_operatorDefined = SEQ(name='operatorDefined', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'OperatorDefined')), opt=True)
    _SpecialCharges_engineCharacteristics = INT(name='engineCharacteristics', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'EngineCharacteristics')), opt=True)
    SpecialCharges._cont = ASN1Dict([
        ('hov2Charge', _SpecialCharges_hov2Charge),
        ('hov3Charge', _SpecialCharges_hov3Charge),
        ('hov4Charge', _SpecialCharges_hov4Charge),
        ('hov5PlusCharge', _SpecialCharges_hov5PlusCharge),
        ('cleanAirCharge', _SpecialCharges_cleanAirCharge),
        ('operatorDefined', _SpecialCharges_operatorDefined),
        ('engineCharacteristics', _SpecialCharges_engineCharacteristics),
        ])
    SpecialCharges._ext = []
    
    #-----< OperatorDefined >-----#
    OperatorDefined = SEQ(name='OperatorDefined', mode=MODE_TYPE)
    _OperatorDefined_opDefCharge1 = SEQ(name='opDefCharge1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge2 = SEQ(name='opDefCharge2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge3 = SEQ(name='opDefCharge3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge4 = SEQ(name='opDefCharge4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge5 = SEQ(name='opDefCharge5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge6 = SEQ(name='opDefCharge6', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge7 = SEQ(name='opDefCharge7', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge8 = SEQ(name='opDefCharge8', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge9 = SEQ(name='opDefCharge9', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge10 = SEQ(name='opDefCharge10', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge11 = SEQ(name='opDefCharge11', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge12 = SEQ(name='opDefCharge12', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge13 = SEQ(name='opDefCharge13', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge14 = SEQ(name='opDefCharge14', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge15 = SEQ(name='opDefCharge15', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    _OperatorDefined_opDefCharge16 = SEQ(name='opDefCharge16', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    OperatorDefined._cont = ASN1Dict([
        ('opDefCharge1', _OperatorDefined_opDefCharge1),
        ('opDefCharge2', _OperatorDefined_opDefCharge2),
        ('opDefCharge3', _OperatorDefined_opDefCharge3),
        ('opDefCharge4', _OperatorDefined_opDefCharge4),
        ('opDefCharge5', _OperatorDefined_opDefCharge5),
        ('opDefCharge6', _OperatorDefined_opDefCharge6),
        ('opDefCharge7', _OperatorDefined_opDefCharge7),
        ('opDefCharge8', _OperatorDefined_opDefCharge8),
        ('opDefCharge9', _OperatorDefined_opDefCharge9),
        ('opDefCharge10', _OperatorDefined_opDefCharge10),
        ('opDefCharge11', _OperatorDefined_opDefCharge11),
        ('opDefCharge12', _OperatorDefined_opDefCharge12),
        ('opDefCharge13', _OperatorDefined_opDefCharge13),
        ('opDefCharge14', _OperatorDefined_opDefCharge14),
        ('opDefCharge15', _OperatorDefined_opDefCharge15),
        ('opDefCharge16', _OperatorDefined_opDefCharge16),
        ])
    OperatorDefined._ext = []
    
    #-----< WeightChargesTable >-----#
    WeightChargesTable = SEQ_OF(name='WeightChargesTable', mode=MODE_TYPE)
    _WeightChargesTable__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'WeightCharges')))
    WeightChargesTable._cont = _WeightChargesTable__item_
    WeightChargesTable._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    
    #-----< WeightCharges >-----#
    WeightCharges = CHOICE(name='WeightCharges', mode=MODE_TYPE)
    _WeightCharges_totalWeightCharges = SEQ(name='totalWeightCharges', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TotalWeightCharges')))
    _WeightCharges_perAxleWeightCharges = SEQ(name='perAxleWeightCharges', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'PerAxleWeightCharges')))
    WeightCharges._cont = ASN1Dict([
        ('totalWeightCharges', _WeightCharges_totalWeightCharges),
        ('perAxleWeightCharges', _WeightCharges_perAxleWeightCharges),
        ])
    WeightCharges._ext = []
    
    #-----< TotalWeightCharges >-----#
    TotalWeightCharges = SEQ(name='TotalWeightCharges', mode=MODE_TYPE)
    _TotalWeightCharges_weightLimit = INT(name='weightLimit', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TotalWeightCharges_weightLimit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16777215)], ev=None, er=[])
    _TotalWeightCharges_weightLimitUnits = ENUM(name='weightLimitUnits', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TotalWeightCharges_weightLimitUnits._cont = ASN1Dict([('pounds', 0), ('kilograms', 1)])
    _TotalWeightCharges_weightLimitUnits._ext = []
    _TotalWeightCharges_weightCharge = SEQ(name='weightCharge', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    TotalWeightCharges._cont = ASN1Dict([
        ('weightLimit', _TotalWeightCharges_weightLimit),
        ('weightLimitUnits', _TotalWeightCharges_weightLimitUnits),
        ('weightCharge', _TotalWeightCharges_weightCharge),
        ])
    TotalWeightCharges._ext = []
    
    #-----< PerAxleWeightCharges >-----#
    PerAxleWeightCharges = SEQ(name='PerAxleWeightCharges', mode=MODE_TYPE)
    _PerAxleWeightCharges_totalWeightLimit = INT(name='totalWeightLimit', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PerAxleWeightCharges_totalWeightLimit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16777215)], ev=None, er=[])
    _PerAxleWeightCharges_maxLadenWeightOnAxle = INT(name='maxLadenWeightOnAxle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PerAxleWeightCharges_maxLadenWeightOnAxle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _PerAxleWeightCharges_weightLimitUnits = ENUM(name='weightLimitUnits', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PerAxleWeightCharges_weightLimitUnits._cont = ASN1Dict([('pounds', 0), ('kilograms', 1)])
    _PerAxleWeightCharges_weightLimitUnits._ext = []
    _PerAxleWeightCharges_axleWeightCharge = SEQ(name='axleWeightCharge', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    PerAxleWeightCharges._cont = ASN1Dict([
        ('totalWeightLimit', _PerAxleWeightCharges_totalWeightLimit),
        ('maxLadenWeightOnAxle', _PerAxleWeightCharges_maxLadenWeightOnAxle),
        ('weightLimitUnits', _PerAxleWeightCharges_weightLimitUnits),
        ('axleWeightCharge', _PerAxleWeightCharges_axleWeightCharge),
        ])
    PerAxleWeightCharges._ext = []
    
    #-----< AxlesChargesTable >-----#
    AxlesChargesTable = SEQ_OF(name='AxlesChargesTable', mode=MODE_TYPE)
    _AxlesChargesTable__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollAdvertisementMessage', 'AxlesCharges')))
    AxlesChargesTable._cont = _AxlesChargesTable__item_
    AxlesChargesTable._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=10)], ev=[], er=[])
    
    #-----< AxlesCharges >-----#
    AxlesCharges = SEQ(name='AxlesCharges', mode=MODE_TYPE)
    _AxlesCharges_axlesLimit = INT(name='axlesLimit', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AxlesCharges_axlesLimit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=10)], ev=[], er=[])
    _AxlesCharges_axlesCharge = SEQ(name='axlesCharge', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')))
    AxlesCharges._cont = ASN1Dict([
        ('axlesLimit', _AxlesCharges_axlesLimit),
        ('axlesCharge', _AxlesCharges_axlesCharge),
        ])
    AxlesCharges._ext = []
    
    #-----< TollPointMap >-----#
    TollPointMap = SEQ(name='TollPointMap', mode=MODE_TYPE)
    _TollPointMap_revisionNum = INT(name='revisionNum', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TollPointMap_revisionNum._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    _TollPointMap_referencePoint = SEQ(name='referencePoint', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _TollPointMap_speedLimit = SEQ(name='speedLimit', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'RegulatorySpeedLimit')))
    _TollPointMap_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneWidth')))
    _TollPointMap_approachLanesMap = SEQ_OF(name='approachLanesMap', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TollPointMap_approachLanesMap__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'GenericLane')))
    _TollPointMap_approachLanesMap._cont = __TollPointMap_approachLanesMap__item_
    _TollPointMap_approachLanesMap._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=[], er=[])
    _TollPointMap_tollZoneLanesMap = SEQ_OF(name='tollZoneLanesMap', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TollPointMap_tollZoneLanesMap__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('MapData', 'GenericLane')))
    _TollPointMap_tollZoneLanesMap._cont = __TollPointMap_tollZoneLanesMap__item_
    _TollPointMap_tollZoneLanesMap._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=[], er=[])
    TollPointMap._cont = ASN1Dict([
        ('revisionNum', _TollPointMap_revisionNum),
        ('referencePoint', _TollPointMap_referencePoint),
        ('speedLimit', _TollPointMap_speedLimit),
        ('laneWidth', _TollPointMap_laneWidth),
        ('approachLanesMap', _TollPointMap_approachLanesMap),
        ('tollZoneLanesMap', _TollPointMap_tollZoneLanesMap),
        ])
    TollPointMap._ext = []
    
    #-----< TollChargerInfo >-----#
    TollChargerInfo = SEQ(name='TollChargerInfo', mode=MODE_TYPE)
    _TollChargerInfo_tollChargerId = OID(name='tollChargerId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TollChargerInfo_tollPointId = INT(name='tollPointId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollPointID')))
    _TollChargerInfo_descriptiveName = STR_IA5(name='descriptiveName', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DescriptiveName')), opt=True)
    TollChargerInfo._cont = ASN1Dict([
        ('tollChargerId', _TollChargerInfo_tollChargerId),
        ('tollPointId', _TollChargerInfo_tollPointId),
        ('descriptiveName', _TollChargerInfo_descriptiveName),
        ])
    TollChargerInfo._ext = []
    
    #-----< TollPointID >-----#
    TollPointID = INT(name='TollPointID', mode=MODE_TYPE)
    TollPointID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=2048)], ev=None, er=[])
    
    _all_ = [
        _TollAdvertisementMessage_tollChargesTable,
        _TollAdvertisementMessage_tollAdvInfo,
        TollAdvertisementMessage,
        _TollAdvertisementInfo_tamSequenceNum,
        _TollAdvertisementInfo_totalTams,
        _TollAdvertisementInfo_tamNum,
        _TollAdvertisementInfo_tollChargerInfo,
        _TollAdvertisementInfo_timestamp,
        _TollAdvertisementInfo_tumInstructions,
        _TollAdvertisementInfo_tollPointMap,
        _TollAdvertisementInfo_tumPublicKey,
        _TollAdvertisementInfo_ackPolicy,
        _TollAdvertisementInfo_lastTollPtDataReq,
        TollAdvertisementInfo,
        _TumInstructions_maxNumOfLocTimeStamps,
        _TumInstructions_locTimeStampRate,
        TumInstructions,
        _AckPolicy_timeout,
        _AckPolicy_numOfRetries,
        AckPolicy,
        __TollChargesTable_tollTypeCharge_pointCharges,
        ___TollChargesTable_tollTypeCharge_perLaneCharges__item_,
        __TollChargesTable_tollTypeCharge_perLaneCharges,
        ___TollChargesTable_tollTypeCharge_closedNetworkCharges__item_,
        __TollChargesTable_tollTypeCharge_closedNetworkCharges,
        __TollChargesTable_tollTypeCharge_timeBasedCharges,
        _TollChargesTable_tollTypeCharge,
        TollChargesTable,
        _LaneChargesTable_laneId,
        _LaneChargesTable_chargesTable,
        LaneChargesTable,
        _ClosedNetworkChargesTable_entryChargesTable,
        _ClosedNetworkChargesTable_exitChargesTable,
        ClosedNetworkChargesTable,
        _EntryChargesTable_exitInfo,
        _EntryChargesTable_chargesTable,
        EntryChargesTable,
        _ExitChargesTable_entryInfo,
        _ExitChargesTable_chargesTable,
        ExitChargesTable,
        _ExitInfo_exitNumber,
        _ExitInfo_exitLetter,
        _ExitInfo_tollPointID,
        ExitInfo,
        _TimeChargesTable_maxTime,
        _TimeChargesTable_chargesTable,
        TimeChargesTable,
        _ChargesTable_vehTypeBased,
        _ChargesTable_numAxlesBased,
        _ChargesTable_weightBased,
        ChargesTable,
        _VehTypeChargesTable__item_,
        VehTypeChargesTable,
        _VehTypeCharges_vehType,
        _VehTypeCharges_charges,
        _VehTypeCharges_specialCharges,
        VehTypeCharges,
        VehicleTypes,
        _SpecialCharges_hov2Charge,
        _SpecialCharges_hov3Charge,
        _SpecialCharges_hov4Charge,
        _SpecialCharges_hov5PlusCharge,
        _SpecialCharges_cleanAirCharge,
        _SpecialCharges_operatorDefined,
        _SpecialCharges_engineCharacteristics,
        SpecialCharges,
        _OperatorDefined_opDefCharge1,
        _OperatorDefined_opDefCharge2,
        _OperatorDefined_opDefCharge3,
        _OperatorDefined_opDefCharge4,
        _OperatorDefined_opDefCharge5,
        _OperatorDefined_opDefCharge6,
        _OperatorDefined_opDefCharge7,
        _OperatorDefined_opDefCharge8,
        _OperatorDefined_opDefCharge9,
        _OperatorDefined_opDefCharge10,
        _OperatorDefined_opDefCharge11,
        _OperatorDefined_opDefCharge12,
        _OperatorDefined_opDefCharge13,
        _OperatorDefined_opDefCharge14,
        _OperatorDefined_opDefCharge15,
        _OperatorDefined_opDefCharge16,
        OperatorDefined,
        _WeightChargesTable__item_,
        WeightChargesTable,
        _WeightCharges_totalWeightCharges,
        _WeightCharges_perAxleWeightCharges,
        WeightCharges,
        _TotalWeightCharges_weightLimit,
        _TotalWeightCharges_weightLimitUnits,
        _TotalWeightCharges_weightCharge,
        TotalWeightCharges,
        _PerAxleWeightCharges_totalWeightLimit,
        _PerAxleWeightCharges_maxLadenWeightOnAxle,
        _PerAxleWeightCharges_weightLimitUnits,
        _PerAxleWeightCharges_axleWeightCharge,
        PerAxleWeightCharges,
        _AxlesChargesTable__item_,
        AxlesChargesTable,
        _AxlesCharges_axlesLimit,
        _AxlesCharges_axlesCharge,
        AxlesCharges,
        _TollPointMap_revisionNum,
        _TollPointMap_referencePoint,
        _TollPointMap_speedLimit,
        _TollPointMap_laneWidth,
        __TollPointMap_approachLanesMap__item_,
        _TollPointMap_approachLanesMap,
        __TollPointMap_tollZoneLanesMap__item_,
        _TollPointMap_tollZoneLanesMap,
        TollPointMap,
        _TollChargerInfo_tollChargerId,
        _TollChargerInfo_tollPointId,
        _TollChargerInfo_descriptiveName,
        TollChargerInfo,
        TollPointID,
    ]

class TollUsageAckMessage:

    _name_  = 'TollUsageAckMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 9, 1, 3217, 1, 2, 1, 1]
    
    _obj_ = [
        'TollUsageAckMessage',
        'TumAck',
        'TumAckHash',
        ]
    _type_ = [
        'TollUsageAckMessage',
        'TumAck',
        'TumAckHash',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TollUsageAckMessage >-----#
    TollUsageAckMessage = SEQ(name='TollUsageAckMessage', mode=MODE_TYPE)
    _TollUsageAckMessage_tumAck = SEQ_OF(name='tumAck', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageAckMessage', 'TumAck')))
    _TollUsageAckMessage_ackMaxAge = INT(name='ackMaxAge', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TollUsageAckMessage_ackMaxAge._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=100, ub=10000)], ev=[], er=[])
    TollUsageAckMessage._cont = ASN1Dict([
        ('tumAck', _TollUsageAckMessage_tumAck),
        ('ackMaxAge', _TollUsageAckMessage_ackMaxAge),
        ])
    TollUsageAckMessage._ext = []
    
    #-----< TumAck >-----#
    TumAck = SEQ_OF(name='TumAck', mode=MODE_TYPE)
    _TumAck__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollUsageAckMessage', 'TumAckHash')))
    TumAck._cont = _TumAck__item_
    TumAck._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< TumAckHash >-----#
    TumAckHash = SEQ(name='TumAckHash', mode=MODE_TYPE)
    _TumAckHash_signedTumHash = OCT_STR(name='signedTumHash', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TumAckHash_signedTumHash._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _TumAckHash_tempId = OCT_STR(name='tempId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _TumAckHash_tumSequenceNum = INT(name='tumSequenceNum', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    TumAckHash._cont = ASN1Dict([
        ('signedTumHash', _TumAckHash_signedTumHash),
        ('tempId', _TumAckHash_tempId),
        ('tumSequenceNum', _TumAckHash_tumSequenceNum),
        ])
    TumAckHash._ext = []
    
    _all_ = [
        _TollUsageAckMessage_tumAck,
        _TollUsageAckMessage_ackMaxAge,
        TollUsageAckMessage,
        _TumAck__item_,
        TumAck,
        _TumAckHash_signedTumHash,
        _TumAckHash_tempId,
        _TumAckHash_tumSequenceNum,
        TumAckHash,
    ]

class TollUsageMessage:

    _name_  = 'TollUsageMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 9, 1, 3217, 1, 1, 1, 1]
    
    _obj_ = [
        'TollUsageMessage',
        'TumHash',
        'EncryptedTumData',
        'TumData',
        'TollServiceProviderData',
        'TollUserData',
        'VehicleAxlesAndWeightInfo',
        'VehicleId',
        'LocAndTimeStamps',
        'LocAndTimeStamp',
        'LastTollPointInfos',
        'LastTollPointInfo',
        ]
    _type_ = [
        'TollUsageMessage',
        'TumHash',
        'EncryptedTumData',
        'TumData',
        'TollServiceProviderData',
        'TollUserData',
        'VehicleAxlesAndWeightInfo',
        'VehicleId',
        'LocAndTimeStamps',
        'LocAndTimeStamp',
        'LastTollPointInfos',
        'LastTollPointInfo',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TollUsageMessage >-----#
    TollUsageMessage = SEQ(name='TollUsageMessage', mode=MODE_TYPE)
    _TollUsageMessage_tollPointInfo = SEQ(name='tollPointInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollChargerInfo')))
    _TollUsageMessage_tempID = OCT_STR(name='tempID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _TollUsageMessage_tumSequenceNum = INT(name='tumSequenceNum', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _TollUsageMessage_tamSequenceNum = INT(name='tamSequenceNum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _TollUsageMessage_tumHash = OCT_STR(name='tumHash', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'TumHash')), opt=True)
    _TollUsageMessage_encryptedTumData = OCT_STR(name='encryptedTumData', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'EncryptedTumData')))
    TollUsageMessage._cont = ASN1Dict([
        ('tollPointInfo', _TollUsageMessage_tollPointInfo),
        ('tempID', _TollUsageMessage_tempID),
        ('tumSequenceNum', _TollUsageMessage_tumSequenceNum),
        ('tamSequenceNum', _TollUsageMessage_tamSequenceNum),
        ('tumHash', _TollUsageMessage_tumHash),
        ('encryptedTumData', _TollUsageMessage_encryptedTumData),
        ])
    TollUsageMessage._ext = []
    
    #-----< TumHash >-----#
    TumHash = OCT_STR(name='TumHash', mode=MODE_TYPE)
    TumHash._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    
    #-----< EncryptedTumData >-----#
    EncryptedTumData = OCT_STR(name='EncryptedTumData', mode=MODE_TYPE)
    EncryptedTumData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=7000)], ev=None, er=[])
    
    #-----< TumData >-----#
    TumData = SEQ(name='TumData', mode=MODE_TYPE)
    _TumData_tollUserData = SEQ(name='tollUserData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'TollUserData')))
    _TumData_tollServiceProviderData = OCT_STR(name='tollServiceProviderData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'TollServiceProviderData')), opt=True)
    TumData._cont = ASN1Dict([
        ('tollUserData', _TumData_tollUserData),
        ('tollServiceProviderData', _TumData_tollServiceProviderData),
        ])
    TumData._ext = []
    
    #-----< TollServiceProviderData >-----#
    TollServiceProviderData = OCT_STR(name='TollServiceProviderData', mode=MODE_TYPE)
    TollServiceProviderData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1024)], ev=[], er=[])
    
    #-----< TollUserData >-----#
    TollUserData = SEQ(name='TollUserData', mode=MODE_TYPE)
    _TollUserData_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _TollUserData_tspId = OID(name='tspId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TollUserData_vehicleId = SEQ(name='vehicleId', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'VehicleId')))
    _TollUserData_vehType = ENUM(name='vehType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'VehicleTypes')), opt=True)
    _TollUserData_vehicleDescription = SEQ(name='vehicleDescription', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'VehicleDescription')), opt=True)
    _TollUserData_vehAxlesAndWeight = SEQ(name='vehAxlesAndWeight', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'VehicleAxlesAndWeightInfo')), opt=True)
    _TollUserData_numOccupants = INT(name='numOccupants', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TollUserData_numOccupants._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=5)], ev=[], er=[])
    _TollUserData_entryTollPointId = INT(name='entryTollPointId', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollPointID')), opt=True)
    _TollUserData_entryTimeStamp = SEQ(name='entryTimeStamp', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')), opt=True)
    _TollUserData_locAndTimeStamps = SEQ_OF(name='locAndTimeStamps', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'LocAndTimeStamps')), opt=True)
    _TollUserData_lastTollPoints = SEQ_OF(name='lastTollPoints', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollUsageMessage', 'LastTollPointInfos')), opt=True)
    _TollUserData_charge = SEQ(name='charge', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'PaymentFee')), opt=True)
    TollUserData._cont = ASN1Dict([
        ('timeStamp', _TollUserData_timeStamp),
        ('tspId', _TollUserData_tspId),
        ('vehicleId', _TollUserData_vehicleId),
        ('vehType', _TollUserData_vehType),
        ('vehicleDescription', _TollUserData_vehicleDescription),
        ('vehAxlesAndWeight', _TollUserData_vehAxlesAndWeight),
        ('numOccupants', _TollUserData_numOccupants),
        ('entryTollPointId', _TollUserData_entryTollPointId),
        ('entryTimeStamp', _TollUserData_entryTimeStamp),
        ('locAndTimeStamps', _TollUserData_locAndTimeStamps),
        ('lastTollPoints', _TollUserData_lastTollPoints),
        ('charge', _TollUserData_charge),
        ])
    TollUserData._ext = []
    
    #-----< VehicleAxlesAndWeightInfo >-----#
    VehicleAxlesAndWeightInfo = SEQ(name='VehicleAxlesAndWeightInfo', mode=MODE_TYPE)
    _VehicleAxlesAndWeightInfo_vehNumAxles = INT(name='vehNumAxles', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VehicleAxlesAndWeightInfo_vehNumAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    _VehicleAxlesAndWeightInfo_vehWeightPerAxle = SEQ_OF(name='vehWeightPerAxle', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __VehicleAxlesAndWeightInfo_vehWeightPerAxle__item_ = INT(name='_item_', mode=MODE_TYPE)
    __VehicleAxlesAndWeightInfo_vehWeightPerAxle__item_._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _VehicleAxlesAndWeightInfo_vehWeightPerAxle._cont = __VehicleAxlesAndWeightInfo_vehWeightPerAxle__item_
    _VehicleAxlesAndWeightInfo_vehWeightPerAxle._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=[], er=[])
    _VehicleAxlesAndWeightInfo_vehTotalWeight = INT(name='vehTotalWeight', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VehicleAxlesAndWeightInfo_vehTotalWeight._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16777215)], ev=None, er=[])
    _VehicleAxlesAndWeightInfo_vehWeightUnits = ENUM(name='vehWeightUnits', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VehicleAxlesAndWeightInfo_vehWeightUnits._cont = ASN1Dict([('pounds', 0), ('kilograms', 1)])
    _VehicleAxlesAndWeightInfo_vehWeightUnits._ext = []
    VehicleAxlesAndWeightInfo._cont = ASN1Dict([
        ('vehNumAxles', _VehicleAxlesAndWeightInfo_vehNumAxles),
        ('vehWeightPerAxle', _VehicleAxlesAndWeightInfo_vehWeightPerAxle),
        ('vehTotalWeight', _VehicleAxlesAndWeightInfo_vehTotalWeight),
        ('vehWeightUnits', _VehicleAxlesAndWeightInfo_vehWeightUnits),
        ])
    VehicleAxlesAndWeightInfo._ext = []
    
    #-----< VehicleId >-----#
    VehicleId = SEQ(name='VehicleId', mode=MODE_TYPE)
    _VehicleId_vehicleIdentity = OCT_STR(name='vehicleIdentity', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleId_vehicleIdentity._const_sz = ASN1Set(rv=[16], rr=[], ev=[], er=[])
    _VehicleId_licPlateState = STR_IA5(name='licPlateState', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleId_licPlateState._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _VehicleId_licPlateNumVeh = STR_IA5(name='licPlateNumVeh', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleId_licPlateNumVeh._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=12)], ev=[], er=[])
    _VehicleId_licPlateNumTrailer = STR_IA5(name='licPlateNumTrailer', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VehicleId_licPlateNumTrailer._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=12)], ev=[], er=[])
    _VehicleId_userId = SEQ(name='userId', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDataDictionary', 'UserId')), opt=True)
    VehicleId._cont = ASN1Dict([
        ('vehicleIdentity', _VehicleId_vehicleIdentity),
        ('licPlateState', _VehicleId_licPlateState),
        ('licPlateNumVeh', _VehicleId_licPlateNumVeh),
        ('licPlateNumTrailer', _VehicleId_licPlateNumTrailer),
        ('userId', _VehicleId_userId),
        ])
    VehicleId._ext = []
    
    #-----< LocAndTimeStamps >-----#
    LocAndTimeStamps = SEQ_OF(name='LocAndTimeStamps', mode=MODE_TYPE)
    _LocAndTimeStamps__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollUsageMessage', 'LocAndTimeStamp')))
    LocAndTimeStamps._cont = _LocAndTimeStamps__item_
    LocAndTimeStamps._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=[], er=[])
    
    #-----< LocAndTimeStamp >-----#
    LocAndTimeStamp = SEQ(name='LocAndTimeStamp', mode=MODE_TYPE)
    _LocAndTimeStamp_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Latitude')))
    _LocAndTimeStamp_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Longitude')))
    _LocAndTimeStamp_elevation = INT(name='elevation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Elevation')), opt=True)
    _LocAndTimeStamp_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _LocAndTimeStamp_currentLane = INT(name='currentLane', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'LaneID')), opt=True)
    LocAndTimeStamp._cont = ASN1Dict([
        ('latitude', _LocAndTimeStamp_latitude),
        ('longitude', _LocAndTimeStamp_longitude),
        ('elevation', _LocAndTimeStamp_elevation),
        ('timeStamp', _LocAndTimeStamp_timeStamp),
        ('currentLane', _LocAndTimeStamp_currentLane),
        ])
    LocAndTimeStamp._ext = []
    
    #-----< LastTollPointInfos >-----#
    LastTollPointInfos = SEQ_OF(name='LastTollPointInfos', mode=MODE_TYPE)
    _LastTollPointInfos__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TollUsageMessage', 'LastTollPointInfo')))
    LastTollPointInfos._cont = _LastTollPointInfos__item_
    LastTollPointInfos._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=[], er=[])
    
    #-----< LastTollPointInfo >-----#
    LastTollPointInfo = SEQ(name='LastTollPointInfo', mode=MODE_TYPE)
    _LastTollPointInfo_tollChargerInfo = SEQ(name='tollChargerInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TollAdvertisementMessage', 'TollChargerInfo')))
    _LastTollPointInfo_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    LastTollPointInfo._cont = ASN1Dict([
        ('tollChargerInfo', _LastTollPointInfo_tollChargerInfo),
        ('timeStamp', _LastTollPointInfo_timeStamp),
        ])
    LastTollPointInfo._ext = []
    
    _all_ = [
        _TollUsageMessage_tollPointInfo,
        _TollUsageMessage_tempID,
        _TollUsageMessage_tumSequenceNum,
        _TollUsageMessage_tamSequenceNum,
        _TollUsageMessage_tumHash,
        _TollUsageMessage_encryptedTumData,
        TollUsageMessage,
        TumHash,
        EncryptedTumData,
        _TumData_tollUserData,
        _TumData_tollServiceProviderData,
        TumData,
        TollServiceProviderData,
        _TollUserData_timeStamp,
        _TollUserData_tspId,
        _TollUserData_vehicleId,
        _TollUserData_vehType,
        _TollUserData_vehicleDescription,
        _TollUserData_vehAxlesAndWeight,
        _TollUserData_numOccupants,
        _TollUserData_entryTollPointId,
        _TollUserData_entryTimeStamp,
        _TollUserData_locAndTimeStamps,
        _TollUserData_lastTollPoints,
        _TollUserData_charge,
        TollUserData,
        _VehicleAxlesAndWeightInfo_vehNumAxles,
        __VehicleAxlesAndWeightInfo_vehWeightPerAxle__item_,
        _VehicleAxlesAndWeightInfo_vehWeightPerAxle,
        _VehicleAxlesAndWeightInfo_vehTotalWeight,
        _VehicleAxlesAndWeightInfo_vehWeightUnits,
        VehicleAxlesAndWeightInfo,
        _VehicleId_vehicleIdentity,
        _VehicleId_licPlateState,
        _VehicleId_licPlateNumVeh,
        _VehicleId_licPlateNumTrailer,
        _VehicleId_userId,
        VehicleId,
        _LocAndTimeStamps__item_,
        LocAndTimeStamps,
        _LocAndTimeStamp_latitude,
        _LocAndTimeStamp_longitude,
        _LocAndTimeStamp_elevation,
        _LocAndTimeStamp_timeStamp,
        _LocAndTimeStamp_currentLane,
        LocAndTimeStamp,
        _LastTollPointInfos__item_,
        LastTollPointInfos,
        _LastTollPointInfo_tollChargerInfo,
        _LastTollPointInfo_timeStamp,
        LastTollPointInfo,
    ]

class SensorDataSharingMessage:

    _name_  = 'SensorDataSharingMessage'
    _oid_   = [2, 16, 840, 1, 114566, 1, 1, 8, 1, 3224, 1, 41, 1, 1]
    
    _obj_ = [
        'SensorDataSharingMessage',
        'EquipmentType',
        'DetectedObjectList',
        'DetectedObjectData',
        'DetectedObjectOptionalData',
        'DetectedObjectCommonData',
        'DetectedVehicleData',
        'DetectedVRUData',
        'DetectedObstacleData',
        'ObjectType',
        'ObjectID',
        'ClassificationConfidence',
        'MeasurementTimeOffset',
        'PositionOffsetXYZ',
        'ObjectDistance',
        'Attitude',
        'PitchDetected',
        'RollDetected',
        'YawDetected',
        'AttitudeConfidence',
        'AngularVelocity',
        'PitchRate',
        'RollRate',
        'AngularVelocityConfidence',
        'PitchRateConfidence',
        'RollRateConfidence',
        'VehicleSizeConfidence',
        'ObstacleSize',
        'ObstacleSizeConfidence',
        'SizeValue',
        'SizeValueConfidence',
        ]
    _type_ = [
        'SensorDataSharingMessage',
        'EquipmentType',
        'DetectedObjectList',
        'DetectedObjectData',
        'DetectedObjectOptionalData',
        'DetectedObjectCommonData',
        'DetectedVehicleData',
        'DetectedVRUData',
        'DetectedObstacleData',
        'ObjectType',
        'ObjectID',
        'ClassificationConfidence',
        'MeasurementTimeOffset',
        'PositionOffsetXYZ',
        'ObjectDistance',
        'Attitude',
        'PitchDetected',
        'RollDetected',
        'YawDetected',
        'AttitudeConfidence',
        'AngularVelocity',
        'PitchRate',
        'RollRate',
        'AngularVelocityConfidence',
        'PitchRateConfidence',
        'RollRateConfidence',
        'VehicleSizeConfidence',
        'ObstacleSize',
        'ObstacleSizeConfidence',
        'SizeValue',
        'SizeValueConfidence',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SensorDataSharingMessage >-----#
    SensorDataSharingMessage = SEQ(name='SensorDataSharingMessage', mode=MODE_TYPE)
    _SensorDataSharingMessage_msgCnt = INT(name='msgCnt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'MsgCount')))
    _SensorDataSharingMessage_sourceID = OCT_STR(name='sourceID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TemporaryID')))
    _SensorDataSharingMessage_equipmentType = ENUM(name='equipmentType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'EquipmentType')))
    _SensorDataSharingMessage_sDSMTimeStamp = SEQ(name='sDSMTimeStamp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'DDateTime')))
    _SensorDataSharingMessage_refPos = SEQ(name='refPos', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Position3D')))
    _SensorDataSharingMessage_refPosXYConf = SEQ(name='refPosXYConf', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionalAccuracy')))
    _SensorDataSharingMessage_refPosElConf = ENUM(name='refPosElConf', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ElevationConfidence')), opt=True)
    _SensorDataSharingMessage_objects = SEQ_OF(name='objects', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'DetectedObjectList')))
    SensorDataSharingMessage._cont = ASN1Dict([
        ('msgCnt', _SensorDataSharingMessage_msgCnt),
        ('sourceID', _SensorDataSharingMessage_sourceID),
        ('equipmentType', _SensorDataSharingMessage_equipmentType),
        ('sDSMTimeStamp', _SensorDataSharingMessage_sDSMTimeStamp),
        ('refPos', _SensorDataSharingMessage_refPos),
        ('refPosXYConf', _SensorDataSharingMessage_refPosXYConf),
        ('refPosElConf', _SensorDataSharingMessage_refPosElConf),
        ('objects', _SensorDataSharingMessage_objects),
        ])
    SensorDataSharingMessage._ext = None
    
    #-----< EquipmentType >-----#
    EquipmentType = ENUM(name='EquipmentType', mode=MODE_TYPE)
    EquipmentType._cont = ASN1Dict([('unknown', 0), ('rsu', 1), ('obu', 2), ('vru', 3)])
    EquipmentType._ext = []
    
    #-----< DetectedObjectList >-----#
    DetectedObjectList = SEQ_OF(name='DetectedObjectList', mode=MODE_TYPE)
    _DetectedObjectList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SensorDataSharingMessage', 'DetectedObjectData')))
    DetectedObjectList._cont = _DetectedObjectList__item_
    DetectedObjectList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DetectedObjectData >-----#
    DetectedObjectData = SEQ(name='DetectedObjectData', mode=MODE_TYPE)
    _DetectedObjectData_detObjCommon = SEQ(name='detObjCommon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'DetectedObjectCommonData')))
    _DetectedObjectData_detObjOptData = CHOICE(name='detObjOptData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'DetectedObjectOptionalData')), opt=True)
    DetectedObjectData._cont = ASN1Dict([
        ('detObjCommon', _DetectedObjectData_detObjCommon),
        ('detObjOptData', _DetectedObjectData_detObjOptData),
        ])
    DetectedObjectData._ext = None
    
    #-----< DetectedObjectOptionalData >-----#
    DetectedObjectOptionalData = CHOICE(name='DetectedObjectOptionalData', mode=MODE_TYPE)
    _DetectedObjectOptionalData_detVeh = SEQ(name='detVeh', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'DetectedVehicleData')))
    _DetectedObjectOptionalData_detVRU = SEQ(name='detVRU', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'DetectedVRUData')))
    _DetectedObjectOptionalData_detObst = SEQ(name='detObst', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'DetectedObstacleData')))
    DetectedObjectOptionalData._cont = ASN1Dict([
        ('detVeh', _DetectedObjectOptionalData_detVeh),
        ('detVRU', _DetectedObjectOptionalData_detVRU),
        ('detObst', _DetectedObjectOptionalData_detObst),
        ])
    DetectedObjectOptionalData._ext = None
    
    #-----< DetectedObjectCommonData >-----#
    DetectedObjectCommonData = SEQ(name='DetectedObjectCommonData', mode=MODE_TYPE)
    _DetectedObjectCommonData_objType = ENUM(name='objType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ObjectType')))
    _DetectedObjectCommonData_objTypeCfd = INT(name='objTypeCfd', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ClassificationConfidence')))
    _DetectedObjectCommonData_objectID = INT(name='objectID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ObjectID')))
    _DetectedObjectCommonData_measurementTime = INT(name='measurementTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'MeasurementTimeOffset')))
    _DetectedObjectCommonData_timeConfidence = ENUM(name='timeConfidence', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'TimeConfidence')))
    _DetectedObjectCommonData_pos = SEQ(name='pos', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'PositionOffsetXYZ')))
    _DetectedObjectCommonData_posConfidence = SEQ(name='posConfidence', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'PositionConfidenceSet')))
    _DetectedObjectCommonData_speed = INT(name='speed', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')))
    _DetectedObjectCommonData_speedConfidence = ENUM(name='speedConfidence', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedConfidence')))
    _DetectedObjectCommonData_speedZ = INT(name='speedZ', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Speed')), opt=True)
    _DetectedObjectCommonData_speedConfidenceZ = ENUM(name='speedConfidenceZ', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'SpeedConfidence')), opt=True)
    _DetectedObjectCommonData_heading = INT(name='heading', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'Heading')))
    _DetectedObjectCommonData_headingConf = ENUM(name='headingConf', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingConfidence')))
    _DetectedObjectCommonData_accel4way = SEQ(name='accel4way', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'AccelerationSet4Way')), opt=True)
    _DetectedObjectCommonData_accCfdX = ENUM(name='accCfdX', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AccelerationConfidence')), opt=True)
    _DetectedObjectCommonData_accCfdY = ENUM(name='accCfdY', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AccelerationConfidence')), opt=True)
    _DetectedObjectCommonData_accCfdZ = ENUM(name='accCfdZ', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'AccelerationConfidence')), opt=True)
    _DetectedObjectCommonData_accCfdYaw = ENUM(name='accCfdYaw', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProbeVehicleData', 'YawRateConfidence')), opt=True)
    DetectedObjectCommonData._cont = ASN1Dict([
        ('objType', _DetectedObjectCommonData_objType),
        ('objTypeCfd', _DetectedObjectCommonData_objTypeCfd),
        ('objectID', _DetectedObjectCommonData_objectID),
        ('measurementTime', _DetectedObjectCommonData_measurementTime),
        ('timeConfidence', _DetectedObjectCommonData_timeConfidence),
        ('pos', _DetectedObjectCommonData_pos),
        ('posConfidence', _DetectedObjectCommonData_posConfidence),
        ('speed', _DetectedObjectCommonData_speed),
        ('speedConfidence', _DetectedObjectCommonData_speedConfidence),
        ('speedZ', _DetectedObjectCommonData_speedZ),
        ('speedConfidenceZ', _DetectedObjectCommonData_speedConfidenceZ),
        ('heading', _DetectedObjectCommonData_heading),
        ('headingConf', _DetectedObjectCommonData_headingConf),
        ('accel4way', _DetectedObjectCommonData_accel4way),
        ('accCfdX', _DetectedObjectCommonData_accCfdX),
        ('accCfdY', _DetectedObjectCommonData_accCfdY),
        ('accCfdZ', _DetectedObjectCommonData_accCfdZ),
        ('accCfdYaw', _DetectedObjectCommonData_accCfdYaw),
        ])
    DetectedObjectCommonData._ext = []
    
    #-----< DetectedVehicleData >-----#
    DetectedVehicleData = SEQ(name='DetectedVehicleData', mode=MODE_TYPE)
    _DetectedVehicleData_lights = BIT_STR(name='lights', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'ExteriorLights')), opt=True)
    _DetectedVehicleData_vehAttitude = SEQ(name='vehAttitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'Attitude')), opt=True)
    _DetectedVehicleData_vehAttitudeConfidence = SEQ(name='vehAttitudeConfidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'AttitudeConfidence')), opt=True)
    _DetectedVehicleData_vehAngVel = SEQ(name='vehAngVel', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'AngularVelocity')), opt=True)
    _DetectedVehicleData_vehAngVelConfidence = SEQ(name='vehAngVelConfidence', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'AngularVelocityConfidence')), opt=True)
    _DetectedVehicleData_size = SEQ(name='size', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleSize')), opt=True)
    _DetectedVehicleData_height = INT(name='height', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'VehicleHeight')), opt=True)
    _DetectedVehicleData_vehicleSizeConfidence = SEQ(name='vehicleSizeConfidence', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'VehicleSizeConfidence')), opt=True)
    _DetectedVehicleData_vehicleClass = INT(name='vehicleClass', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'BasicVehicleClass')), opt=True)
    _DetectedVehicleData_classConf = INT(name='classConf', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ClassificationConfidence')), opt=True)
    DetectedVehicleData._cont = ASN1Dict([
        ('lights', _DetectedVehicleData_lights),
        ('vehAttitude', _DetectedVehicleData_vehAttitude),
        ('vehAttitudeConfidence', _DetectedVehicleData_vehAttitudeConfidence),
        ('vehAngVel', _DetectedVehicleData_vehAngVel),
        ('vehAngVelConfidence', _DetectedVehicleData_vehAngVelConfidence),
        ('size', _DetectedVehicleData_size),
        ('height', _DetectedVehicleData_height),
        ('vehicleSizeConfidence', _DetectedVehicleData_vehicleSizeConfidence),
        ('vehicleClass', _DetectedVehicleData_vehicleClass),
        ('classConf', _DetectedVehicleData_classConf),
        ])
    DetectedVehicleData._ext = []
    
    #-----< DetectedVRUData >-----#
    DetectedVRUData = SEQ(name='DetectedVRUData', mode=MODE_TYPE)
    _DetectedVRUData_basicType = ENUM(name='basicType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PersonalDeviceUserType')), opt=True)
    _DetectedVRUData_propulsion = CHOICE(name='propulsion', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'PropelledInformation')), opt=True)
    _DetectedVRUData_attachment = ENUM(name='attachment', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'Attachment')), opt=True)
    _DetectedVRUData_radius = INT(name='radius', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PersonalSafetyMessage', 'AttachmentRadius')), opt=True)
    DetectedVRUData._cont = ASN1Dict([
        ('basicType', _DetectedVRUData_basicType),
        ('propulsion', _DetectedVRUData_propulsion),
        ('attachment', _DetectedVRUData_attachment),
        ('radius', _DetectedVRUData_radius),
        ])
    DetectedVRUData._ext = None
    
    #-----< DetectedObstacleData >-----#
    DetectedObstacleData = SEQ(name='DetectedObstacleData', mode=MODE_TYPE)
    _DetectedObstacleData_obstSize = SEQ(name='obstSize', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ObstacleSize')))
    _DetectedObstacleData_obstSizeConfidence = SEQ(name='obstSizeConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ObstacleSizeConfidence')))
    DetectedObstacleData._cont = ASN1Dict([
        ('obstSize', _DetectedObstacleData_obstSize),
        ('obstSizeConfidence', _DetectedObstacleData_obstSizeConfidence),
        ])
    DetectedObstacleData._ext = None
    
    #-----< ObjectType >-----#
    ObjectType = ENUM(name='ObjectType', mode=MODE_TYPE)
    ObjectType._cont = ASN1Dict([('unknown', 0), ('vehicle', 1), ('vru', 2), ('animal', 3)])
    ObjectType._ext = []
    
    #-----< ObjectID >-----#
    ObjectID = INT(name='ObjectID', mode=MODE_TYPE)
    ObjectID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ClassificationConfidence >-----#
    ClassificationConfidence = INT(name='ClassificationConfidence', mode=MODE_TYPE)
    ClassificationConfidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=101)], ev=None, er=[])
    
    #-----< MeasurementTimeOffset >-----#
    MeasurementTimeOffset = INT(name='MeasurementTimeOffset', mode=MODE_TYPE)
    MeasurementTimeOffset._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1500, ub=1500)], ev=None, er=[])
    
    #-----< PositionOffsetXYZ >-----#
    PositionOffsetXYZ = SEQ(name='PositionOffsetXYZ', mode=MODE_TYPE)
    _PositionOffsetXYZ_offsetX = INT(name='offsetX', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ObjectDistance')))
    _PositionOffsetXYZ_offsetY = INT(name='offsetY', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ObjectDistance')))
    _PositionOffsetXYZ_offsetZ = INT(name='offsetZ', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'ObjectDistance')), opt=True)
    PositionOffsetXYZ._cont = ASN1Dict([
        ('offsetX', _PositionOffsetXYZ_offsetX),
        ('offsetY', _PositionOffsetXYZ_offsetY),
        ('offsetZ', _PositionOffsetXYZ_offsetZ),
        ])
    PositionOffsetXYZ._ext = None
    
    #-----< ObjectDistance >-----#
    ObjectDistance = INT(name='ObjectDistance', mode=MODE_TYPE)
    ObjectDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    #-----< Attitude >-----#
    Attitude = SEQ(name='Attitude', mode=MODE_TYPE)
    _Attitude_pitch = INT(name='pitch', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'PitchDetected')))
    _Attitude_roll = INT(name='roll', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'RollDetected')))
    _Attitude_yaw = INT(name='yaw', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'YawDetected')))
    Attitude._cont = ASN1Dict([
        ('pitch', _Attitude_pitch),
        ('roll', _Attitude_roll),
        ('yaw', _Attitude_yaw),
        ])
    Attitude._ext = None
    
    #-----< PitchDetected >-----#
    PitchDetected = INT(name='PitchDetected', mode=MODE_TYPE)
    PitchDetected._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-7200, ub=7200)], ev=None, er=[])
    
    #-----< RollDetected >-----#
    RollDetected = INT(name='RollDetected', mode=MODE_TYPE)
    RollDetected._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-14400, ub=14400)], ev=None, er=[])
    
    #-----< YawDetected >-----#
    YawDetected = INT(name='YawDetected', mode=MODE_TYPE)
    YawDetected._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-14400, ub=14400)], ev=None, er=[])
    
    #-----< AttitudeConfidence >-----#
    AttitudeConfidence = SEQ(name='AttitudeConfidence', mode=MODE_TYPE)
    _AttitudeConfidence_pitchConfidence = ENUM(name='pitchConfidence', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingConfidence')))
    _AttitudeConfidence_rollConfidence = ENUM(name='rollConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingConfidence')))
    _AttitudeConfidence_yawConfidence = ENUM(name='yawConfidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Common', 'HeadingConfidence')))
    AttitudeConfidence._cont = ASN1Dict([
        ('pitchConfidence', _AttitudeConfidence_pitchConfidence),
        ('rollConfidence', _AttitudeConfidence_rollConfidence),
        ('yawConfidence', _AttitudeConfidence_yawConfidence),
        ])
    AttitudeConfidence._ext = None
    
    #-----< AngularVelocity >-----#
    AngularVelocity = SEQ(name='AngularVelocity', mode=MODE_TYPE)
    _AngularVelocity_pitchRate = INT(name='pitchRate', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'PitchRate')))
    _AngularVelocity_rollRate = INT(name='rollRate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'RollRate')))
    AngularVelocity._cont = ASN1Dict([
        ('pitchRate', _AngularVelocity_pitchRate),
        ('rollRate', _AngularVelocity_rollRate),
        ])
    AngularVelocity._ext = None
    
    #-----< PitchRate >-----#
    PitchRate = INT(name='PitchRate', mode=MODE_TYPE)
    PitchRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    #-----< RollRate >-----#
    RollRate = INT(name='RollRate', mode=MODE_TYPE)
    RollRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    #-----< AngularVelocityConfidence >-----#
    AngularVelocityConfidence = SEQ(name='AngularVelocityConfidence', mode=MODE_TYPE)
    _AngularVelocityConfidence_pitchRateConfidence = ENUM(name='pitchRateConfidence', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'PitchRateConfidence')), opt=True)
    _AngularVelocityConfidence_rollRateConfidence = ENUM(name='rollRateConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'RollRateConfidence')), opt=True)
    AngularVelocityConfidence._cont = ASN1Dict([
        ('pitchRateConfidence', _AngularVelocityConfidence_pitchRateConfidence),
        ('rollRateConfidence', _AngularVelocityConfidence_rollRateConfidence),
        ])
    AngularVelocityConfidence._ext = None
    
    #-----< PitchRateConfidence >-----#
    PitchRateConfidence = ENUM(name='PitchRateConfidence', mode=MODE_TYPE)
    PitchRateConfidence._cont = ASN1Dict([('unavailable', 0), ('degSec-100-00', 1), ('degSec-010-00', 2), ('degSec-005-00', 3), ('degSec-001-00', 4), ('degSec-000-10', 5), ('degSec-000-05', 6), ('degSec-000-01', 7)])
    PitchRateConfidence._ext = None
    
    #-----< RollRateConfidence >-----#
    RollRateConfidence = ENUM(name='RollRateConfidence', mode=MODE_TYPE)
    RollRateConfidence._cont = ASN1Dict([('unavailable', 0), ('degSec-100-00', 1), ('degSec-010-00', 2), ('degSec-005-00', 3), ('degSec-001-00', 4), ('degSec-000-10', 5), ('degSec-000-05', 6), ('degSec-000-01', 7)])
    RollRateConfidence._ext = None
    
    #-----< VehicleSizeConfidence >-----#
    VehicleSizeConfidence = SEQ(name='VehicleSizeConfidence', mode=MODE_TYPE)
    _VehicleSizeConfidence_vehicleWidthConfidence = ENUM(name='vehicleWidthConfidence', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValueConfidence')))
    _VehicleSizeConfidence_vehicleLengthConfidence = ENUM(name='vehicleLengthConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValueConfidence')))
    _VehicleSizeConfidence_vehicleHeightConfidence = ENUM(name='vehicleHeightConfidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValueConfidence')), opt=True)
    VehicleSizeConfidence._cont = ASN1Dict([
        ('vehicleWidthConfidence', _VehicleSizeConfidence_vehicleWidthConfidence),
        ('vehicleLengthConfidence', _VehicleSizeConfidence_vehicleLengthConfidence),
        ('vehicleHeightConfidence', _VehicleSizeConfidence_vehicleHeightConfidence),
        ])
    VehicleSizeConfidence._ext = None
    
    #-----< ObstacleSize >-----#
    ObstacleSize = SEQ(name='ObstacleSize', mode=MODE_TYPE)
    _ObstacleSize_width = INT(name='width', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValue')))
    _ObstacleSize_length = INT(name='length', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValue')))
    _ObstacleSize_height = INT(name='height', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValue')), opt=True)
    ObstacleSize._cont = ASN1Dict([
        ('width', _ObstacleSize_width),
        ('length', _ObstacleSize_length),
        ('height', _ObstacleSize_height),
        ])
    ObstacleSize._ext = None
    
    #-----< ObstacleSizeConfidence >-----#
    ObstacleSizeConfidence = SEQ(name='ObstacleSizeConfidence', mode=MODE_TYPE)
    _ObstacleSizeConfidence_widthConfidence = ENUM(name='widthConfidence', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValueConfidence')))
    _ObstacleSizeConfidence_lengthConfidence = ENUM(name='lengthConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValueConfidence')))
    _ObstacleSizeConfidence_heightConfidence = ENUM(name='heightConfidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SensorDataSharingMessage', 'SizeValueConfidence')), opt=True)
    ObstacleSizeConfidence._cont = ASN1Dict([
        ('widthConfidence', _ObstacleSizeConfidence_widthConfidence),
        ('lengthConfidence', _ObstacleSizeConfidence_lengthConfidence),
        ('heightConfidence', _ObstacleSizeConfidence_heightConfidence),
        ])
    ObstacleSizeConfidence._ext = None
    
    #-----< SizeValue >-----#
    SizeValue = INT(name='SizeValue', mode=MODE_TYPE)
    SizeValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    
    #-----< SizeValueConfidence >-----#
    SizeValueConfidence = ENUM(name='SizeValueConfidence', mode=MODE_TYPE)
    SizeValueConfidence._cont = ASN1Dict([('unavailable', 0), ('size-100-00', 1), ('size-050-00', 2), ('size-020-00', 3), ('size-010-00', 4), ('size-005-00', 5), ('size-002-00', 6), ('size-001-00', 7), ('size-000-50', 8), ('size-000-20', 9), ('size-000-10', 10), ('size-000-05', 11), ('size-000-02', 12), ('size-000-01', 13)])
    SizeValueConfidence._ext = None
    
    _all_ = [
        _SensorDataSharingMessage_msgCnt,
        _SensorDataSharingMessage_sourceID,
        _SensorDataSharingMessage_equipmentType,
        _SensorDataSharingMessage_sDSMTimeStamp,
        _SensorDataSharingMessage_refPos,
        _SensorDataSharingMessage_refPosXYConf,
        _SensorDataSharingMessage_refPosElConf,
        _SensorDataSharingMessage_objects,
        SensorDataSharingMessage,
        EquipmentType,
        _DetectedObjectList__item_,
        DetectedObjectList,
        _DetectedObjectData_detObjCommon,
        _DetectedObjectData_detObjOptData,
        DetectedObjectData,
        _DetectedObjectOptionalData_detVeh,
        _DetectedObjectOptionalData_detVRU,
        _DetectedObjectOptionalData_detObst,
        DetectedObjectOptionalData,
        _DetectedObjectCommonData_objType,
        _DetectedObjectCommonData_objTypeCfd,
        _DetectedObjectCommonData_objectID,
        _DetectedObjectCommonData_measurementTime,
        _DetectedObjectCommonData_timeConfidence,
        _DetectedObjectCommonData_pos,
        _DetectedObjectCommonData_posConfidence,
        _DetectedObjectCommonData_speed,
        _DetectedObjectCommonData_speedConfidence,
        _DetectedObjectCommonData_speedZ,
        _DetectedObjectCommonData_speedConfidenceZ,
        _DetectedObjectCommonData_heading,
        _DetectedObjectCommonData_headingConf,
        _DetectedObjectCommonData_accel4way,
        _DetectedObjectCommonData_accCfdX,
        _DetectedObjectCommonData_accCfdY,
        _DetectedObjectCommonData_accCfdZ,
        _DetectedObjectCommonData_accCfdYaw,
        DetectedObjectCommonData,
        _DetectedVehicleData_lights,
        _DetectedVehicleData_vehAttitude,
        _DetectedVehicleData_vehAttitudeConfidence,
        _DetectedVehicleData_vehAngVel,
        _DetectedVehicleData_vehAngVelConfidence,
        _DetectedVehicleData_size,
        _DetectedVehicleData_height,
        _DetectedVehicleData_vehicleSizeConfidence,
        _DetectedVehicleData_vehicleClass,
        _DetectedVehicleData_classConf,
        DetectedVehicleData,
        _DetectedVRUData_basicType,
        _DetectedVRUData_propulsion,
        _DetectedVRUData_attachment,
        _DetectedVRUData_radius,
        DetectedVRUData,
        _DetectedObstacleData_obstSize,
        _DetectedObstacleData_obstSizeConfidence,
        DetectedObstacleData,
        ObjectType,
        ObjectID,
        ClassificationConfidence,
        MeasurementTimeOffset,
        _PositionOffsetXYZ_offsetX,
        _PositionOffsetXYZ_offsetY,
        _PositionOffsetXYZ_offsetZ,
        PositionOffsetXYZ,
        ObjectDistance,
        _Attitude_pitch,
        _Attitude_roll,
        _Attitude_yaw,
        Attitude,
        PitchDetected,
        RollDetected,
        YawDetected,
        _AttitudeConfidence_pitchConfidence,
        _AttitudeConfidence_rollConfidence,
        _AttitudeConfidence_yawConfidence,
        AttitudeConfidence,
        _AngularVelocity_pitchRate,
        _AngularVelocity_rollRate,
        AngularVelocity,
        PitchRate,
        RollRate,
        _AngularVelocityConfidence_pitchRateConfidence,
        _AngularVelocityConfidence_rollRateConfidence,
        AngularVelocityConfidence,
        PitchRateConfidence,
        RollRateConfidence,
        _VehicleSizeConfidence_vehicleWidthConfidence,
        _VehicleSizeConfidence_vehicleLengthConfidence,
        _VehicleSizeConfidence_vehicleHeightConfidence,
        VehicleSizeConfidence,
        _ObstacleSize_width,
        _ObstacleSize_length,
        _ObstacleSize_height,
        ObstacleSize,
        _ObstacleSizeConfidence_widthConfidence,
        _ObstacleSizeConfidence_lengthConfidence,
        _ObstacleSizeConfidence_heightConfidence,
        ObstacleSizeConfidence,
        SizeValue,
        SizeValueConfidence,
    ]

init_modules(EfcDataDictionary, J2540ITIS, AddGrpB, AddGrpC, BasicSafetyMessage, Common, CommonSafetyRequest, EmergencyVehicleAlert, ITIS, IntersectionCollision, MapData, MessageFrame, NMEAcorrections, NTCIP, PersonalSafetyMessage, ProbeDataManagement, ProbeVehicleData, REGION, RTCMcorrections, RoadSideAlert, SignalControlAndPrioritizationRequest, SignalControlAndPrioritizationStatus, SPAT, SignalRequestMessage, SignalStatusMessage, TrafficSignalPhaseAndTiming, TestMessage00, TestMessage01, TestMessage02, TestMessage03, TestMessage04, TestMessage05, TestMessage06, TestMessage07, TestMessage08, TestMessage09, TestMessage10, TestMessage11, TestMessage12, TestMessage13, TestMessage14, TestMessage15, TrafficLightStatusMessage, TravelerInformation, RoadWeatherMessage, RoadSafetyMessage, CooperativeControlMessage, PersonalSafetyMessage2, RoadGeometryAndAttributes, ProbeDataConfig, ProbeDataReport, ManeuverSharingAndCoordinatingMessage, RoadUserChargingConfigMessage, RoadUserChargingReportMessage, TollAdvertisementMessage, TollUsageAckMessage, TollUsageMessage, SensorDataSharingMessage)
